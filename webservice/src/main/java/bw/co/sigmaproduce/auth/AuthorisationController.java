// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.co.sigmaproduce.auth;

import java.util.Set;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * 
 * TODO: Model Documentation for AuthorisationRestController
 */
public interface AuthorisationController {

    @GetMapping("/{authorisationId}/{menuSectionId}")
    public ResponseEntity<?> assignMenuSection(@RequestBody(required = false) Long authorisationId, @RequestBody(required = false) Long menuSectionId);

    @GetMapping("/id/{id}")
    public ResponseEntity<?> findById(@PathVariable(name = "id", required = false) Long id);

    @PostMapping("/find-by-roles-url")
    public ResponseEntity<?> findByRolesAndUrl(@RequestParam(name = "url", required = true) String url, @RequestParam(name = "roles", required = false) Set<String> roles);

    @PostMapping("/restricted-view-items")
    public ResponseEntity<?> findRestrictedViewItems(@RequestParam(name = "url", required = true) String url, @RequestParam(name = "roles", required = false) Set<String> roles);

    @GetMapping("authorised")
    public ResponseEntity<?> getAccessTypeCodeAuthorisations(@RequestParam(name = "roles", required = false) Set<String> roles, @RequestParam(name = "accessPointTypeCodes", required = true) Set<String> accessPointTypeCodes);

    @GetMapping("/all")
    public ResponseEntity<?> getAll();

    @GetMapping("/page/{pageNumber}/size/{pageSize}")
    public ResponseEntity<?> getAllPaged(@PathVariable(name = "pageNumber", required = false) Integer pageNumber, @PathVariable(name = "pageSize", required = false) Integer pageSize);

    @DeleteMapping("/id/{id}")
    public ResponseEntity<?> remove(@PathVariable(name = "id", required = false) Long id);

    @PostMapping()
    public ResponseEntity<?> save(@RequestBody(required = true) AuthorisationVO authorisation);

    @PostMapping("/search")
    public ResponseEntity<?> search(@RequestBody(required = false) AuthorisationCriteria criteria);
}