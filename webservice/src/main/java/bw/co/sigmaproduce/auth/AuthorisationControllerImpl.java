// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.sigmaproduce.auth;

import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.ArrayList;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/authorisation")
@Tag(name = "Authorisation", description = "Managing the access authorisations.")
@CrossOrigin()
public class AuthorisationControllerImpl extends AuthorisationControllerBase {

    public AuthorisationControllerImpl(AuthorisationService authorisationService) {
        super(authorisationService);
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try {
            logger.debug("Searches for Authorisation by Id "+id);
            Optional<AuthorisationVO> data = Optional.of(this.authorisationService.findById(id)); // TODO: Add custom code here;
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Authorisation with id %d not found.", id));
            }
    
            return response;
            
        } catch (Exception e) {
            e.printStackTrace();
            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                || e instanceof EntityNotFoundException  || e.getCause() instanceof EntityNotFoundException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Authorisation with id %d not found.", id));
            } else {
                message = "Unknown error encountered. Please contact administrator.";
            }

            logger.error(message);
            return ResponseEntity.badRequest().body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try {
            
            logger.debug("Displays all Authorisations");
            return ResponseEntity.ok().body(this.authorisationService.getAll());

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("Unknown error encountered. Please contact administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try {
            logger.debug("Deletes an Authorisation by Id"+id);
            Optional<Boolean> data = Optional.of(this.authorisationService.remove(id));
            ResponseEntity<Boolean> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete authorisation with id " + id);
            }

            return ResponseEntity.badRequest().body("Unknown error encountered when deleting authorisation with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleSave(AuthorisationVO authorisationVO) {     
        try {
            logger.debug("Saves Authorisation "+ authorisationVO);
            Optional<AuthorisationVO> data = Optional.of(authorisationService.save(authorisationVO)); // TODO: Add custom code here;
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not save authorisation.");
            }
    
            return response;
            
        } catch (IllegalArgumentException | AuthorisationServiceException e) {

            e.printStackTrace();

            String message = e.getMessage();

            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'authorisation'")) {

                    message = "Authorisation information is missing.";

                } else if(message.contains("or its id can not be null") || message.contains("'authorisation.accessPoint' can not be null")) {
                
                    message = "The access point or its id is missing.";
                
                } else {
                    message = "Unknown error encountered. Please contact administrator.";
                }

                return ResponseEntity.badRequest().body(message);

            } 
            
            // else if(e.getCause() instanceof PSQLException) {

            //     if (e.getCause().getMessage().contains("duplicate key")) {
            //         if(e.getCause().getMessage().contains("(access_point_fk)")) {

            //             return ResponseEntity.badRequest().body("Authorisation for this access point has already been created. Please edit it instead.");
            //         }
            //     } else if (e.getCause().getMessage().contains("null value in column")) {

            //         if (e.getCause().getMessage().contains("column \"created_by\"")) {
            //             return ResponseEntity.badRequest().body("The created-by value is missing.");
            //         } else if (e.getCause().getMessage().contains("column \"created_date\"")) {
            //             return ResponseEntity.badRequest().body("The created date value is missing.");
            //         }
                    
            //     }
                
            //     return ResponseEntity.badRequest().body("An unknown database error has occured. Please contact the administrator.");
            // } 

            return ResponseEntity.badRequest().body("Unknown error encountered. Please contact administrator.");
        } catch(Exception e) {

            e.printStackTrace();
            // e.getCause().printStackTrace();
            return ResponseEntity.badRequest().body("Unknown error encountered. Please contact administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(AuthorisationCriteria criteria) {
        try {
            logger.debug("Searche for an Authorisation by criteria "+criteria);
            
            return ResponseEntity.ok().body(authorisationService.search(criteria));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("Unknown error encountered. Please contact administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try {
            logger.debug("Displays all Authoristions by specified Page Number: "+pageNumber+", Page Size: "+pageSize);
            return ResponseEntity.ok().body(authorisationService.getAll(pageNumber, pageSize));
                        
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Unknown error encountered. Please contact administrator.");
        }

    }

    @Override
    public ResponseEntity<?> handleGetAccessTypeCodeAuthorisations(Set<String> roles, Set<String> accessPointTypeCode) {
        try {
            logger.debug("Displays Authorisation by specified roles: " + roles + " and Access Point Type Code: " + accessPointTypeCode);
            return ResponseEntity.ok().body(authorisationService.getAccessTypeCodeAuthorisations(roles, accessPointTypeCode));
            
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("An unknown error has occured. Please contact administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleAssignMenuSection(Long authorisationId, Long menuSectionId) {
        try {
            logger.debug(" Assigns Menu section with Authorisation Id: " + authorisationId + " and  Menu Section: " + menuSectionId);
            return ResponseEntity.ok().body(authorisationService.assignMenuSection(authorisationId, menuSectionId));
                        
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Unknown error encountered. Please contact administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindByRolesAndUrl(String url, Set<String> roles) {
        try {
            logger.debug("Searches for an Authorisation by "+"Url: "+url+" and Roles: "+ roles);
            return ResponseEntity.ok().body(authorisationService.findByRolesAndUrl(url, roles));
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Unknown error encountered. Please contact administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindRestrictedViewItems(String url, Set<String> roles) {
        try {
            logger.debug("Searches for a Restricted View item by "+"Url: "+url+" and Roles: "+roles);
            Collection<AuthorisationVO> data = authorisationService.findByUrlPrefix(url);

            Collection<String> restrictedUrls = new ArrayList<>();

            for(AuthorisationVO auth : data) {
                // Any authorisation entry is but default restricted
                boolean restricted = true;
                for(String inRole : auth.getRoles()) {

                    if(roles.contains(inRole)) {
                        restricted = false;
                        break;
                    }
                }

                // Add unrestricted URL
                if(!restricted) {
                    restrictedUrls.add(auth.getAccessPoint().getUrl());
                }
            }
    
            return ResponseEntity.ok().body(restrictedUrls);
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Unknown error encountered. Please contact administrator.");
        }
    }
}