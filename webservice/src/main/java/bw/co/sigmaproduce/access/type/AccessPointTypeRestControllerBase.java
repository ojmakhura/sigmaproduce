// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.co.sigmaproduce.access.type;

import bw.co.sigmaproduce.security.SecurityAuthorisationCheck;
import io.swagger.v3.oas.annotations.Operation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

public abstract class AccessPointTypeRestControllerBase implements AccessPointTypeRestController {

    protected Logger logger = LoggerFactory.getLogger(AccessPointTypeRestController.class);
        protected final AccessPointTypeService accessPointTypeService;

    public AccessPointTypeRestControllerBase(
        AccessPointTypeService accessPointTypeService    ) {
        this.accessPointTypeService = accessPointTypeService;
    }

    @GetMapping("/id/{id}")
    @SecurityAuthorisationCheck(path = "/access/type/id/{id}", method = "GET")
    @Operation(summary = "Find access point type by id", description = "Get the access point type with the given id")
    public ResponseEntity<?> findById(Long id) {
        return handleFindById(id);
    }

    public abstract ResponseEntity<?> handleFindById(Long id);

    @GetMapping("/all")
    @SecurityAuthorisationCheck(path = "/access/type/all", method = "GET")
    public ResponseEntity<?> getAll() {
        return handleGetAll();
    }

    public abstract ResponseEntity<?> handleGetAll();

    @GetMapping("/page/{pageNumber}/size/{pageSize}")
    @SecurityAuthorisationCheck(path = "/access/type/page/{pageNumber}/size/{pageSize}", method = "GET")
    @Operation(summary = "Get Access Point Type Page", description = "Get access point types given a page number and page size")
    public ResponseEntity<?> getAllPaged(Integer pageNumber, Integer pageSize) {
        return handleGetAllPaged(pageNumber, pageSize);
    }

    public abstract ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize);

    @PostMapping("/search/page/{pageNumber}/size/{pageSize}")
    @SecurityAuthorisationCheck(path = "/access/type/search/page/{pageNumber}/size/{pageSize}", method = "POST")
    @Operation(summary = "Search Access Point Type", description = "Get {pageSize} access point types for a particular {pageNumber} given a search criteria")
    public ResponseEntity<?> pagedSearch(Integer pageNumber, Integer pageSize, String criteria) {
        return handlePagedSearch(pageNumber, pageSize, criteria);
    }

    public abstract ResponseEntity<?> handlePagedSearch(Integer pageNumber, Integer pageSize, String criteria);

    @DeleteMapping("/id/{id}")
    @SecurityAuthorisationCheck(path = "/access/type/id/{id}", method = "DELETE")
    public ResponseEntity<?> remove(Long id) {
        return handleRemove(id);
    }

    public abstract ResponseEntity<?> handleRemove(Long id);

    @PostMapping()
    @Operation(summary = "Save Access Point Type", description = "Save access point type")
    @SecurityAuthorisationCheck(path = "/access/type", method = "POST")
    public ResponseEntity<?> save(AccessPointTypeVO accessPointType) {
        return handleSave(accessPointType);
    }

    public abstract ResponseEntity<?> handleSave(AccessPointTypeVO accessPointType);

    @PostMapping("/search")
    @SecurityAuthorisationCheck(path = "/access/type/search", method = "POST")
    public ResponseEntity<?> search(String criteria) {
        return handleSearch(criteria);
    }

    public abstract ResponseEntity<?> handleSearch(String criteria);

    /**
     * Gets the reference to <code>$serviceRef.daoName</code>.
     * @return accessPointTypeService
     */
    protected AccessPointTypeService getAccessPointTypeService()
    {
        return this.accessPointTypeService;
    }

}