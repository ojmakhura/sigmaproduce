// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.co.sigmaproduce.access;

import bw.co.sigmaproduce.security.SecurityAuthorisationCheck;
import io.swagger.v3.oas.annotations.Operation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

public abstract class AccessPointRestControllerBase implements AccessPointRestController {

    protected Logger logger = LoggerFactory.getLogger(AccessPointRestController.class);
        protected final AccessPointService accessPointService;

    public AccessPointRestControllerBase(
        AccessPointService accessPointService    ) {
        this.accessPointService = accessPointService;
    }

    @GetMapping("/id/{id}")
    @SecurityAuthorisationCheck(path = "/access/id/{id}", method = "GET")
    @Operation(summary = "Find access point by id", description = "Get the access point with the given id")
    public ResponseEntity<?> findById(Long id) {
        return handleFindById(id);
    }

    public abstract ResponseEntity<?> handleFindById(Long id);

    @GetMapping("/all")
    @SecurityAuthorisationCheck(path = "/access/all", method = "GET")
    @Operation(summary = "Get access points", description = "Get all access points")
    public ResponseEntity<?> getAll() {
        return handleGetAll();
    }

    public abstract ResponseEntity<?> handleGetAll();

    @GetMapping("/page/{pageNumber}/size/{pageSize}")
    @SecurityAuthorisationCheck(path = "/access/page/{pageNumber}/size/{pageSize}", method = "GET")
    @Operation(summary = "Get Access Point Page", description = "Get {pageSize} access points with for a particular {pageNumber}")
    public ResponseEntity<?> getAllPaged(Integer pageNumber, Integer pageSize) {
        return handleGetAllPaged(pageNumber, pageSize);
    }

    public abstract ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize);

    @PostMapping("/search/page/{pageNumber}/size/{pageSize}")
    @SecurityAuthorisationCheck(path = "/access/search/page/{pageNumber}/size/{pageSize}", method = "GET")
    @Operation(summary = "Search Access Point", description = "Get {pageSize} access points for a particular {pageNumber} given a search criteria")
    public ResponseEntity<?> pagedSearch(Integer pageNumber, Integer pageSize, AccessPointCriteria criteria) {
        return handlePagedSearch(pageNumber, pageSize, criteria);
    }

    public abstract ResponseEntity<?> handlePagedSearch(Integer pageNumber, Integer pageSize, AccessPointCriteria criteria);

    @DeleteMapping("/id/{id}")
    @Operation(summary = "Remove access point by id", description = "Remove the access point with the given id")
    @SecurityAuthorisationCheck(path = "/access/id/{id}", method = "DELETE")
    public ResponseEntity<?> remove(Long id) {
        return handleRemove(id);
    }

    public abstract ResponseEntity<?> handleRemove(Long id);

    @PostMapping()
    @SecurityAuthorisationCheck(path = "/access", method = "POST")
    @Operation(summary = "Save Access Point", description = "Save access point")
    public ResponseEntity<?> save(AccessPointVO accessPoint) {
        return handleSave(accessPoint);
    }

    public abstract ResponseEntity<?> handleSave(AccessPointVO accessPoint);

    @PostMapping("/search")
    @SecurityAuthorisationCheck(path = "/access/search", method = "POST")
    @Operation(summary = "Search Access Points", description = "Search access points based on the criteria")
    public ResponseEntity<?> search(AccessPointCriteria criteria) {
        return handleSearch(criteria);
    }

    public abstract ResponseEntity<?> handleSearch(AccessPointCriteria criteria);

    /**
     * Gets the reference to <code>$serviceRef.daoName</code>.
     * @return accessPointService
     */
    protected AccessPointService getAccessPointService()
    {
        return this.accessPointService;
    }

}