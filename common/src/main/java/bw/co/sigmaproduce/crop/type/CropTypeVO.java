// license-header java merge-point
//
/**
 * @author Generated by ValueObject.vsl in andromda-java-cartridge on 06/12/2024 19:31:21+0200 Do not modify by hand!
 *
 * TEMPLATE:     ValueObject.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::crop::type::CropTypeVO
 * STEREOTYPE:   ValueObject
 */
package bw.co.sigmaproduce.crop.type;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * TODO: Model Documentation for CropTypeVO
 */
public class CropTypeVO
    extends CropTypeListVO
{
    /** The serial version UID of this class. Needed for serialization. */
    private static final long serialVersionUID = -5112777818128286966L;

    // Class attributes
    /**
     * TODO: Model Documentation for CropTypeVO.createdBy
     */
    protected String createdBy;
    /**
     * TODO: Model Documentation for CropTypeVO.updatedBy
     */
    protected String updatedBy;
    /**
     * TODO: Model Documentation for CropTypeVO.createdDate
     */
    protected LocalDateTime createdDate;
    /**
     * TODO: Model Documentation for CropTypeVO.updatedDate
     */
    protected LocalDateTime updatedDate;
    /**
     * TODO: Model Documentation for CropTypeVO.images
     */
    protected Collection<File> images;
    /**
     * TODO: Model Documentation for CropTypeVO.description
     */
    protected String description;
    /**
     * TODO: Model Documentation for CropTypeVO.numberOfCrops
     */
    protected Integer numberOfCrops;
    /**
     * TODO: Model Documentation for CropTypeVO.numberOfDiseases
     */
    protected Integer numberOfDiseases = 0;
    /**
     * TODO: Model Documentation for CropTypeVO.numberOfPests
     */
    protected Integer numberOfPests = 0;

    /** Default Constructor with no properties */
    public CropTypeVO()
    {
        super();
    }

    /**
     * Constructor taking only required properties
     * @param codeIn String TODO: Model Documentation for CropTypeListVO.code
     * @param nameIn String TODO: Model Documentation for CropTypeListVO.name
     */
    public CropTypeVO(final String codeIn, final String nameIn)
    {
        super(codeIn, nameIn);
    }

    /**
     * Constructor with all properties
     * @param codeIn String
     * @param idIn String
     * @param nameIn String
     * @param createdByIn String
     * @param updatedByIn String
     * @param createdDateIn LocalDateTime
     * @param updatedDateIn LocalDateTime
     * @param imagesIn Collection<File>
     * @param descriptionIn String
     * @param numberOfCropsIn Integer
     * @param numberOfDiseasesIn Integer
     * @param numberOfPestsIn Integer
     */
    public CropTypeVO(final String codeIn, final String idIn, final String nameIn, final String createdByIn, final String updatedByIn, final LocalDateTime createdDateIn, final LocalDateTime updatedDateIn, final Collection<File> imagesIn, final String descriptionIn, final Integer numberOfCropsIn, final Integer numberOfDiseasesIn, final Integer numberOfPestsIn)
    {
        super(codeIn, idIn, nameIn);
        this.createdBy = createdByIn;
        this.updatedBy = updatedByIn;
        this.createdDate = createdDateIn;
        this.updatedDate = updatedDateIn;
        this.images = imagesIn;
        this.description = descriptionIn;
        this.numberOfCrops = numberOfCropsIn;
        this.numberOfDiseases = numberOfDiseasesIn;
        this.numberOfPests = numberOfPestsIn;
    }

    /**
     * Copies constructor from other CropTypeVO
     *
     * @param otherBean Cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public CropTypeVO(final CropTypeVO otherBean)
    {
        super(otherBean);
        this.createdBy = otherBean.getCreatedBy();
        this.updatedBy = otherBean.getUpdatedBy();
        this.createdDate = otherBean.getCreatedDate();
        this.updatedDate = otherBean.getUpdatedDate();
        this.images = otherBean.getImages();
        this.description = otherBean.getDescription();
        this.numberOfCrops = otherBean.getNumberOfCrops();
        this.numberOfDiseases = otherBean.getNumberOfDiseases();
        this.numberOfPests = otherBean.getNumberOfPests();
    }

    /**
     * Copies all properties from the argument value object into this value object.
     * @param otherBean Cannot be <code>null</code>
     */
    public void copy(final CropTypeVO otherBean)
    {
        if (null != otherBean)
        {
            super.copy(otherBean);
            this.setCreatedBy(otherBean.getCreatedBy());
            this.setUpdatedBy(otherBean.getUpdatedBy());
            this.setCreatedDate(otherBean.getCreatedDate());
            this.setUpdatedDate(otherBean.getUpdatedDate());
            this.setImages(otherBean.getImages());
            this.setDescription(otherBean.getDescription());
            this.setNumberOfCrops(otherBean.getNumberOfCrops());
            this.setNumberOfDiseases(otherBean.getNumberOfDiseases());
            this.setNumberOfPests(otherBean.getNumberOfPests());
        }
    }

    /**
     * TODO: Model Documentation for CropTypeVO.createdBy
     * Get the createdBy Attribute
     * @return createdBy String
     */
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.createdBy
     * @param value String
     */
    public void setCreatedBy(final String value)
    {
        this.createdBy = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.updatedBy
     * Get the updatedBy Attribute
     * @return updatedBy String
     */
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.updatedBy
     * @param value String
     */
    public void setUpdatedBy(final String value)
    {
        this.updatedBy = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.createdDate
     * Get the createdDate Attribute
     * @return createdDate LocalDateTime
     */
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.createdDate
     * @param value LocalDateTime
     */
    public void setCreatedDate(final LocalDateTime value)
    {
        this.createdDate = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.updatedDate
     * Get the updatedDate Attribute
     * @return updatedDate LocalDateTime
     */
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.updatedDate
     * @param value LocalDateTime
     */
    public void setUpdatedDate(final LocalDateTime value)
    {
        this.updatedDate = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.images
     * Get the images Attribute
     * @return images Collection<File>
     */
    public Collection<File> getImages()
    {
        if (this.images == null)
        {
            this.images = new ArrayList<File>();
        }
        return this.images;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.images
     * @param value Collection<File>
     */
    public void setImages(final Collection<File> value)
    {
        this.images = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.description
     * Get the description Attribute
     * @return description String
     */
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.description
     * @param value String
     */
    public void setDescription(final String value)
    {
        this.description = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.numberOfCrops
     * Get the numberOfCrops Attribute
     * @return numberOfCrops Integer
     */
    public Integer getNumberOfCrops()
    {
        return this.numberOfCrops;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.numberOfCrops
     * @param value Integer
     */
    public void setNumberOfCrops(final Integer value)
    {
        this.numberOfCrops = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.numberOfDiseases
     * Get the numberOfDiseases Attribute
     * @return numberOfDiseases Integer
     */
    public Integer getNumberOfDiseases()
    {
        return this.numberOfDiseases;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.numberOfDiseases
     * @param value Integer
     */
    public void setNumberOfDiseases(final Integer value)
    {
        this.numberOfDiseases = value;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.numberOfPests
     * Get the numberOfPests Attribute
     * @return numberOfPests Integer
     */
    public Integer getNumberOfPests()
    {
        return this.numberOfPests;
    }

    /**
     * TODO: Model Documentation for CropTypeVO.numberOfPests
     * @param value Integer
     */
    public void setNumberOfPests(final Integer value)
    {
        this.numberOfPests = value;
    }

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(final Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
        // Check if the same object instance
        if (object==this)
        {
            return true;
        }
        CropTypeVO rhs = (CropTypeVO) object;
        return new EqualsBuilder()
            .appendSuper(super.equals(object))
            .append(this.getCreatedBy(), rhs.getCreatedBy())
            .append(this.getUpdatedBy(), rhs.getUpdatedBy())
            .append(this.getCreatedDate(), rhs.getCreatedDate())
            .append(this.getUpdatedDate(), rhs.getUpdatedDate())
            .append(this.getImages(), rhs.getImages())
            .append(this.getDescription(), rhs.getDescription())
            .append(this.getNumberOfCrops(), rhs.getNumberOfCrops())
            .append(this.getNumberOfDiseases(), rhs.getNumberOfDiseases())
            .append(this.getNumberOfPests(), rhs.getNumberOfPests())
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(final CropTypeListVO object)
    {
        if (object==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (object==this)
        {
            return 0;
        }
        if (!(object instanceof CropTypeVO))
        {
            return -1;
        }
        CropTypeVO myClass = (CropTypeVO)object;
        return new CompareToBuilder()
            .appendSuper(super.compareTo(object))
            .append(this.getCreatedBy(), myClass.getCreatedBy())
            .append(this.getUpdatedBy(), myClass.getUpdatedBy())
            .append(this.getCreatedDate(), myClass.getCreatedDate())
            .append(this.getUpdatedDate(), myClass.getUpdatedDate())
            .append(this.getImages(), myClass.getImages())
            .append(this.getDescription(), myClass.getDescription())
            .append(this.getNumberOfCrops(), myClass.getNumberOfCrops())
            .append(this.getNumberOfDiseases(), myClass.getNumberOfDiseases())
            .append(this.getNumberOfPests(), myClass.getNumberOfPests())
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885)
            .appendSuper(super.hashCode())
            .append(this.getCreatedBy())
            .append(this.getUpdatedBy())
            .append(this.getCreatedDate())
            .append(this.getUpdatedDate())
            .append(this.getImages())
            .append(this.getDescription())
            .append(this.getNumberOfCrops())
            .append(this.getNumberOfDiseases())
            .append(this.getNumberOfPests())
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
    @Override
    public String toString()
    {

        StringBuilder builder = new StringBuilder();
        builder.append("{\n");
        builder.append("\t\"createdBy\" : \"" + this.getCreatedBy() + "\"");
        builder.append("\t,\"updatedBy\" : \"" + this.getUpdatedBy() + "\"");
        builder.append("\t,\"createdDate\" : \"" + this.getCreatedDate() + "\"");
        builder.append("\t,\"updatedDate\" : \"" + this.getUpdatedDate() + "\"");
        builder.append("\t,\"images\" : \"" + this.getImages() + "\"");
        builder.append("\t,\"description\" : \"" + this.getDescription() + "\"");
        builder.append("\t,\"numberOfCrops\" : \"" + this.getNumberOfCrops() + "\"");
        builder.append("\t,\"numberOfDiseases\" : \"" + this.getNumberOfDiseases() + "\"");
        builder.append("\t,\"numberOfPests\" : \"" + this.getNumberOfPests() + "\"");
        builder.append("\t,\"code\" : \"" + this.getCode() + "\"");
        builder.append("\t,\"id\" : \"" + this.getId() + "\"");
        builder.append("\t,\"name\" : \"" + this.getName() + "\"");
        builder.append("}");
        return builder.toString();

    }

    /**
     * Compares the properties of this instance to the properties of the argument. This method will return
     * {@code false} as soon as it detects that the argument is {@code null} or not of the same type as
     * (or a sub-type of) this instance's type.
     *
     * <p/>For array, collection or map properties the comparison will be done one level deep, in other words:
     * the elements will be compared using the {@code equals()} operation.
     *
     * <p/>Note that two properties will be considered equal when both values are {@code null}.
     *
     * @param thatObject the object containing the properties to compare against this instance
     * @return this method will return {@code true} in case the argument has the same type as this class, or is a
     *      sub-type of this class and all properties as found on this class have equal values when queried on that
     *      argument instance; in all other cases this method will return {@code false}
     */
    @Override
    public boolean equalProperties(final Object thatObject)
    {
        if (thatObject == null || !this.getClass().isAssignableFrom(thatObject.getClass()))
        {
            return false;
        }

        @SuppressWarnings("unchecked")
        final CropTypeVO that = (CropTypeVO)thatObject;
        return super.equalProperties(that)
            && equal(this.getCreatedBy(), that.getCreatedBy())
            && equal(this.getUpdatedBy(), that.getUpdatedBy())
            && equal(this.getCreatedDate(), that.getCreatedDate())
            && equal(this.getUpdatedDate(), that.getUpdatedDate())
            && equal(this.getImages(), that.getImages())
            && equal(this.getDescription(), that.getDescription())
            && equal(this.getNumberOfCrops(), that.getNumberOfCrops())
            && equal(this.getNumberOfDiseases(), that.getNumberOfDiseases())
            && equal(this.getNumberOfPests(), that.getNumberOfPests())
        ;
    }

    // CropTypeVO value-object java merge-point
}