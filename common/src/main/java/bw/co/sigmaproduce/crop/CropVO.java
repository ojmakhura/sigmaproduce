// license-header java merge-point
//
/**
 * @author Generated by ValueObject.vsl in andromda-java-cartridge on 06/12/2024 19:31:21+0200 Do not modify by hand!
 *
 * TEMPLATE:     ValueObject.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::crop::CropVO
 * STEREOTYPE:   ValueObject
 */
package bw.co.sigmaproduce.crop;

import bw.co.sigmaproduce.TimePeriod;
import bw.co.sigmaproduce.crop.type.CropTypeListVO;
import bw.co.sigmaproduce.crop.variety.CropVarietyVO;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * TODO: Model Documentation for CropVO
 */
public class CropVO
    implements Serializable, Comparable<CropVO>
{
    /** The serial version UID of this class. Needed for serialization. */
    private static final long serialVersionUID = 5863384560446944702L;

    // Class attributes
    /**
     * TODO: Model Documentation for CropVO.id
     */
    protected String id;
    /**
     * TODO: Model Documentation for CropVO.createdBy
     */
    protected String createdBy;
    /**
     * TODO: Model Documentation for CropVO.updatedBy
     */
    protected String updatedBy;
    /**
     * TODO: Model Documentation for CropVO.createdDate
     */
    protected LocalDateTime createdDate;
    /**
     * TODO: Model Documentation for CropVO.updatedDate
     */
    protected LocalDateTime updatedDate;
    /**
     * TODO: Model Documentation for CropVO.code
     */
    protected String code;
    /**
     * TODO: Model Documentation for CropVO.name
     */
    protected String name;
    /**
     * TODO: Model Documentation for CropVO.varieties
     */
    protected Collection<CropVarietyVO> varieties;
    /**
     * TODO: Model Documentation for CropVO.description
     */
    protected String description;
    /**
     * TODO: Model Documentation for CropVO.images
     */
    protected Collection<File> images;
    /**
     * TODO: Model Documentation for CropVO.maturesIn
     */
    protected Integer maturesIn;
    /**
     * TODO: Model Documentation for CropVO.numberOfDiseases
     */
    protected Integer numberOfDiseases = 0;
    /**
     * TODO: Model Documentation for CropVO.numberOfPests
     */
    protected Integer numberOfPests = 0;
    /**
     * TODO: Model Documentation for CropVO.type
     */
    protected CropTypeListVO type;
    /**
     * TODO: Model Documentation for CropVO.maturityPeriod
     */
    protected TimePeriod maturityPeriod;

    /** Default Constructor with no properties */
    public CropVO()
    {
        // Documented empty block - avoid compiler warning - no super constructor
    }

    /**
     * Constructor taking only required properties
     * @param codeIn String TODO: Model Documentation for CropVO.code
     * @param nameIn String TODO: Model Documentation for CropVO.name
     * @param typeIn CropTypeListVO TODO: Model Documentation for CropVO.type
     */
    public CropVO(final String codeIn, final String nameIn, final CropTypeListVO typeIn)
    {
        this.code = codeIn;
        this.name = nameIn;
        this.type = typeIn;
    }

    /**
     * Constructor with all properties
     * @param idIn String
     * @param createdByIn String
     * @param updatedByIn String
     * @param createdDateIn LocalDateTime
     * @param updatedDateIn LocalDateTime
     * @param codeIn String
     * @param nameIn String
     * @param varietiesIn Collection<CropVarietyVO>
     * @param descriptionIn String
     * @param imagesIn Collection<File>
     * @param maturesInIn Integer
     * @param numberOfDiseasesIn Integer
     * @param numberOfPestsIn Integer
     * @param typeIn CropTypeListVO
     * @param maturityPeriodIn TimePeriod
     */
    public CropVO(final String idIn, final String createdByIn, final String updatedByIn, final LocalDateTime createdDateIn, final LocalDateTime updatedDateIn, final String codeIn, final String nameIn, final Collection<CropVarietyVO> varietiesIn, final String descriptionIn, final Collection<File> imagesIn, final Integer maturesInIn, final Integer numberOfDiseasesIn, final Integer numberOfPestsIn, final CropTypeListVO typeIn, final TimePeriod maturityPeriodIn)
    {
        this.id = idIn;
        this.createdBy = createdByIn;
        this.updatedBy = updatedByIn;
        this.createdDate = createdDateIn;
        this.updatedDate = updatedDateIn;
        this.code = codeIn;
        this.name = nameIn;
        this.varieties = varietiesIn;
        this.description = descriptionIn;
        this.images = imagesIn;
        this.maturesIn = maturesInIn;
        this.numberOfDiseases = numberOfDiseasesIn;
        this.numberOfPests = numberOfPestsIn;
        this.type = typeIn;
        this.maturityPeriod = maturityPeriodIn;
    }

    /**
     * Copies constructor from other CropVO
     *
     * @param otherBean Cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public CropVO(final CropVO otherBean)
    {
        this.id = otherBean.getId();
        this.createdBy = otherBean.getCreatedBy();
        this.updatedBy = otherBean.getUpdatedBy();
        this.createdDate = otherBean.getCreatedDate();
        this.updatedDate = otherBean.getUpdatedDate();
        this.code = otherBean.getCode();
        this.name = otherBean.getName();
        this.varieties = otherBean.getVarieties();
        this.description = otherBean.getDescription();
        this.images = otherBean.getImages();
        this.maturesIn = otherBean.getMaturesIn();
        this.numberOfDiseases = otherBean.getNumberOfDiseases();
        this.numberOfPests = otherBean.getNumberOfPests();
        this.type = otherBean.getType();
        this.maturityPeriod = otherBean.getMaturityPeriod();
    }

    /**
     * Copies all properties from the argument value object into this value object.
     * @param otherBean Cannot be <code>null</code>
     */
    public void copy(final CropVO otherBean)
    {
        if (null != otherBean)
        {
            this.setId(otherBean.getId());
            this.setCreatedBy(otherBean.getCreatedBy());
            this.setUpdatedBy(otherBean.getUpdatedBy());
            this.setCreatedDate(otherBean.getCreatedDate());
            this.setUpdatedDate(otherBean.getUpdatedDate());
            this.setCode(otherBean.getCode());
            this.setName(otherBean.getName());
            this.setVarieties(otherBean.getVarieties());
            this.setDescription(otherBean.getDescription());
            this.setImages(otherBean.getImages());
            this.setMaturesIn(otherBean.getMaturesIn());
            this.setNumberOfDiseases(otherBean.getNumberOfDiseases());
            this.setNumberOfPests(otherBean.getNumberOfPests());
            this.setType(otherBean.getType());
            this.setMaturityPeriod(otherBean.getMaturityPeriod());
        }
    }

    /**
     * TODO: Model Documentation for CropVO.id
     * Get the id Attribute
     * @return id String
     */
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for CropVO.id
     * @param value String
     */
    public void setId(final String value)
    {
        this.id = value;
    }

    /**
     * TODO: Model Documentation for CropVO.createdBy
     * Get the createdBy Attribute
     * @return createdBy String
     */
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for CropVO.createdBy
     * @param value String
     */
    public void setCreatedBy(final String value)
    {
        this.createdBy = value;
    }

    /**
     * TODO: Model Documentation for CropVO.updatedBy
     * Get the updatedBy Attribute
     * @return updatedBy String
     */
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for CropVO.updatedBy
     * @param value String
     */
    public void setUpdatedBy(final String value)
    {
        this.updatedBy = value;
    }

    /**
     * TODO: Model Documentation for CropVO.createdDate
     * Get the createdDate Attribute
     * @return createdDate LocalDateTime
     */
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for CropVO.createdDate
     * @param value LocalDateTime
     */
    public void setCreatedDate(final LocalDateTime value)
    {
        this.createdDate = value;
    }

    /**
     * TODO: Model Documentation for CropVO.updatedDate
     * Get the updatedDate Attribute
     * @return updatedDate LocalDateTime
     */
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for CropVO.updatedDate
     * @param value LocalDateTime
     */
    public void setUpdatedDate(final LocalDateTime value)
    {
        this.updatedDate = value;
    }

    /**
     * TODO: Model Documentation for CropVO.code
     * Get the code Attribute
     * @return code String
     */
    public String getCode()
    {
        return this.code;
    }

    /**
     * TODO: Model Documentation for CropVO.code
     * @param value String
     */
    public void setCode(final String value)
    {
        this.code = value;
    }

    /**
     * TODO: Model Documentation for CropVO.name
     * Get the name Attribute
     * @return name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for CropVO.name
     * @param value String
     */
    public void setName(final String value)
    {
        this.name = value;
    }

    /**
     * TODO: Model Documentation for CropVO.varieties
     * Get the varieties Attribute
     * @return varieties Collection<CropVarietyVO>
     */
    public Collection<CropVarietyVO> getVarieties()
    {
        if (this.varieties == null)
        {
            this.varieties = new ArrayList<CropVarietyVO>();
        }
        return this.varieties;
    }

    /**
     * TODO: Model Documentation for CropVO.varieties
     * @param value Collection<CropVarietyVO>
     */
    public void setVarieties(final Collection<CropVarietyVO> value)
    {
        this.varieties = value;
    }

    /**
     * TODO: Model Documentation for CropVO.description
     * Get the description Attribute
     * @return description String
     */
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for CropVO.description
     * @param value String
     */
    public void setDescription(final String value)
    {
        this.description = value;
    }

    /**
     * TODO: Model Documentation for CropVO.images
     * Get the images Attribute
     * @return images Collection<File>
     */
    public Collection<File> getImages()
    {
        if (this.images == null)
        {
            this.images = new ArrayList<File>();
        }
        return this.images;
    }

    /**
     * TODO: Model Documentation for CropVO.images
     * @param value Collection<File>
     */
    public void setImages(final Collection<File> value)
    {
        this.images = value;
    }

    /**
     * TODO: Model Documentation for CropVO.maturesIn
     * Get the maturesIn Attribute
     * @return maturesIn Integer
     */
    public Integer getMaturesIn()
    {
        return this.maturesIn;
    }

    /**
     * TODO: Model Documentation for CropVO.maturesIn
     * @param value Integer
     */
    public void setMaturesIn(final Integer value)
    {
        this.maturesIn = value;
    }

    /**
     * TODO: Model Documentation for CropVO.numberOfDiseases
     * Get the numberOfDiseases Attribute
     * @return numberOfDiseases Integer
     */
    public Integer getNumberOfDiseases()
    {
        return this.numberOfDiseases;
    }

    /**
     * TODO: Model Documentation for CropVO.numberOfDiseases
     * @param value Integer
     */
    public void setNumberOfDiseases(final Integer value)
    {
        this.numberOfDiseases = value;
    }

    /**
     * TODO: Model Documentation for CropVO.numberOfPests
     * Get the numberOfPests Attribute
     * @return numberOfPests Integer
     */
    public Integer getNumberOfPests()
    {
        return this.numberOfPests;
    }

    /**
     * TODO: Model Documentation for CropVO.numberOfPests
     * @param value Integer
     */
    public void setNumberOfPests(final Integer value)
    {
        this.numberOfPests = value;
    }

    /**
     * TODO: Model Documentation for CropVO.type
     * Get the type Attribute
     * @return type CropTypeListVO
     */
    public CropTypeListVO getType()
    {
        return this.type;
    }

    /**
     * TODO: Model Documentation for CropVO.type
     * @param value CropTypeListVO
     */
    public void setType(final CropTypeListVO value)
    {
        this.type = value;
    }

    /**
     * TODO: Model Documentation for CropVO.maturityPeriod
     * Get the maturityPeriod Attribute
     * @return maturityPeriod TimePeriod
     */
    public TimePeriod getMaturityPeriod()
    {
        return this.maturityPeriod;
    }

    /**
     * TODO: Model Documentation for CropVO.maturityPeriod
     * @param value TimePeriod
     */
    public void setMaturityPeriod(final TimePeriod value)
    {
        this.maturityPeriod = value;
    }

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(final Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
        // Check if the same object instance
        if (object==this)
        {
            return true;
        }
        CropVO rhs = (CropVO) object;
        return new EqualsBuilder()
            .append(this.getId(), rhs.getId())
            .append(this.getCreatedBy(), rhs.getCreatedBy())
            .append(this.getUpdatedBy(), rhs.getUpdatedBy())
            .append(this.getCreatedDate(), rhs.getCreatedDate())
            .append(this.getUpdatedDate(), rhs.getUpdatedDate())
            .append(this.getCode(), rhs.getCode())
            .append(this.getName(), rhs.getName())
            .append(this.getVarieties(), rhs.getVarieties())
            .append(this.getDescription(), rhs.getDescription())
            .append(this.getImages(), rhs.getImages())
            .append(this.getMaturesIn(), rhs.getMaturesIn())
            .append(this.getNumberOfDiseases(), rhs.getNumberOfDiseases())
            .append(this.getNumberOfPests(), rhs.getNumberOfPests())
            .append(this.getType(), rhs.getType())
            .append(this.getMaturityPeriod(), rhs.getMaturityPeriod())
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(final CropVO object)
    {
        if (object==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (object==this)
        {
            return 0;
        }
        return new CompareToBuilder()
            .append(this.getId(), object.getId())
            .append(this.getCreatedBy(), object.getCreatedBy())
            .append(this.getUpdatedBy(), object.getUpdatedBy())
            .append(this.getCreatedDate(), object.getCreatedDate())
            .append(this.getUpdatedDate(), object.getUpdatedDate())
            .append(this.getCode(), object.getCode())
            .append(this.getName(), object.getName())
            .append(this.getVarieties(), object.getVarieties())
            .append(this.getDescription(), object.getDescription())
            .append(this.getImages(), object.getImages())
            .append(this.getMaturesIn(), object.getMaturesIn())
            .append(this.getNumberOfDiseases(), object.getNumberOfDiseases())
            .append(this.getNumberOfPests(), object.getNumberOfPests())
            .append(this.getType(), object.getType())
            .append(this.getMaturityPeriod(), object.getMaturityPeriod())
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885)
            .append(this.getId())
            .append(this.getCreatedBy())
            .append(this.getUpdatedBy())
            .append(this.getCreatedDate())
            .append(this.getUpdatedDate())
            .append(this.getCode())
            .append(this.getName())
            .append(this.getVarieties())
            .append(this.getDescription())
            .append(this.getImages())
            .append(this.getMaturesIn())
            .append(this.getNumberOfDiseases())
            .append(this.getNumberOfPests())
            .append(this.getType())
            .append(this.getMaturityPeriod())
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
    @Override
    public String toString()
    {

        StringBuilder builder = new StringBuilder();
        builder.append("{\n");
        builder.append("\t\"id\" : \"" + this.getId() + "\"");
        builder.append("\t,\"createdBy\" : \"" + this.getCreatedBy() + "\"");
        builder.append("\t,\"updatedBy\" : \"" + this.getUpdatedBy() + "\"");
        builder.append("\t,\"createdDate\" : \"" + this.getCreatedDate() + "\"");
        builder.append("\t,\"updatedDate\" : \"" + this.getUpdatedDate() + "\"");
        builder.append("\t,\"code\" : \"" + this.getCode() + "\"");
        builder.append("\t,\"name\" : \"" + this.getName() + "\"");
        builder.append("\t,\"varieties\" : \"" + this.getVarieties() + "\"");
        builder.append("\t,\"description\" : \"" + this.getDescription() + "\"");
        builder.append("\t,\"images\" : \"" + this.getImages() + "\"");
        builder.append("\t,\"maturesIn\" : \"" + this.getMaturesIn() + "\"");
        builder.append("\t,\"numberOfDiseases\" : \"" + this.getNumberOfDiseases() + "\"");
        builder.append("\t,\"numberOfPests\" : \"" + this.getNumberOfPests() + "\"");
        builder.append("\t,\"type\" : \"" + this.getType() + "\"");
        builder.append("\t,\"maturityPeriod\" : \"" + this.getMaturityPeriod() + "\"");
        builder.append("}");
        return builder.toString();

    }

    /**
     * Compares the properties of this instance to the properties of the argument. This method will return
     * {@code false} as soon as it detects that the argument is {@code null} or not of the same type as
     * (or a sub-type of) this instance's type.
     *
     * <p/>For array, collection or map properties the comparison will be done one level deep, in other words:
     * the elements will be compared using the {@code equals()} operation.
     *
     * <p/>Note that two properties will be considered equal when both values are {@code null}.
     *
     * @param thatObject the object containing the properties to compare against this instance
     * @return this method will return {@code true} in case the argument has the same type as this class, or is a
     *      sub-type of this class and all properties as found on this class have equal values when queried on that
     *      argument instance; in all other cases this method will return {@code false}
     */
    public boolean equalProperties(final Object thatObject)
    {
        if (thatObject == null || !this.getClass().isAssignableFrom(thatObject.getClass()))
        {
            return false;
        }

        final CropVO that = (CropVO)thatObject;
        return
            equal(this.getId(), that.getId())
            && equal(this.getCreatedBy(), that.getCreatedBy())
            && equal(this.getUpdatedBy(), that.getUpdatedBy())
            && equal(this.getCreatedDate(), that.getCreatedDate())
            && equal(this.getUpdatedDate(), that.getUpdatedDate())
            && equal(this.getCode(), that.getCode())
            && equal(this.getName(), that.getName())
            && equal(this.getVarieties(), that.getVarieties())
            && equal(this.getDescription(), that.getDescription())
            && equal(this.getImages(), that.getImages())
            && equal(this.getMaturesIn(), that.getMaturesIn())
            && equal(this.getNumberOfDiseases(), that.getNumberOfDiseases())
            && equal(this.getNumberOfPests(), that.getNumberOfPests())
            && equal(this.getType(), that.getType())
            && equal(this.getMaturityPeriod(), that.getMaturityPeriod())
        ;
    }

    /**
     * This is a convenient helper method which is able to detect whether or not two values are equal. Two values
     * are equal when they are both {@code null}, are arrays of the same length with equal elements or are
     * equal objects (this includes {@link Collection} and {@link java.util.Map} instances).
     *
     * <p/>Note that for array, collection or map instances the comparison runs one level deep.
     *
     * @param first the first object to compare, may be {@code null}
     * @param second the second object to compare, may be {@code null}
     * @return this method will return {@code true} in case both objects are equal as explained above;
     *      in all other cases this method will return {@code false}
     */
    protected static boolean equal(final Object first, final Object second)
    {
        final boolean equal;

        if (first == null)
        {
            equal = (second == null);
        }
        else if (first.getClass().isArray() && (second != null) && second.getClass().isArray())
        {
            equal = Arrays.equals((Object[])first, (Object[])second);
        }
        else // note that the following also covers Collection and java.util.Map
        {
            equal = first.equals(second);
        }

        return equal;
    }

    // CropVO value-object java merge-point
}