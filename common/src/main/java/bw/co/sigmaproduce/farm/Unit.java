// license-header java merge-point
//
/**
 * @author Generated by TypeSafeEnumeration.vsl in andromda-java-cartridge on 06/12/2024 19:31:22+0200 Do not modify by hand!
 *
 * TEMPLATE:     TypeSafeEnumeration.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::farm::Unit
 */
//
package bw.co.sigmaproduce.farm;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO: Model Documentation for bw.co.sigmaproduce.farm.Unit
 */
public enum Unit
{
    /** TODO: Model Documentation for Enumeration Literal SQUARE_METERS value "SQUARE_METERS" */
    SQUARE_METERS("SQUARE_METERS"),
    /** TODO: Model Documentation for Enumeration Literal HECTARES value "HECTARES" */
    HECTARES("HECTARES"),
    /** TODO: Model Documentation for Enumeration Literal ACRES value "ACRES" */
    ACRES("ACRES");

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -1205432858522043914L;

    private final String enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private Unit(String value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of Unit from <code>its name</code>.
     *
     * @param name the name to create the Unit from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static Unit fromString(String name)
    {
        return Unit.valueOf(name);
    }

    /**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of Unit from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the Unit from.
     * @return static Enumeration with corresponding value
     */
    public static Unit fromValue(String value)
    {
        // Allow either the Enum name or value string to be used to retrieve the enum
        for (Unit enumName: Unit.values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        for (String enumName: Unit.names())
        {
            if (enumName.equals(value))
            {
                return Unit.valueOf(enumName);
            }
        }
        throw new IllegalArgumentException("Unit.fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return Unit.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return Unit.names;
    }

    private static Map<String, Unit> values = new LinkedHashMap<String, Unit>(3, 1);
    private static List<String> literals = new ArrayList<String>(3);
    private static List<String> names = new ArrayList<String>(3);
    private static List<Unit> valueList = new ArrayList<Unit>(3);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (Unit.values)
        {
            Unit.values.put(SQUARE_METERS.enumValue, SQUARE_METERS);
            Unit.values.put(HECTARES.enumValue, HECTARES);
            Unit.values.put(ACRES.enumValue, ACRES);
        }
        synchronized (Unit.valueList)
        {
            Unit.valueList.add(SQUARE_METERS);
            Unit.valueList.add(HECTARES);
            Unit.valueList.add(ACRES);
            Unit.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (Unit.literals)
        {
            Unit.literals.add(SQUARE_METERS.enumValue);
            Unit.literals.add(HECTARES.enumValue);
            Unit.literals.add(ACRES.enumValue);
            Unit.literals = Collections.unmodifiableList(literals);
        }
        synchronized (Unit.names)
        {
            Unit.names.add("SQUARE_METERS");
            Unit.names.add("HECTARES");
            Unit.names.add("ACRES");
            Unit.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}