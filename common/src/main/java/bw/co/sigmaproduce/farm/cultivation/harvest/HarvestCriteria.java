// license-header java merge-point
//
/**
 * @author Generated by ValueObject.vsl in andromda-java-cartridge on 06/12/2024 19:31:22+0200 Do not modify by hand!
 *
 * TEMPLATE:     ValueObject.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::farm::cultivation::harvest::HarvestCriteria
 * STEREOTYPE:   ValueObject
 */
package bw.co.sigmaproduce.farm.cultivation.harvest;

import java.io.Serializable;
import java.util.Arrays;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * TODO: Model Documentation for HarvestCriteria
 */
public class HarvestCriteria
    implements Serializable, Comparable<HarvestCriteria>
{
    /** The serial version UID of this class. Needed for serialization. */
    private static final long serialVersionUID = -8690643706427791503L;

    // Class attributes
    /**
     * TODO: Model Documentation for
     * HarvestCriteria.farm
     */
    protected String farm;
    /**
     * TODO: Model Documentation for
     * HarvestCriteria.crop
     */
    protected String crop;
    /**
     * TODO: Model Documentation for
     * HarvestCriteria.village
     */
    protected String village;
    /**
     * TODO: Model Documentation for
     * HarvestCriteria.district
     */
    protected String district;

    /**
     * Constructor taking only required properties
     */
    public HarvestCriteria()
    {
        // Documented empty block - avoid compiler warning - no super constructor
    }

    /**
     * Constructor with all properties
     * @param farmIn String
     * @param cropIn String
     * @param villageIn String
     * @param districtIn String
     */
    public HarvestCriteria(final String farmIn, final String cropIn, final String villageIn, final String districtIn)
    {
        this.farm = farmIn;
        this.crop = cropIn;
        this.village = villageIn;
        this.district = districtIn;
    }

    /**
     * Copies constructor from other HarvestCriteria
     *
     * @param otherBean Cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public HarvestCriteria(final HarvestCriteria otherBean)
    {
        this.farm = otherBean.getFarm();
        this.crop = otherBean.getCrop();
        this.village = otherBean.getVillage();
        this.district = otherBean.getDistrict();
    }

    /**
     * Copies all properties from the argument value object into this value object.
     * @param otherBean Cannot be <code>null</code>
     */
    public void copy(final HarvestCriteria otherBean)
    {
        if (null != otherBean)
        {
            this.setFarm(otherBean.getFarm());
            this.setCrop(otherBean.getCrop());
            this.setVillage(otherBean.getVillage());
            this.setDistrict(otherBean.getDistrict());
        }
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.farm
     * Get the farm Attribute
     * @return farm String
     */
    public String getFarm()
    {
        return this.farm;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.farm
     * @param value String
     */
    public void setFarm(final String value)
    {
        this.farm = value;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.crop
     * Get the crop Attribute
     * @return crop String
     */
    public String getCrop()
    {
        return this.crop;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.crop
     * @param value String
     */
    public void setCrop(final String value)
    {
        this.crop = value;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.village
     * Get the village Attribute
     * @return village String
     */
    public String getVillage()
    {
        return this.village;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.village
     * @param value String
     */
    public void setVillage(final String value)
    {
        this.village = value;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.district
     * Get the district Attribute
     * @return district String
     */
    public String getDistrict()
    {
        return this.district;
    }

    /**
     * TODO: Model Documentation for
     * HarvestCriteria.district
     * @param value String
     */
    public void setDistrict(final String value)
    {
        this.district = value;
    }

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(final Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
        // Check if the same object instance
        if (object==this)
        {
            return true;
        }
        HarvestCriteria rhs = (HarvestCriteria) object;
        return new EqualsBuilder()
            .append(this.getFarm(), rhs.getFarm())
            .append(this.getCrop(), rhs.getCrop())
            .append(this.getVillage(), rhs.getVillage())
            .append(this.getDistrict(), rhs.getDistrict())
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(final HarvestCriteria object)
    {
        if (object==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (object==this)
        {
            return 0;
        }
        return new CompareToBuilder()
            .append(this.getFarm(), object.getFarm())
            .append(this.getCrop(), object.getCrop())
            .append(this.getVillage(), object.getVillage())
            .append(this.getDistrict(), object.getDistrict())
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885)
            .append(this.getFarm())
            .append(this.getCrop())
            .append(this.getVillage())
            .append(this.getDistrict())
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
    @Override
    public String toString()
    {

        StringBuilder builder = new StringBuilder();
        builder.append("{\n");
        builder.append("\t\"farm\" : \"" + this.getFarm() + "\"");
        builder.append("\t,\"crop\" : \"" + this.getCrop() + "\"");
        builder.append("\t,\"village\" : \"" + this.getVillage() + "\"");
        builder.append("\t,\"district\" : \"" + this.getDistrict() + "\"");
        builder.append("}");
        return builder.toString();

    }

    /**
     * Compares the properties of this instance to the properties of the argument. This method will return
     * {@code false} as soon as it detects that the argument is {@code null} or not of the same type as
     * (or a sub-type of) this instance's type.
     *
     * <p/>For array, collection or map properties the comparison will be done one level deep, in other words:
     * the elements will be compared using the {@code equals()} operation.
     *
     * <p/>Note that two properties will be considered equal when both values are {@code null}.
     *
     * @param thatObject the object containing the properties to compare against this instance
     * @return this method will return {@code true} in case the argument has the same type as this class, or is a
     *      sub-type of this class and all properties as found on this class have equal values when queried on that
     *      argument instance; in all other cases this method will return {@code false}
     */
    public boolean equalProperties(final Object thatObject)
    {
        if (thatObject == null || !this.getClass().isAssignableFrom(thatObject.getClass()))
        {
            return false;
        }

        final HarvestCriteria that = (HarvestCriteria)thatObject;
        return
            equal(this.getFarm(), that.getFarm())
            && equal(this.getCrop(), that.getCrop())
            && equal(this.getVillage(), that.getVillage())
            && equal(this.getDistrict(), that.getDistrict())
        ;
    }

    /**
     * This is a convenient helper method which is able to detect whether or not two values are equal. Two values
     * are equal when they are both {@code null}, are arrays of the same length with equal elements or are
     * equal objects (this includes {@link java.util.Collection} and {@link java.util.Map} instances).
     *
     * <p/>Note that for array, collection or map instances the comparison runs one level deep.
     *
     * @param first the first object to compare, may be {@code null}
     * @param second the second object to compare, may be {@code null}
     * @return this method will return {@code true} in case both objects are equal as explained above;
     *      in all other cases this method will return {@code false}
     */
    protected static boolean equal(final Object first, final Object second)
    {
        final boolean equal;

        if (first == null)
        {
            equal = (second == null);
        }
        else if (first.getClass().isArray() && (second != null) && second.getClass().isArray())
        {
            equal = Arrays.equals((Object[])first, (Object[])second);
        }
        else // note that the following also covers java.util.Collection and java.util.Map
        {
            equal = first.equals(second);
        }

        return equal;
    }

    // HarvestCriteria value-object java merge-point
}