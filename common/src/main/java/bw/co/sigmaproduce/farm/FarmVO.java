// license-header java merge-point
//
/**
 * @author Generated by ValueObject.vsl in andromda-java-cartridge on 06/12/2024 19:31:21+0200 Do not modify by hand!
 *
 * TEMPLATE:     ValueObject.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::farm::FarmVO
 * STEREOTYPE:   ValueObject
 */
package bw.co.sigmaproduce.farm;

import bw.co.sigmaproduce.farm.cultivation.CultivationListVO;
import bw.co.sigmaproduce.farm.post.PostVO;
import bw.co.sigmaproduce.village.VillageVO;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * TODO: Model Documentation for FarmVO
 */
public class FarmVO
    implements Serializable, Comparable<FarmVO>
{
    /** The serial version UID of this class. Needed for serialization. */
    private static final long serialVersionUID = 4438699187722582342L;

    // Class attributes
    /**
     * TODO: Model Documentation for FarmVO.id
     */
    protected String id;
    /**
     * TODO: Model Documentation for FarmVO.createdBy
     */
    protected String createdBy;
    /**
     * TODO: Model Documentation for FarmVO.updatedBy
     */
    protected String updatedBy;
    /**
     * TODO: Model Documentation for FarmVO.createdDate
     */
    protected LocalDateTime createdDate;
    /**
     * TODO: Model Documentation for FarmVO.updatedDate
     */
    protected LocalDateTime updatedDate;
    /**
     * TODO: Model Documentation for FarmVO.name
     */
    protected String name;
    /**
     * TODO: Model Documentation for FarmVO.description
     */
    protected String description;
    /**
     * TODO: Model Documentation for FarmVO.latitude
     */
    protected Double latitude;
    /**
     * TODO: Model Documentation for FarmVO.longitude
     */
    protected Double longitude;
    /**
     * TODO: Model Documentation for FarmVO.owner
     */
    protected String owner;
    /**
     * TODO: Model Documentation for FarmVO.nearestVillage
     */
    protected VillageVO nearestVillage;
    /**
     * TODO: Model Documentation for FarmVO.ownerId
     */
    protected String ownerId;
    /**
     * TODO: Model Documentation for FarmVO.unit
     */
    protected Unit unit;
    /**
     * TODO: Model Documentation for FarmVO.size
     */
    protected Double size;
    /**
     * TODO: Model Documentation for FarmVO.alliedFarms
     */
    protected Collection<FarmListVO> alliedFarms;
    /**
     * TODO: Model Documentation for FarmVO.cultivations
     */
    protected Collection<CultivationListVO> cultivations;
    /**
     * TODO: Model Documentation for FarmVO.posts
     */
    protected Collection<PostVO> posts;
    /**
     * TODO: Model Documentation for FarmVO.photos
     */
    protected Collection<File> photos;

    /** Default Constructor with no properties */
    public FarmVO()
    {
        // Documented empty block - avoid compiler warning - no super constructor
    }

    /**
     * Constructor taking only required properties
     * @param nameIn String TODO: Model Documentation for FarmVO.name
     * @param ownerIn String TODO: Model Documentation for FarmVO.owner
     * @param ownerIdIn String TODO: Model Documentation for FarmVO.ownerId
     */
    public FarmVO(final String nameIn, final String ownerIn, final String ownerIdIn)
    {
        this.name = nameIn;
        this.owner = ownerIn;
        this.ownerId = ownerIdIn;
    }

    /**
     * Constructor with all properties
     * @param idIn String
     * @param createdByIn String
     * @param updatedByIn String
     * @param createdDateIn LocalDateTime
     * @param updatedDateIn LocalDateTime
     * @param nameIn String
     * @param descriptionIn String
     * @param latitudeIn Double
     * @param longitudeIn Double
     * @param ownerIn String
     * @param nearestVillageIn VillageVO
     * @param ownerIdIn String
     * @param unitIn Unit
     * @param sizeIn Double
     * @param alliedFarmsIn Collection<FarmListVO>
     * @param cultivationsIn Collection<CultivationListVO>
     * @param postsIn Collection<PostVO>
     * @param photosIn Collection<File>
     */
    public FarmVO(final String idIn, final String createdByIn, final String updatedByIn, final LocalDateTime createdDateIn, final LocalDateTime updatedDateIn, final String nameIn, final String descriptionIn, final Double latitudeIn, final Double longitudeIn, final String ownerIn, final VillageVO nearestVillageIn, final String ownerIdIn, final Unit unitIn, final Double sizeIn, final Collection<FarmListVO> alliedFarmsIn, final Collection<CultivationListVO> cultivationsIn, final Collection<PostVO> postsIn, final Collection<File> photosIn)
    {
        this.id = idIn;
        this.createdBy = createdByIn;
        this.updatedBy = updatedByIn;
        this.createdDate = createdDateIn;
        this.updatedDate = updatedDateIn;
        this.name = nameIn;
        this.description = descriptionIn;
        this.latitude = latitudeIn;
        this.longitude = longitudeIn;
        this.owner = ownerIn;
        this.nearestVillage = nearestVillageIn;
        this.ownerId = ownerIdIn;
        this.unit = unitIn;
        this.size = sizeIn;
        this.alliedFarms = alliedFarmsIn;
        this.cultivations = cultivationsIn;
        this.posts = postsIn;
        this.photos = photosIn;
    }

    /**
     * Copies constructor from other FarmVO
     *
     * @param otherBean Cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public FarmVO(final FarmVO otherBean)
    {
        this.id = otherBean.getId();
        this.createdBy = otherBean.getCreatedBy();
        this.updatedBy = otherBean.getUpdatedBy();
        this.createdDate = otherBean.getCreatedDate();
        this.updatedDate = otherBean.getUpdatedDate();
        this.name = otherBean.getName();
        this.description = otherBean.getDescription();
        this.latitude = otherBean.getLatitude();
        this.longitude = otherBean.getLongitude();
        this.owner = otherBean.getOwner();
        this.nearestVillage = otherBean.getNearestVillage();
        this.ownerId = otherBean.getOwnerId();
        this.unit = otherBean.getUnit();
        this.size = otherBean.getSize();
        this.alliedFarms = otherBean.getAlliedFarms();
        this.cultivations = otherBean.getCultivations();
        this.posts = otherBean.getPosts();
        this.photos = otherBean.getPhotos();
    }

    /**
     * Copies all properties from the argument value object into this value object.
     * @param otherBean Cannot be <code>null</code>
     */
    public void copy(final FarmVO otherBean)
    {
        if (null != otherBean)
        {
            this.setId(otherBean.getId());
            this.setCreatedBy(otherBean.getCreatedBy());
            this.setUpdatedBy(otherBean.getUpdatedBy());
            this.setCreatedDate(otherBean.getCreatedDate());
            this.setUpdatedDate(otherBean.getUpdatedDate());
            this.setName(otherBean.getName());
            this.setDescription(otherBean.getDescription());
            this.setLatitude(otherBean.getLatitude());
            this.setLongitude(otherBean.getLongitude());
            this.setOwner(otherBean.getOwner());
            this.setNearestVillage(otherBean.getNearestVillage());
            this.setOwnerId(otherBean.getOwnerId());
            this.setUnit(otherBean.getUnit());
            this.setSize(otherBean.getSize());
            this.setAlliedFarms(otherBean.getAlliedFarms());
            this.setCultivations(otherBean.getCultivations());
            this.setPosts(otherBean.getPosts());
            this.setPhotos(otherBean.getPhotos());
        }
    }

    /**
     * TODO: Model Documentation for FarmVO.id
     * Get the id Attribute
     * @return id String
     */
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for FarmVO.id
     * @param value String
     */
    public void setId(final String value)
    {
        this.id = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.createdBy
     * Get the createdBy Attribute
     * @return createdBy String
     */
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for FarmVO.createdBy
     * @param value String
     */
    public void setCreatedBy(final String value)
    {
        this.createdBy = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.updatedBy
     * Get the updatedBy Attribute
     * @return updatedBy String
     */
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for FarmVO.updatedBy
     * @param value String
     */
    public void setUpdatedBy(final String value)
    {
        this.updatedBy = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.createdDate
     * Get the createdDate Attribute
     * @return createdDate LocalDateTime
     */
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for FarmVO.createdDate
     * @param value LocalDateTime
     */
    public void setCreatedDate(final LocalDateTime value)
    {
        this.createdDate = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.updatedDate
     * Get the updatedDate Attribute
     * @return updatedDate LocalDateTime
     */
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for FarmVO.updatedDate
     * @param value LocalDateTime
     */
    public void setUpdatedDate(final LocalDateTime value)
    {
        this.updatedDate = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.name
     * Get the name Attribute
     * @return name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for FarmVO.name
     * @param value String
     */
    public void setName(final String value)
    {
        this.name = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.description
     * Get the description Attribute
     * @return description String
     */
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for FarmVO.description
     * @param value String
     */
    public void setDescription(final String value)
    {
        this.description = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.latitude
     * Get the latitude Attribute
     * @return latitude Double
     */
    public Double getLatitude()
    {
        return this.latitude;
    }

    /**
     * TODO: Model Documentation for FarmVO.latitude
     * @param value Double
     */
    public void setLatitude(final Double value)
    {
        this.latitude = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.longitude
     * Get the longitude Attribute
     * @return longitude Double
     */
    public Double getLongitude()
    {
        return this.longitude;
    }

    /**
     * TODO: Model Documentation for FarmVO.longitude
     * @param value Double
     */
    public void setLongitude(final Double value)
    {
        this.longitude = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.owner
     * Get the owner Attribute
     * @return owner String
     */
    public String getOwner()
    {
        return this.owner;
    }

    /**
     * TODO: Model Documentation for FarmVO.owner
     * @param value String
     */
    public void setOwner(final String value)
    {
        this.owner = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.nearestVillage
     * Get the nearestVillage Attribute
     * @return nearestVillage VillageVO
     */
    public VillageVO getNearestVillage()
    {
        return this.nearestVillage;
    }

    /**
     * TODO: Model Documentation for FarmVO.nearestVillage
     * @param value VillageVO
     */
    public void setNearestVillage(final VillageVO value)
    {
        this.nearestVillage = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.ownerId
     * Get the ownerId Attribute
     * @return ownerId String
     */
    public String getOwnerId()
    {
        return this.ownerId;
    }

    /**
     * TODO: Model Documentation for FarmVO.ownerId
     * @param value String
     */
    public void setOwnerId(final String value)
    {
        this.ownerId = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.unit
     * Get the unit Attribute
     * @return unit Unit
     */
    public Unit getUnit()
    {
        return this.unit;
    }

    /**
     * TODO: Model Documentation for FarmVO.unit
     * @param value Unit
     */
    public void setUnit(final Unit value)
    {
        this.unit = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.size
     * Get the size Attribute
     * @return size Double
     */
    public Double getSize()
    {
        return this.size;
    }

    /**
     * TODO: Model Documentation for FarmVO.size
     * @param value Double
     */
    public void setSize(final Double value)
    {
        this.size = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.alliedFarms
     * Get the alliedFarms Attribute
     * @return alliedFarms Collection<FarmListVO>
     */
    public Collection<FarmListVO> getAlliedFarms()
    {
        if (this.alliedFarms == null)
        {
            this.alliedFarms = new ArrayList<FarmListVO>();
        }
        return this.alliedFarms;
    }

    /**
     * TODO: Model Documentation for FarmVO.alliedFarms
     * @param value Collection<FarmListVO>
     */
    public void setAlliedFarms(final Collection<FarmListVO> value)
    {
        this.alliedFarms = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.cultivations
     * Get the cultivations Attribute
     * @return cultivations Collection<CultivationListVO>
     */
    public Collection<CultivationListVO> getCultivations()
    {
        if (this.cultivations == null)
        {
            this.cultivations = new ArrayList<CultivationListVO>();
        }
        return this.cultivations;
    }

    /**
     * TODO: Model Documentation for FarmVO.cultivations
     * @param value Collection<CultivationListVO>
     */
    public void setCultivations(final Collection<CultivationListVO> value)
    {
        this.cultivations = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.posts
     * Get the posts Attribute
     * @return posts Collection<PostVO>
     */
    public Collection<PostVO> getPosts()
    {
        if (this.posts == null)
        {
            this.posts = new ArrayList<PostVO>();
        }
        return this.posts;
    }

    /**
     * TODO: Model Documentation for FarmVO.posts
     * @param value Collection<PostVO>
     */
    public void setPosts(final Collection<PostVO> value)
    {
        this.posts = value;
    }

    /**
     * TODO: Model Documentation for FarmVO.photos
     * Get the photos Attribute
     * @return photos Collection<File>
     */
    public Collection<File> getPhotos()
    {
        if (this.photos == null)
        {
            this.photos = new ArrayList<File>();
        }
        return this.photos;
    }

    /**
     * TODO: Model Documentation for FarmVO.photos
     * @param value Collection<File>
     */
    public void setPhotos(final Collection<File> value)
    {
        this.photos = value;
    }

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(final Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
        // Check if the same object instance
        if (object==this)
        {
            return true;
        }
        FarmVO rhs = (FarmVO) object;
        return new EqualsBuilder()
            .append(this.getId(), rhs.getId())
            .append(this.getCreatedBy(), rhs.getCreatedBy())
            .append(this.getUpdatedBy(), rhs.getUpdatedBy())
            .append(this.getCreatedDate(), rhs.getCreatedDate())
            .append(this.getUpdatedDate(), rhs.getUpdatedDate())
            .append(this.getName(), rhs.getName())
            .append(this.getDescription(), rhs.getDescription())
            .append(this.getLatitude(), rhs.getLatitude())
            .append(this.getLongitude(), rhs.getLongitude())
            .append(this.getOwner(), rhs.getOwner())
            .append(this.getNearestVillage(), rhs.getNearestVillage())
            .append(this.getOwnerId(), rhs.getOwnerId())
            .append(this.getUnit(), rhs.getUnit())
            .append(this.getSize(), rhs.getSize())
            .append(this.getAlliedFarms(), rhs.getAlliedFarms())
            .append(this.getCultivations(), rhs.getCultivations())
            .append(this.getPosts(), rhs.getPosts())
            .append(this.getPhotos(), rhs.getPhotos())
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(final FarmVO object)
    {
        if (object==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (object==this)
        {
            return 0;
        }
        return new CompareToBuilder()
            .append(this.getId(), object.getId())
            .append(this.getCreatedBy(), object.getCreatedBy())
            .append(this.getUpdatedBy(), object.getUpdatedBy())
            .append(this.getCreatedDate(), object.getCreatedDate())
            .append(this.getUpdatedDate(), object.getUpdatedDate())
            .append(this.getName(), object.getName())
            .append(this.getDescription(), object.getDescription())
            .append(this.getLatitude(), object.getLatitude())
            .append(this.getLongitude(), object.getLongitude())
            .append(this.getOwner(), object.getOwner())
            .append(this.getNearestVillage(), object.getNearestVillage())
            .append(this.getOwnerId(), object.getOwnerId())
            .append(this.getUnit(), object.getUnit())
            .append(this.getSize(), object.getSize())
            .append(this.getAlliedFarms(), object.getAlliedFarms())
            .append(this.getCultivations(), object.getCultivations())
            .append(this.getPosts(), object.getPosts())
            .append(this.getPhotos(), object.getPhotos())
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885)
            .append(this.getId())
            .append(this.getCreatedBy())
            .append(this.getUpdatedBy())
            .append(this.getCreatedDate())
            .append(this.getUpdatedDate())
            .append(this.getName())
            .append(this.getDescription())
            .append(this.getLatitude())
            .append(this.getLongitude())
            .append(this.getOwner())
            .append(this.getNearestVillage())
            .append(this.getOwnerId())
            .append(this.getUnit())
            .append(this.getSize())
            .append(this.getAlliedFarms())
            .append(this.getCultivations())
            .append(this.getPosts())
            .append(this.getPhotos())
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
    @Override
    public String toString()
    {

        StringBuilder builder = new StringBuilder();
        builder.append("{\n");
        builder.append("\t\"id\" : \"" + this.getId() + "\"");
        builder.append("\t,\"createdBy\" : \"" + this.getCreatedBy() + "\"");
        builder.append("\t,\"updatedBy\" : \"" + this.getUpdatedBy() + "\"");
        builder.append("\t,\"createdDate\" : \"" + this.getCreatedDate() + "\"");
        builder.append("\t,\"updatedDate\" : \"" + this.getUpdatedDate() + "\"");
        builder.append("\t,\"name\" : \"" + this.getName() + "\"");
        builder.append("\t,\"description\" : \"" + this.getDescription() + "\"");
        builder.append("\t,\"latitude\" : \"" + this.getLatitude() + "\"");
        builder.append("\t,\"longitude\" : \"" + this.getLongitude() + "\"");
        builder.append("\t,\"owner\" : \"" + this.getOwner() + "\"");
        builder.append("\t,\"nearestVillage\" : \"" + this.getNearestVillage() + "\"");
        builder.append("\t,\"ownerId\" : \"" + this.getOwnerId() + "\"");
        builder.append("\t,\"unit\" : \"" + this.getUnit() + "\"");
        builder.append("\t,\"size\" : \"" + this.getSize() + "\"");
        builder.append("\t,\"alliedFarms\" : \"" + this.getAlliedFarms() + "\"");
        builder.append("\t,\"cultivations\" : \"" + this.getCultivations() + "\"");
        builder.append("\t,\"posts\" : \"" + this.getPosts() + "\"");
        builder.append("\t,\"photos\" : \"" + this.getPhotos() + "\"");
        builder.append("}");
        return builder.toString();

    }

    /**
     * Compares the properties of this instance to the properties of the argument. This method will return
     * {@code false} as soon as it detects that the argument is {@code null} or not of the same type as
     * (or a sub-type of) this instance's type.
     *
     * <p/>For array, collection or map properties the comparison will be done one level deep, in other words:
     * the elements will be compared using the {@code equals()} operation.
     *
     * <p/>Note that two properties will be considered equal when both values are {@code null}.
     *
     * @param thatObject the object containing the properties to compare against this instance
     * @return this method will return {@code true} in case the argument has the same type as this class, or is a
     *      sub-type of this class and all properties as found on this class have equal values when queried on that
     *      argument instance; in all other cases this method will return {@code false}
     */
    public boolean equalProperties(final Object thatObject)
    {
        if (thatObject == null || !this.getClass().isAssignableFrom(thatObject.getClass()))
        {
            return false;
        }

        final FarmVO that = (FarmVO)thatObject;
        return
            equal(this.getId(), that.getId())
            && equal(this.getCreatedBy(), that.getCreatedBy())
            && equal(this.getUpdatedBy(), that.getUpdatedBy())
            && equal(this.getCreatedDate(), that.getCreatedDate())
            && equal(this.getUpdatedDate(), that.getUpdatedDate())
            && equal(this.getName(), that.getName())
            && equal(this.getDescription(), that.getDescription())
            && equal(this.getLatitude(), that.getLatitude())
            && equal(this.getLongitude(), that.getLongitude())
            && equal(this.getOwner(), that.getOwner())
            && equal(this.getNearestVillage(), that.getNearestVillage())
            && equal(this.getOwnerId(), that.getOwnerId())
            && equal(this.getUnit(), that.getUnit())
            && equal(this.getSize(), that.getSize())
            && equal(this.getAlliedFarms(), that.getAlliedFarms())
            && equal(this.getCultivations(), that.getCultivations())
            && equal(this.getPosts(), that.getPosts())
            && equal(this.getPhotos(), that.getPhotos())
        ;
    }

    /**
     * This is a convenient helper method which is able to detect whether or not two values are equal. Two values
     * are equal when they are both {@code null}, are arrays of the same length with equal elements or are
     * equal objects (this includes {@link Collection} and {@link java.util.Map} instances).
     *
     * <p/>Note that for array, collection or map instances the comparison runs one level deep.
     *
     * @param first the first object to compare, may be {@code null}
     * @param second the second object to compare, may be {@code null}
     * @return this method will return {@code true} in case both objects are equal as explained above;
     *      in all other cases this method will return {@code false}
     */
    protected static boolean equal(final Object first, final Object second)
    {
        final boolean equal;

        if (first == null)
        {
            equal = (second == null);
        }
        else if (first.getClass().isArray() && (second != null) && second.getClass().isArray())
        {
            equal = Arrays.equals((Object[])first, (Object[])second);
        }
        else // note that the following also covers Collection and java.util.Map
        {
            equal = first.equals(second);
        }

        return equal;
    }

    // FarmVO value-object java merge-point
}