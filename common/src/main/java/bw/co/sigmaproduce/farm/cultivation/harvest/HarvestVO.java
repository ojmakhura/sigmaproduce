// license-header java merge-point
//
/**
 * @author Generated by ValueObject.vsl in andromda-java-cartridge on 06/12/2024 19:31:22+0200 Do not modify by hand!
 *
 * TEMPLATE:     ValueObject.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::farm::cultivation::harvest::HarvestVO
 * STEREOTYPE:   ValueObject
 */
package bw.co.sigmaproduce.farm.cultivation.harvest;

import bw.co.sigmaproduce.farm.cultivation.CultivationVO;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * TODO: Model Documentation for HarvestVO
 */
public class HarvestVO
    implements Serializable, Comparable<HarvestVO>
{
    /** The serial version UID of this class. Needed for serialization. */
    private static final long serialVersionUID = 4633471035470533780L;

    // Class attributes
    /**
     * TODO: Model Documentation for HarvestVO.id
     */
    protected String id;
    /**
     * TODO: Model Documentation for HarvestVO.createdBy
     */
    protected String createdBy;
    /**
     * TODO: Model Documentation for
     * HarvestVO.harvestDate
     */
    protected LocalDate harvestDate;
    /**
     * TODO: Model Documentation for HarvestVO.quantity
     */
    protected Integer quantity = 0;
    /**
     * TODO: Model Documentation for HarvestVO.unit
     */
    protected HarvestUnit unit;
    /**
     * TODO: Model Documentation for HarvestVO.images
     */
    protected Collection<File> images;
    /**
     * TODO: Model Documentation for
     * HarvestVO.cultivation
     */
    protected CultivationVO cultivation;

    /** Default Constructor with no properties */
    public HarvestVO()
    {
        // Documented empty block - avoid compiler warning - no super constructor
    }

    /**
     * Constructor taking only required properties
     * @param createdByIn String TODO: Model Documentation for HarvestVO.createdBy
     * @param harvestDateIn LocalDate TODO: Model Documentation for HarvestVO.harvestDate
     * @param unitIn HarvestUnit TODO: Model Documentation for HarvestVO.unit
     * @param cultivationIn CultivationVO TODO: Model Documentation for HarvestVO.cultivation
     */
    public HarvestVO(final String createdByIn, final LocalDate harvestDateIn, final HarvestUnit unitIn, final CultivationVO cultivationIn)
    {
        this.createdBy = createdByIn;
        this.harvestDate = harvestDateIn;
        this.unit = unitIn;
        this.cultivation = cultivationIn;
    }

    /**
     * Constructor with all properties
     * @param idIn String
     * @param createdByIn String
     * @param harvestDateIn LocalDate
     * @param quantityIn Integer
     * @param unitIn HarvestUnit
     * @param imagesIn Collection<File>
     * @param cultivationIn CultivationVO
     */
    public HarvestVO(final String idIn, final String createdByIn, final LocalDate harvestDateIn, final Integer quantityIn, final HarvestUnit unitIn, final Collection<File> imagesIn, final CultivationVO cultivationIn)
    {
        this.id = idIn;
        this.createdBy = createdByIn;
        this.harvestDate = harvestDateIn;
        this.quantity = quantityIn;
        this.unit = unitIn;
        this.images = imagesIn;
        this.cultivation = cultivationIn;
    }

    /**
     * Copies constructor from other HarvestVO
     *
     * @param otherBean Cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public HarvestVO(final HarvestVO otherBean)
    {
        this.id = otherBean.getId();
        this.createdBy = otherBean.getCreatedBy();
        this.harvestDate = otherBean.getHarvestDate();
        this.quantity = otherBean.getQuantity();
        this.unit = otherBean.getUnit();
        this.images = otherBean.getImages();
        this.cultivation = otherBean.getCultivation();
    }

    /**
     * Copies all properties from the argument value object into this value object.
     * @param otherBean Cannot be <code>null</code>
     */
    public void copy(final HarvestVO otherBean)
    {
        if (null != otherBean)
        {
            this.setId(otherBean.getId());
            this.setCreatedBy(otherBean.getCreatedBy());
            this.setHarvestDate(otherBean.getHarvestDate());
            this.setQuantity(otherBean.getQuantity());
            this.setUnit(otherBean.getUnit());
            this.setImages(otherBean.getImages());
            this.setCultivation(otherBean.getCultivation());
        }
    }

    /**
     * TODO: Model Documentation for HarvestVO.id
     * Get the id Attribute
     * @return id String
     */
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for HarvestVO.id
     * @param value String
     */
    public void setId(final String value)
    {
        this.id = value;
    }

    /**
     * TODO: Model Documentation for HarvestVO.createdBy
     * Get the createdBy Attribute
     * @return createdBy String
     */
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for HarvestVO.createdBy
     * @param value String
     */
    public void setCreatedBy(final String value)
    {
        this.createdBy = value;
    }

    /**
     * TODO: Model Documentation for
     * HarvestVO.harvestDate
     * Get the harvestDate Attribute
     * @return harvestDate LocalDate
     */
    public LocalDate getHarvestDate()
    {
        return this.harvestDate;
    }

    /**
     * TODO: Model Documentation for
     * HarvestVO.harvestDate
     * @param value LocalDate
     */
    public void setHarvestDate(final LocalDate value)
    {
        this.harvestDate = value;
    }

    /**
     * TODO: Model Documentation for HarvestVO.quantity
     * Get the quantity Attribute
     * @return quantity Integer
     */
    public Integer getQuantity()
    {
        return this.quantity;
    }

    /**
     * TODO: Model Documentation for HarvestVO.quantity
     * @param value Integer
     */
    public void setQuantity(final Integer value)
    {
        this.quantity = value;
    }

    /**
     * TODO: Model Documentation for HarvestVO.unit
     * Get the unit Attribute
     * @return unit HarvestUnit
     */
    public HarvestUnit getUnit()
    {
        return this.unit;
    }

    /**
     * TODO: Model Documentation for HarvestVO.unit
     * @param value HarvestUnit
     */
    public void setUnit(final HarvestUnit value)
    {
        this.unit = value;
    }

    /**
     * TODO: Model Documentation for HarvestVO.images
     * Get the images Attribute
     * @return images Collection<File>
     */
    public Collection<File> getImages()
    {
        if (this.images == null)
        {
            this.images = new ArrayList<File>();
        }
        return this.images;
    }

    /**
     * TODO: Model Documentation for HarvestVO.images
     * @param value Collection<File>
     */
    public void setImages(final Collection<File> value)
    {
        this.images = value;
    }

    /**
     * TODO: Model Documentation for
     * HarvestVO.cultivation
     * Get the cultivation Attribute
     * @return cultivation CultivationVO
     */
    public CultivationVO getCultivation()
    {
        return this.cultivation;
    }

    /**
     * TODO: Model Documentation for
     * HarvestVO.cultivation
     * @param value CultivationVO
     */
    public void setCultivation(final CultivationVO value)
    {
        this.cultivation = value;
    }

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(final Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
        // Check if the same object instance
        if (object==this)
        {
            return true;
        }
        HarvestVO rhs = (HarvestVO) object;
        return new EqualsBuilder()
            .append(this.getId(), rhs.getId())
            .append(this.getCreatedBy(), rhs.getCreatedBy())
            .append(this.getHarvestDate(), rhs.getHarvestDate())
            .append(this.getQuantity(), rhs.getQuantity())
            .append(this.getUnit(), rhs.getUnit())
            .append(this.getImages(), rhs.getImages())
            .append(this.getCultivation(), rhs.getCultivation())
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(final HarvestVO object)
    {
        if (object==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (object==this)
        {
            return 0;
        }
        return new CompareToBuilder()
            .append(this.getId(), object.getId())
            .append(this.getCreatedBy(), object.getCreatedBy())
            .append(this.getHarvestDate(), object.getHarvestDate())
            .append(this.getQuantity(), object.getQuantity())
            .append(this.getUnit(), object.getUnit())
            .append(this.getImages(), object.getImages())
            .append(this.getCultivation(), object.getCultivation())
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885)
            .append(this.getId())
            .append(this.getCreatedBy())
            .append(this.getHarvestDate())
            .append(this.getQuantity())
            .append(this.getUnit())
            .append(this.getImages())
            .append(this.getCultivation())
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
    @Override
    public String toString()
    {

        StringBuilder builder = new StringBuilder();
        builder.append("{\n");
        builder.append("\t\"id\" : \"" + this.getId() + "\"");
        builder.append("\t,\"createdBy\" : \"" + this.getCreatedBy() + "\"");
        builder.append("\t,\"harvestDate\" : \"" + this.getHarvestDate() + "\"");
        builder.append("\t,\"quantity\" : \"" + this.getQuantity() + "\"");
        builder.append("\t,\"unit\" : \"" + this.getUnit() + "\"");
        builder.append("\t,\"images\" : \"" + this.getImages() + "\"");
        builder.append("\t,\"cultivation\" : \"" + this.getCultivation() + "\"");
        builder.append("}");
        return builder.toString();

    }

    /**
     * Compares the properties of this instance to the properties of the argument. This method will return
     * {@code false} as soon as it detects that the argument is {@code null} or not of the same type as
     * (or a sub-type of) this instance's type.
     *
     * <p/>For array, collection or map properties the comparison will be done one level deep, in other words:
     * the elements will be compared using the {@code equals()} operation.
     *
     * <p/>Note that two properties will be considered equal when both values are {@code null}.
     *
     * @param thatObject the object containing the properties to compare against this instance
     * @return this method will return {@code true} in case the argument has the same type as this class, or is a
     *      sub-type of this class and all properties as found on this class have equal values when queried on that
     *      argument instance; in all other cases this method will return {@code false}
     */
    public boolean equalProperties(final Object thatObject)
    {
        if (thatObject == null || !this.getClass().isAssignableFrom(thatObject.getClass()))
        {
            return false;
        }

        final HarvestVO that = (HarvestVO)thatObject;
        return
            equal(this.getId(), that.getId())
            && equal(this.getCreatedBy(), that.getCreatedBy())
            && equal(this.getHarvestDate(), that.getHarvestDate())
            && equal(this.getQuantity(), that.getQuantity())
            && equal(this.getUnit(), that.getUnit())
            && equal(this.getImages(), that.getImages())
            && equal(this.getCultivation(), that.getCultivation())
        ;
    }

    /**
     * This is a convenient helper method which is able to detect whether or not two values are equal. Two values
     * are equal when they are both {@code null}, are arrays of the same length with equal elements or are
     * equal objects (this includes {@link Collection} and {@link java.util.Map} instances).
     *
     * <p/>Note that for array, collection or map instances the comparison runs one level deep.
     *
     * @param first the first object to compare, may be {@code null}
     * @param second the second object to compare, may be {@code null}
     * @return this method will return {@code true} in case both objects are equal as explained above;
     *      in all other cases this method will return {@code false}
     */
    protected static boolean equal(final Object first, final Object second)
    {
        final boolean equal;

        if (first == null)
        {
            equal = (second == null);
        }
        else if (first.getClass().isArray() && (second != null) && second.getClass().isArray())
        {
            equal = Arrays.equals((Object[])first, (Object[])second);
        }
        else // note that the following also covers Collection and java.util.Map
        {
            equal = first.equals(second);
        }

        return equal;
    }

    // HarvestVO value-object java merge-point
}