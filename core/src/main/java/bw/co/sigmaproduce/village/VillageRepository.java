// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.village;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface VillageRepository extends 
        JpaRepository<Village, Long>,
        JpaSpecificationExecutor<Village> {

    // Generating pageable query method for code
    Page<Village> findByCode(String code, Pageable pageable);

    Page<Village> findByCodeStartingWithIgnoreCase(String code, Pageable pageable);
    
    Page<Village> findByCodeEndingWithIgnoreCase(String code, Pageable pageable);
    
    Page<Village> findByCodeContainingIgnoreCase(String code, Pageable pageable);
    
    Page<Village> findByCodeLikeIgnoreCase(String code, Pageable pageable);
    
    Page<Village> findByCodeNotLikeIgnoreCase(String code, Pageable pageable);
    
    Page<Village> findByCodeContaining(String code, Pageable pageable);
    
    // Search by a list of parameters
    List<Village> findByCodeNot(String code);
    Page<Village> findByCodeNot(String code, Pageable pageable);
    
    List<Village> findByCodeIn(List<String> codes);
    Page<Village> findByCodeIn(List<String> codes, Pageable pageable);
    
    List<Village> findByCodeNotIn(List<String> codes);
    Page<Village> findByCodeNotIn(List<String> codes, Pageable pageable);

    // Generating pageable query method for name
    Page<Village> findByName(String name, Pageable pageable);

    Page<Village> findByNameStartingWithIgnoreCase(String name, Pageable pageable);
    
    Page<Village> findByNameEndingWithIgnoreCase(String name, Pageable pageable);
    
    Page<Village> findByNameContainingIgnoreCase(String name, Pageable pageable);
    
    Page<Village> findByNameLikeIgnoreCase(String name, Pageable pageable);
    
    Page<Village> findByNameNotLikeIgnoreCase(String name, Pageable pageable);
    
    Page<Village> findByNameContaining(String name, Pageable pageable);
    
    // Search by a list of parameters
    List<Village> findByNameNot(String name);
    Page<Village> findByNameNot(String name, Pageable pageable);
    
    List<Village> findByNameIn(List<String> names);
    Page<Village> findByNameIn(List<String> names, Pageable pageable);
    
    List<Village> findByNameNotIn(List<String> names);
    Page<Village> findByNameNotIn(List<String> names, Pageable pageable);

    // Generating pageable query method for id
    Page<Village> findByIdNull(Pageable pageable);

    Page<Village> findByIdLessThanEqual(Long id, Pageable pageable);
    
    Page<Village> findByIdGreaterThanEqual(Long id, Pageable pageable);
    
    Page<Village> findByIdLessThan(Long id, Pageable pageable);
    
    Page<Village> findByIdGreaterThan(Long id, Pageable pageable);
    
    Page<Village> findByIdBetween(Long idStart, Long idEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<Village> findByIdNot(Long id);
    Page<Village> findByIdNot(Long id, Pageable pageable);
    
    List<Village> findByIdIn(List<Long> ids);
    Page<Village> findByIdIn(List<Long> ids, Pageable pageable);
    
    List<Village> findByIdNotIn(List<Long> ids);
    Page<Village> findByIdNotIn(List<Long> ids, Pageable pageable);

}