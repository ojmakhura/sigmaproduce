// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.crop.variety;

import java.io.File;
import java.time.LocalDateTime;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface CropVarietyRepository extends 
        JpaRepository<CropVariety, String>,
        JpaSpecificationExecutor<CropVariety> {

    // Generating pageable query method for createdBy
    Page<CropVariety> findByCreatedBy(String createdBy, Pageable pageable);

    Page<CropVariety> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropVariety> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropVariety> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropVariety> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropVariety> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropVariety> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByCreatedByNot(String createdBy);
    Page<CropVariety> findByCreatedByNot(String createdBy, Pageable pageable);
    
    List<CropVariety> findByCreatedByIn(List<String> createdBys);
    Page<CropVariety> findByCreatedByIn(List<String> createdBys, Pageable pageable);
    
    List<CropVariety> findByCreatedByNotIn(List<String> createdBys);
    Page<CropVariety> findByCreatedByNotIn(List<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<CropVariety> findByUpdatedByNull(Pageable pageable);

    Page<CropVariety> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropVariety> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropVariety> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropVariety> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropVariety> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropVariety> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByUpdatedByNot(String updatedBy);
    Page<CropVariety> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    List<CropVariety> findByUpdatedByIn(List<String> updatedBys);
    Page<CropVariety> findByUpdatedByIn(List<String> updatedBys, Pageable pageable);
    
    List<CropVariety> findByUpdatedByNotIn(List<String> updatedBys);
    Page<CropVariety> findByUpdatedByNotIn(List<String> updatedBys, Pageable pageable);

    // Generating pageable query method for id
    Page<CropVariety> findByIdNull(Pageable pageable);

    Page<CropVariety> findByIdStartingWithIgnoreCase(String id, Pageable pageable);
    
    Page<CropVariety> findByIdEndingWithIgnoreCase(String id, Pageable pageable);
    
    Page<CropVariety> findByIdContainingIgnoreCase(String id, Pageable pageable);
    
    Page<CropVariety> findByIdLikeIgnoreCase(String id, Pageable pageable);
    
    Page<CropVariety> findByIdNotLikeIgnoreCase(String id, Pageable pageable);
    
    Page<CropVariety> findByIdContaining(String id, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByIdNot(String id);
    Page<CropVariety> findByIdNot(String id, Pageable pageable);
    
    List<CropVariety> findByIdIn(List<String> ids);
    Page<CropVariety> findByIdIn(List<String> ids, Pageable pageable);
    
    List<CropVariety> findByIdNotIn(List<String> ids);
    Page<CropVariety> findByIdNotIn(List<String> ids, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<CropVariety> findByUpdatedDateNull(Pageable pageable);

    Page<CropVariety> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CropVariety> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CropVariety> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<CropVariety> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    List<CropVariety> findByUpdatedDateIn(List<LocalDateTime> updatedDates);
    Page<CropVariety> findByUpdatedDateIn(List<LocalDateTime> updatedDates, Pageable pageable);
    
    List<CropVariety> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates);
    Page<CropVariety> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<CropVariety> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<CropVariety> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<CropVariety> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<CropVariety> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByCreatedDateNot(LocalDateTime createdDate);
    Page<CropVariety> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    List<CropVariety> findByCreatedDateIn(List<LocalDateTime> createdDates);
    Page<CropVariety> findByCreatedDateIn(List<LocalDateTime> createdDates, Pageable pageable);
    
    List<CropVariety> findByCreatedDateNotIn(List<LocalDateTime> createdDates);
    Page<CropVariety> findByCreatedDateNotIn(List<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for code
    Page<CropVariety> findByCode(String code, Pageable pageable);

    Page<CropVariety> findByCodeStartingWithIgnoreCase(String code, Pageable pageable);
    
    Page<CropVariety> findByCodeEndingWithIgnoreCase(String code, Pageable pageable);
    
    Page<CropVariety> findByCodeContainingIgnoreCase(String code, Pageable pageable);
    
    Page<CropVariety> findByCodeLikeIgnoreCase(String code, Pageable pageable);
    
    Page<CropVariety> findByCodeNotLikeIgnoreCase(String code, Pageable pageable);
    
    Page<CropVariety> findByCodeContaining(String code, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByCodeNot(String code);
    Page<CropVariety> findByCodeNot(String code, Pageable pageable);
    
    List<CropVariety> findByCodeIn(List<String> codes);
    Page<CropVariety> findByCodeIn(List<String> codes, Pageable pageable);
    
    List<CropVariety> findByCodeNotIn(List<String> codes);
    Page<CropVariety> findByCodeNotIn(List<String> codes, Pageable pageable);

    // Generating pageable query method for name
    Page<CropVariety> findByName(String name, Pageable pageable);

    Page<CropVariety> findByNameStartingWithIgnoreCase(String name, Pageable pageable);
    
    Page<CropVariety> findByNameEndingWithIgnoreCase(String name, Pageable pageable);
    
    Page<CropVariety> findByNameContainingIgnoreCase(String name, Pageable pageable);
    
    Page<CropVariety> findByNameLikeIgnoreCase(String name, Pageable pageable);
    
    Page<CropVariety> findByNameNotLikeIgnoreCase(String name, Pageable pageable);
    
    Page<CropVariety> findByNameContaining(String name, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByNameNot(String name);
    Page<CropVariety> findByNameNot(String name, Pageable pageable);
    
    List<CropVariety> findByNameIn(List<String> names);
    Page<CropVariety> findByNameIn(List<String> names, Pageable pageable);
    
    List<CropVariety> findByNameNotIn(List<String> names);
    Page<CropVariety> findByNameNotIn(List<String> names, Pageable pageable);

    // Generating pageable query method for description
    Page<CropVariety> findByDescriptionNull(Pageable pageable);

    Page<CropVariety> findByDescriptionStartingWithIgnoreCase(String description, Pageable pageable);
    
    Page<CropVariety> findByDescriptionEndingWithIgnoreCase(String description, Pageable pageable);
    
    Page<CropVariety> findByDescriptionContainingIgnoreCase(String description, Pageable pageable);
    
    Page<CropVariety> findByDescriptionLikeIgnoreCase(String description, Pageable pageable);
    
    Page<CropVariety> findByDescriptionNotLikeIgnoreCase(String description, Pageable pageable);
    
    Page<CropVariety> findByDescriptionContaining(String description, Pageable pageable);
    
    // Search by a list of parameters
    List<CropVariety> findByDescriptionNot(String description);
    Page<CropVariety> findByDescriptionNot(String description, Pageable pageable);
    
    List<CropVariety> findByDescriptionIn(List<String> descriptions);
    Page<CropVariety> findByDescriptionIn(List<String> descriptions, Pageable pageable);
    
    List<CropVariety> findByDescriptionNotIn(List<String> descriptions);
    Page<CropVariety> findByDescriptionNotIn(List<String> descriptions, Pageable pageable);

    // Search by a list of parameters
    List<CropVariety> findByImagesNot(File images);
    Page<CropVariety> findByImagesNot(File images, Pageable pageable);
    
    List<CropVariety> findByImagesIn(List<File> imagess);
    Page<CropVariety> findByImagesIn(List<File> imagess, Pageable pageable);
    
    List<CropVariety> findByImagesNotIn(List<File> imagess);
    Page<CropVariety> findByImagesNotIn(List<File> imagess, Pageable pageable);

}