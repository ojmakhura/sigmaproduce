// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.crop.type;

import java.io.File;
import java.time.LocalDateTime;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface CropTypeRepository extends 
        JpaRepository<CropType, String>,
        JpaSpecificationExecutor<CropType> {

    // Generating pageable query method for id
    Page<CropType> findByIdNull(Pageable pageable);

    Page<CropType> findByIdStartingWithIgnoreCase(String id, Pageable pageable);
    
    Page<CropType> findByIdEndingWithIgnoreCase(String id, Pageable pageable);
    
    Page<CropType> findByIdContainingIgnoreCase(String id, Pageable pageable);
    
    Page<CropType> findByIdLikeIgnoreCase(String id, Pageable pageable);
    
    Page<CropType> findByIdNotLikeIgnoreCase(String id, Pageable pageable);
    
    Page<CropType> findByIdContaining(String id, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByIdNot(String id);
    Page<CropType> findByIdNot(String id, Pageable pageable);
    
    List<CropType> findByIdIn(List<String> ids);
    Page<CropType> findByIdIn(List<String> ids, Pageable pageable);
    
    List<CropType> findByIdNotIn(List<String> ids);
    Page<CropType> findByIdNotIn(List<String> ids, Pageable pageable);

    // Generating pageable query method for createdBy
    Page<CropType> findByCreatedBy(String createdBy, Pageable pageable);

    Page<CropType> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropType> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropType> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropType> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropType> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CropType> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByCreatedByNot(String createdBy);
    Page<CropType> findByCreatedByNot(String createdBy, Pageable pageable);
    
    List<CropType> findByCreatedByIn(List<String> createdBys);
    Page<CropType> findByCreatedByIn(List<String> createdBys, Pageable pageable);
    
    List<CropType> findByCreatedByNotIn(List<String> createdBys);
    Page<CropType> findByCreatedByNotIn(List<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<CropType> findByUpdatedByNull(Pageable pageable);

    Page<CropType> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropType> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropType> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropType> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropType> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CropType> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByUpdatedByNot(String updatedBy);
    Page<CropType> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    List<CropType> findByUpdatedByIn(List<String> updatedBys);
    Page<CropType> findByUpdatedByIn(List<String> updatedBys, Pageable pageable);
    
    List<CropType> findByUpdatedByNotIn(List<String> updatedBys);
    Page<CropType> findByUpdatedByNotIn(List<String> updatedBys, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<CropType> findByUpdatedDateNull(Pageable pageable);

    Page<CropType> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CropType> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CropType> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<CropType> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    List<CropType> findByUpdatedDateIn(List<LocalDateTime> updatedDates);
    Page<CropType> findByUpdatedDateIn(List<LocalDateTime> updatedDates, Pageable pageable);
    
    List<CropType> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates);
    Page<CropType> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<CropType> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<CropType> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<CropType> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<CropType> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByCreatedDateNot(LocalDateTime createdDate);
    Page<CropType> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    List<CropType> findByCreatedDateIn(List<LocalDateTime> createdDates);
    Page<CropType> findByCreatedDateIn(List<LocalDateTime> createdDates, Pageable pageable);
    
    List<CropType> findByCreatedDateNotIn(List<LocalDateTime> createdDates);
    Page<CropType> findByCreatedDateNotIn(List<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for code
    Page<CropType> findByCode(String code, Pageable pageable);

    Page<CropType> findByCodeStartingWithIgnoreCase(String code, Pageable pageable);
    
    Page<CropType> findByCodeEndingWithIgnoreCase(String code, Pageable pageable);
    
    Page<CropType> findByCodeContainingIgnoreCase(String code, Pageable pageable);
    
    Page<CropType> findByCodeLikeIgnoreCase(String code, Pageable pageable);
    
    Page<CropType> findByCodeNotLikeIgnoreCase(String code, Pageable pageable);
    
    Page<CropType> findByCodeContaining(String code, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByCodeNot(String code);
    Page<CropType> findByCodeNot(String code, Pageable pageable);
    
    List<CropType> findByCodeIn(List<String> codes);
    Page<CropType> findByCodeIn(List<String> codes, Pageable pageable);
    
    List<CropType> findByCodeNotIn(List<String> codes);
    Page<CropType> findByCodeNotIn(List<String> codes, Pageable pageable);

    // Search by a list of parameters
    List<CropType> findByImagesNot(File images);
    Page<CropType> findByImagesNot(File images, Pageable pageable);
    
    List<CropType> findByImagesIn(List<File> imagess);
    Page<CropType> findByImagesIn(List<File> imagess, Pageable pageable);
    
    List<CropType> findByImagesNotIn(List<File> imagess);
    Page<CropType> findByImagesNotIn(List<File> imagess, Pageable pageable);

    // Generating pageable query method for description
    Page<CropType> findByDescriptionNull(Pageable pageable);

    Page<CropType> findByDescriptionStartingWithIgnoreCase(String description, Pageable pageable);
    
    Page<CropType> findByDescriptionEndingWithIgnoreCase(String description, Pageable pageable);
    
    Page<CropType> findByDescriptionContainingIgnoreCase(String description, Pageable pageable);
    
    Page<CropType> findByDescriptionLikeIgnoreCase(String description, Pageable pageable);
    
    Page<CropType> findByDescriptionNotLikeIgnoreCase(String description, Pageable pageable);
    
    Page<CropType> findByDescriptionContaining(String description, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByDescriptionNot(String description);
    Page<CropType> findByDescriptionNot(String description, Pageable pageable);
    
    List<CropType> findByDescriptionIn(List<String> descriptions);
    Page<CropType> findByDescriptionIn(List<String> descriptions, Pageable pageable);
    
    List<CropType> findByDescriptionNotIn(List<String> descriptions);
    Page<CropType> findByDescriptionNotIn(List<String> descriptions, Pageable pageable);

    // Generating pageable query method for name
    Page<CropType> findByName(String name, Pageable pageable);

    Page<CropType> findByNameStartingWithIgnoreCase(String name, Pageable pageable);
    
    Page<CropType> findByNameEndingWithIgnoreCase(String name, Pageable pageable);
    
    Page<CropType> findByNameContainingIgnoreCase(String name, Pageable pageable);
    
    Page<CropType> findByNameLikeIgnoreCase(String name, Pageable pageable);
    
    Page<CropType> findByNameNotLikeIgnoreCase(String name, Pageable pageable);
    
    Page<CropType> findByNameContaining(String name, Pageable pageable);
    
    // Search by a list of parameters
    List<CropType> findByNameNot(String name);
    Page<CropType> findByNameNot(String name, Pageable pageable);
    
    List<CropType> findByNameIn(List<String> names);
    Page<CropType> findByNameIn(List<String> names, Pageable pageable);
    
    List<CropType> findByNameNotIn(List<String> names);
    Page<CropType> findByNameNotIn(List<String> names, Pageable pageable);

}