// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 06/12/2024 19:31:12+0200.
//
package bw.co.sigmaproduce.crop.variety;

import bw.co.sigmaproduce.crop.Crop;
import bw.co.sigmaproduce.farm.cultivation.Cultivation;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashSet;

/**
 * TODO: Model Documentation for CropVariety
 */
@Entity
@Table(name = "CROP_VARIETY")
// Uncomment to enable caching for CropVariety
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQuery(name = "CropVariety.findAll", query = "SELECT c FROM CropVariety AS c")
// HibernateEntity.vsl annotations merge-point
public class CropVariety
    implements Serializable, Comparable<CropVariety>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1681713414954955131L;

    // Generate 9 attributes
    private String createdBy;

    /**
     * TODO: Model Documentation for CropVariety.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = false, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for CropVariety.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private String updatedBy;

    /**
     * TODO: Model Documentation for CropVariety.updatedBy
     * @return this.updatedBy String
     */
    @Column(name = "UPDATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for CropVariety.updatedBy
     * @param updatedByIn String
     */
    public void setUpdatedBy(String updatedByIn)
    {
        this.updatedBy = updatedByIn;
    }

    private String id;

    /**
     * TODO: Model Documentation for CropVariety.id
     * @return this.id String
     */
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for CropVariety.id
     * @param idIn String
     */
    public void setId(String idIn)
    {
        this.id = idIn;
    }

    private LocalDateTime updatedDate;

    /**
     * TODO: Model Documentation for CropVariety.updatedDate
     * @return this.updatedDate LocalDateTime
     */
    @Column(name = "UPDATED_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for CropVariety.updatedDate
     * @param updatedDateIn LocalDateTime
     */
    public void setUpdatedDate(LocalDateTime updatedDateIn)
    {
        this.updatedDate = updatedDateIn;
    }

    private LocalDateTime createdDate;

    /**
     * TODO: Model Documentation for CropVariety.createdDate
     * @return this.createdDate LocalDateTime
     */
    @Column(name = "CREATED_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for CropVariety.createdDate
     * @param createdDateIn LocalDateTime
     */
    public void setCreatedDate(LocalDateTime createdDateIn)
    {
        this.createdDate = createdDateIn;
    }

    private String code;

    /**
     * TODO: Model Documentation for CropVariety.code
     * @return this.code String
     */
    @Column(name = "CODE", unique = true, nullable = false, insertable = true, updatable = true)
    public String getCode()
    {
        return this.code;
    }

    /**
     * TODO: Model Documentation for CropVariety.code
     * @param codeIn String
     */
    public void setCode(String codeIn)
    {
        this.code = codeIn;
    }

    private String name;

    /**
     * TODO: Model Documentation for CropVariety.name
     * @return this.name String
     */
    @Column(name = "NAME", unique = true, nullable = false, insertable = true, updatable = true)
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for CropVariety.name
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private String description;

    /**
     * TODO: Model Documentation for CropVariety.description
     * @return this.description String
     */
    @Column(name = "DESCRIPTION", unique = false, nullable = true, insertable = true, updatable = true)
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for CropVariety.description
     * @param descriptionIn String
     */
    public void setDescription(String descriptionIn)
    {
        this.description = descriptionIn;
    }

    private Collection<File> images;

    /**
     * TODO: Model Documentation for CropVariety.images
     * @return this.images Collection<File>
     */
    @ElementCollection
    public Collection<File> getImages()
    {
        return this.images;
    }

    /**
     * TODO: Model Documentation for CropVariety.images
     * @param imagesIn Collection<File>
     */
    public void setImages(Collection<File> imagesIn)
    {
        this.images = imagesIn;
    }

    // Generate 2 associations
    private Collection<Cultivation> cultivations = new HashSet<Cultivation>();

    /**
     * TODO: Model Documentation for Cultivation
     * @return this.cultivations Collection<Cultivation>
     */
    @OneToMany( mappedBy = "cropVariety") 
    public Collection<Cultivation> getCultivations()
    {
        return this.cultivations;
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param cultivationsIn Collection<Cultivation>
     */
    public void setCultivations(Collection<Cultivation> cultivationsIn)
    {
        this.cultivations = cultivationsIn;
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param elementToAdd Cultivation
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addCultivations(Cultivation elementToAdd)
    {
        return this.cultivations.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param elementToRemove Cultivation
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeCultivations(Cultivation elementToRemove)
    {
        return this.cultivations.remove(elementToRemove);
    }

    private Crop crop;

    /**
     * TODO: Model Documentation for Crop
     * @return this.crop Crop
     */
    @ManyToOne(optional = false,  fetch = FetchType.LAZY)
    @JoinColumn(name = "CROP_FK")
    public Crop getCrop()
    {
        return this.crop;
    }

    /**
     * TODO: Model Documentation for Crop
     * @param cropIn Crop
     */
    public void setCrop(Crop cropIn)
    {
        this.crop = cropIn;
    }

    /**
     * Returns <code>true</code> if the argument is an CropVariety instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof CropVariety))
        {
            return false;
        }
        final CropVariety that = (CropVariety)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link CropVariety}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link CropVariety}.
         * @return new CropVariety()
         */
        public static CropVariety newInstance()
        {
            return new CropVariety();
        }

        /**
         * Constructs a new instance of {@link CropVariety}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdBy String
         * @param createdDate LocalDateTime
         * @param code String
         * @param name String
         * @param crop Crop
         * @return newInstance
         */
        public static CropVariety newInstance(String createdBy, LocalDateTime createdDate, String code, String name, Crop crop)
        {
            final CropVariety entity = new CropVariety();
            entity.setCreatedBy(createdBy);
            entity.setCreatedDate(createdDate);
            entity.setCode(code);
            entity.setName(name);
            entity.setCrop(crop);
            return entity;
        }

        /**
         * Constructs a new instance of {@link CropVariety}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param createdBy String
         * @param updatedBy String
         * @param updatedDate LocalDateTime
         * @param createdDate LocalDateTime
         * @param code String
         * @param name String
         * @param description String
         * @param images Collection<File>
         * @param cultivations Collection<Cultivation>
         * @param crop Crop
         * @return newInstance CropVariety
         */
        public static CropVariety newInstance(String createdBy, String updatedBy, LocalDateTime updatedDate, LocalDateTime createdDate, String code, String name, String description, Collection<File> images, Collection<Cultivation> cultivations, Crop crop)
        {
            final CropVariety entity = new CropVariety();
            entity.setCreatedBy(createdBy);
            entity.setUpdatedBy(updatedBy);
            entity.setUpdatedDate(updatedDate);
            entity.setCreatedDate(createdDate);
            entity.setCode(code);
            entity.setName(name);
            entity.setDescription(description);
            entity.setImages(images);
            entity.setCultivations(cultivations);
            entity.setCrop(crop);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(CropVariety other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getUpdatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedBy().compareTo(other.getUpdatedBy()));
            }
            if (this.getUpdatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedDate().compareTo(other.getUpdatedDate()));
            }
            if (this.getCreatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedDate().compareTo(other.getCreatedDate()));
            }
            if (this.getCode() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCode().compareTo(other.getCode()));
            }
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(other.getName()));
            }
            if (this.getDescription() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDescription().compareTo(other.getDescription()));
            }
            if (this.getImages() != null)
            {
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.getImages().size()-other.getImages().size()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("CropVariety(");
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" updatedBy=").append(getUpdatedBy());
        sb.append(" id=").append(getId());
        sb.append(" updatedDate=").append(getUpdatedDate());
        sb.append(" createdDate=").append(getCreatedDate());
        sb.append(" code=").append(getCode());
        sb.append(" name=").append(getName());
        sb.append(" description=").append(getDescription());
        sb.append(" images=").append(getImages());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}