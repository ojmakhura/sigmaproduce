// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::backend::bw.co.sigmaproduce::crop::issue::CropIssueService
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.crop.issue;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;

/**
 * <p>
 * Spring Service base class for <code>CropIssueService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see CropIssueService
 */
public abstract class CropIssueServiceBase
    implements CropIssueService
{
    protected Logger logger = LoggerFactory.getLogger(CropIssueService.class);
    protected final CropIssueDao cropIssueDao;
    protected final CropIssueRepository cropIssueRepository;
    protected final MessageSource messageSource;

    public CropIssueServiceBase(
        CropIssueDao cropIssueDao,
        CropIssueRepository cropIssueRepository,
        MessageSource messageSource
    ) {
        this.cropIssueDao = cropIssueDao;
        this.cropIssueRepository = cropIssueRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>cropIssue</code>'s DAO.
     * @return cropIssueDao
     */
    protected CropIssueDao getCropIssueDao()
    {
        return this.cropIssueDao;
    }

    /**
     * Gets the reference to <code>cropIssue</code>'s repository.
     * @return cropIssueRepository
     */
    public CropIssueRepository getCropIssueRepository() {
        return cropIssueRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropIssueVO findById(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.findById(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.findById(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(String)}
     * @param id String TODO: Model Documentation for CropIssueService.findById(id)
     * @return CropIssueVO
     * @throws Exception
     */
    protected abstract CropIssueVO handleFindById(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CropIssueVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<CropIssueVO>
     * @throws Exception
     */
    protected abstract Collection<CropIssueVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.remove(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.remove(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(String)}
     * @param id String TODO: Model Documentation for CropIssueService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public CropIssueVO save(final CropIssueVO cropIssue)
    {
        if (cropIssue == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.save(CropIssueVO cropIssue) - 'cropIssue' can not be null");
        }
        if (cropIssue.getIssueType() == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.save(CropIssueVO cropIssue) - 'cropIssue.issueType' can not be null");
        }
        if (cropIssue.getName() == null || cropIssue.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.save(CropIssueVO cropIssue) - 'cropIssue.name' can not be null or empty");
        }
        if (cropIssue.getScientificName() == null || cropIssue.getScientificName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.save(CropIssueVO cropIssue) - 'cropIssue.scientificName' can not be null or empty");
        }
        try
        {
            return this.handleSave(cropIssue);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.save(CropIssueVO cropIssue)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(CropIssueVO)}
     * @param cropIssue CropIssueVO TODO: Model Documentation for CropIssueService.save(cropIssue)
     * @return CropIssueVO
     * @throws Exception
     */
    protected abstract CropIssueVO handleSave(CropIssueVO cropIssue)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CropIssueVO> search(final String criteria)
    {
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.search(String criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(String)}
     * @param criteria String TODO: Model Documentation for CropIssueService.search(criteria)
     * @return Collection<CropIssueVO>
     * @throws Exception
     */
    protected abstract Collection<CropIssueVO> handleSearch(String criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CropIssueVO> searchByType(final CropIssueType type)
    {
        try
        {
            return this.handleSearchByType(type);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.searchByType(CropIssueType type)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #searchByType(CropIssueType)}
     * @param type CropIssueType TODO: Model Documentation for CropIssueService.searchByType(type)
     * @return Collection<CropIssueVO>
     * @throws Exception
     */
    protected abstract Collection<CropIssueVO> handleSearchByType(CropIssueType type)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<CropIssueVO> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for CropIssueService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for CropIssueService.getAll(pageSize)
     * @return Page<CropIssueVO>
     * @throws Exception
     */
    protected abstract Page<CropIssueVO> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<CropIssueVO> search(final String criteria, final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleSearch(criteria, pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.search(String criteria, Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(String, Integer, Integer)}
     * @param criteria String TODO: Model Documentation for CropIssueService.search(criteria)
     * @param pageNumber Integer TODO: Model Documentation for CropIssueService.search(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for CropIssueService.search(pageSize)
     * @return Page<CropIssueVO>
     * @throws Exception
     */
    protected abstract Page<CropIssueVO> handleSearch(String criteria, Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<CropIssueVO> searchByTypeAndCrop(final CropIssueType type, final String cropId, final Integer pageNumber, final Integer pageSize)
    {
        if (cropId == null || cropId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.searchByTypeAndCrop(CropIssueType type, String cropId, Integer pageNumber, Integer pageSize) - 'cropId' can not be null or empty");
        }
        try
        {
            return this.handleSearchByTypeAndCrop(type, cropId, pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.searchByTypeAndCrop(CropIssueType type, String cropId, Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #searchByTypeAndCrop(CropIssueType, String, Integer, Integer)}
     * @param type CropIssueType TODO: Model Documentation for
CropIssueService.searchByTypeAndCrop(type)
     * @param cropId String TODO: Model Documentation for
CropIssueService.searchByTypeAndCrop(cropId)
     * @param pageNumber Integer TODO: Model Documentation for
CropIssueService.searchByTypeAndCrop(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
CropIssueService.searchByTypeAndCrop(pageSize)
     * @return Page<CropIssueVO>
     * @throws Exception
     */
    protected abstract Page<CropIssueVO> handleSearchByTypeAndCrop(CropIssueType type, String cropId, Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CropIssueVO> searchByTypeAndCrop(final CropIssueType type, final String cropId)
    {
        if (cropId == null || cropId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.issue.CropIssueService.searchByTypeAndCrop(CropIssueType type, String cropId) - 'cropId' can not be null or empty");
        }
        try
        {
            return this.handleSearchByTypeAndCrop(type, cropId);
        }
        catch (Throwable th)
        {
            throw new CropIssueServiceException(
                "Error performing 'CropIssueService.searchByTypeAndCrop(CropIssueType type, String cropId)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #searchByTypeAndCrop(CropIssueType, String)}
     * @param type CropIssueType TODO: Model Documentation for
CropIssueService.searchByTypeAndCrop(type)
     * @param cropId String TODO: Model Documentation for
CropIssueService.searchByTypeAndCrop(cropId)
     * @return Collection<CropIssueVO>
     * @throws Exception
     */
    protected abstract Collection<CropIssueVO> handleSearchByTypeAndCrop(CropIssueType type, String cropId)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}