// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.crop;

import bw.co.sigmaproduce.crop.issue.CropIssueRepository;
import bw.co.sigmaproduce.crop.type.CropTypeRepository;
import bw.co.sigmaproduce.crop.variety.CropVarietyRepository;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Repository;

/**
 * @see Crop
 */
@Repository("cropDao")
public class CropDaoImpl
    extends CropDaoBase
{
    
    public CropDaoImpl(
        CropVarietyRepository cropVarietyRepository,
        CropTypeRepository cropTypeRepository,
        CropIssueRepository cropIssueRepository,
        CropRepository cropRepository
    ) {

        super(
            cropVarietyRepository,
            cropTypeRepository,
            cropIssueRepository,
            cropRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Crop> handleFindByCriteria(String criteria)
    {
        // TODO implement public Collection<Crop> handleFindByCriteria(String criteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Page<Crop> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
    {
        // TODO implement public Page<Crop> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVO(
        Crop source,
        CropVO target)
    {
        // TODO verify behavior of toCropVO
        super.toCropVO(source, target);
        // WARNING! No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.maturesIn (can't convert source.getMaturesIn():bw.co.sigmaproduce.TimePeriod to Integer
        // WARNING! No conversion for target.type (can't convert source.getType():bw.co.sigmaproduce.crop.type.CropType to bw.co.sigmaproduce.crop.type.CropTypeListVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVO toCropVO(final Crop entity)
    {
        // TODO verify behavior of toCropVO
        return super.toCropVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Crop loadCropFromCropVO(CropVO cropVO)
    {
        // TODO implement loadCropFromCropVO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.crop.loadCropFromCropVO(CropVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cropVO.getId() == null)
        {
            return  Crop.Factory.newInstance();
        }
        else
        {
            return this.load(cropVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Crop cropVOToEntity(CropVO cropVO)
    {
        // TODO verify behavior of cropVOToEntity
        Crop entity = this.loadCropFromCropVO(cropVO);
        this.cropVOToEntity(cropVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVOToEntity(
        CropVO source,
        Crop target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVOToEntity
        super.cropVOToEntity(source, target, copyIfNull);
        // No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // No conversion for target.maturesIn (can't convert source.getMaturesIn():Integer to bw.co.sigmaproduce.TimePeriod
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropListVO(
        Crop source,
        CropListVO target)
    {
        // TODO verify behavior of toCropListVO
        super.toCropListVO(source, target);
        // WARNING! No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.type (can't convert source.getType():bw.co.sigmaproduce.crop.type.CropType to String
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropListVO toCropListVO(final Crop entity)
    {
        // TODO verify behavior of toCropListVO
        return super.toCropListVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Crop loadCropFromCropListVO(CropListVO cropListVO)
    {
        // TODO implement loadCropFromCropListVO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.crop.loadCropFromCropListVO(CropListVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cropListVO.getId() == null)
        {
            return  Crop.Factory.newInstance();
        }
        else
        {
            return this.load(cropListVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Crop cropListVOToEntity(CropListVO cropListVO)
    {
        // TODO verify behavior of cropListVOToEntity
        Crop entity = this.loadCropFromCropListVO(cropListVO);
        this.cropListVOToEntity(cropListVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropListVOToEntity(
        CropListVO source,
        Crop target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropListVOToEntity
        super.cropListVOToEntity(source, target, copyIfNull);
        // No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
    }
}