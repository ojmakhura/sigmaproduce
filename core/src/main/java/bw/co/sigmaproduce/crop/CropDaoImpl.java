// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.crop;

import bw.co.sigmaproduce.crop.issue.CropIssueRepository;
import bw.co.sigmaproduce.crop.type.CropType;
import bw.co.sigmaproduce.crop.type.CropTypeListDTO;
import bw.co.sigmaproduce.crop.type.CropTypeRepository;
import bw.co.sigmaproduce.crop.variety.CropVarietyRepository;
import bw.co.sigmaproduce.document.DocumentRepository;
import bw.co.sigmaproduce.crop.variety.CropVarietyDTO;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see Crop
 */
@Repository("cropDao")
@Transactional
public class CropDaoImpl
    extends CropDaoBase
{
    

    public CropDaoImpl(CropVarietyRepository cropVarietyRepository, CropTypeRepository cropTypeRepository,
            CropIssueRepository cropIssueRepository, DocumentRepository documentRepository,
            CropRepository cropRepository) {
        super(cropVarietyRepository, cropTypeRepository, cropIssueRepository, documentRepository, cropRepository);
        //TODO Auto-generated constructor stub
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Crop> handleFindByCriteria(String criteria)
    {
        Specification<Crop> spec = null;

        if (StringUtils.isNotBlank(criteria)) {

            spec = (root, query, cb) -> cb.or(
                    cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                    cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%"));

        }

        return this.cropRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Page<Crop> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
    {
        Specification<Crop> spec = null;

        if (StringUtils.isNotBlank(criteria)) {

            spec = (root, query, cb) -> cb.or(
                    cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                    cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%"));

        }

        return this.cropRepository.findAll(spec, PageRequest.of(pageNumber, pageSize));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropDTO(
        Crop source,
        CropDTO target)
    {
        // TODO verify behavior of toCropDTO
        super.toCropDTO(source, target);
        // WARNING! No conversion for target.type (can't conver
        
        if(source.getType() != null) {

            CropTypeListDTO type = new CropTypeListDTO();
            type.setId(source.getType().getId());
            type.setName(source.getType().getName());
            target.setType(type);

        }

        if (CollectionUtils.isNotEmpty(source.getCropVarieties())) {

            Collection<CropVarietyDTO> varieties = new ArrayList<>();

            for (bw.co.sigmaproduce.crop.variety.CropVariety item : source.getCropVarieties()) {
                varieties.add(this.cropVarietyDao.toCropVarietyDTO(item));
            }

            target.setVarieties(varieties);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropDTO toCropDTO(final Crop entity)
    {
        // TODO verify behavior of toCropDTO
        return super.toCropDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Crop loadCropFromCropDTO(CropDTO cropDTO)
    {

        if (cropDTO.getId() == null)
        {
            return  Crop.Factory.newInstance();
        }
        else
        {
            return this.load(cropDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Crop cropDTOToEntity(CropDTO cropDTO)
    {
        // TODO verify behavior of cropDTOToEntity
        Crop entity = this.loadCropFromCropDTO(cropDTO);
        entity.getType();
        this.cropDTOToEntity(cropDTO, entity, true);

        if(cropDTO.getType() != null && StringUtils.isNotBlank(cropDTO.getType().getId())) {

            CropType type = this.cropTypeRepository.findById(cropDTO.getType().getId()).orElse(null);
            entity.setType(type);

        }

        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropDTOToEntity(
        CropDTO source,
        Crop target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropDTOToEntity
        super.cropDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void toCropListDTO(
        Crop source,
        CropListDTO target)
    {
        // TODO verify behavior of toCropListDTO
        super.toCropListDTO(source, target);
        // WARNING! No conversion for target.type (can't convert source.getType():bw.co.sigmaproduce.crop.type.CropType to String
        if(source.getType() != null)
        {
            // source.getType().getName();
            CropType type = cropTypeRepository.findById(source.getType().getId()).orElse(null);
            target.setTypeId(type.getId());
            // type.getName();
            System.out.println(type.getName());

            target.setType(type.getName());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropListDTO toCropListDTO(final Crop entity)
    {
        // TODO verify behavior of toCropListDTO
        return super.toCropListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Crop loadCropFromCropListDTO(CropListDTO cropListDTO)
    {
        if (cropListDTO.getId() == null)
        {
            return  Crop.Factory.newInstance();
        }
        else
        {
            return this.load(cropListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Crop cropListDTOToEntity(CropListDTO cropListDTO)
    {
        // TODO verify behavior of cropListDTOToEntity
        Crop entity = this.loadCropFromCropListDTO(cropListDTO);
        this.cropListDTOToEntity(cropListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropListDTOToEntity(
        CropListDTO source,
        Crop target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropListDTOToEntity
        super.cropListDTOToEntity(source, target, copyIfNull);

        if(StringUtils.isNotBlank(source.getTypeId()))
        {
            CropType type = this.cropTypeRepository.findById(source.getTypeId()).orElse(null);
            target.setType(type);
        }
    }
}