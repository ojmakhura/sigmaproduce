// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4or5=true hibernateVersion=6.1.6.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.crop.variety;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>bw.co.sigmaproduce.crop.variety.CropVariety</code>.
 * </p>
 *
 * @see bw.co.sigmaproduce.crop.variety.CropVariety
 */
public abstract class CropVarietyDaoBase
    implements bw.co.sigmaproduce.crop.variety.CropVarietyDao
{

    protected final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(CropVarietyDaoBase.class);

    protected final bw.co.sigmaproduce.crop.variety.CropVarietyRepository cropVarietyRepository;

    protected bw.co.sigmaproduce.crop.CropDao cropDao;
    protected final bw.co.sigmaproduce.crop.CropRepository cropRepository;

    protected bw.co.sigmaproduce.farm.cultivation.CultivationDao cultivationDao;
    protected final bw.co.sigmaproduce.farm.cultivation.CultivationRepository cultivationRepository;

    public CropVarietyDaoBase(
        bw.co.sigmaproduce.crop.CropRepository cropRepository,
        bw.co.sigmaproduce.farm.cultivation.CultivationRepository cultivationRepository,
        bw.co.sigmaproduce.crop.variety.CropVarietyRepository cropVarietyRepository
    ) {
        this.cropVarietyRepository = cropVarietyRepository;
        this.cropRepository = cropRepository;
        this.cultivationRepository = cultivationRepository;
    }

    /**
     * Sets the reference to <code>cropDao</code>.
     * @param cropDaoIn
     */
    @org.springframework.beans.factory.annotation.Autowired
    public void setCropDao(@org.springframework.context.annotation.Lazy bw.co.sigmaproduce.crop.CropDao cropDaoIn)
    {
        this.cropDao = cropDaoIn;
    }
    
    /**
     * Gets the reference to <code>cropDao</code>.
     * @return cropDao
     */
    protected bw.co.sigmaproduce.crop.CropDao getCropDao()
    {
        return this.cropDao;
    }

    /**
     * Gets the reference to <code>cropRepository</code>.
     * @return cropRepository
     */
    protected bw.co.sigmaproduce.crop.CropRepository getCropRepository()
    {
        return this.cropRepository;
    }

    /**
     * Sets the reference to <code>cultivationDao</code>.
     * @param cultivationDaoIn
     */
    @org.springframework.beans.factory.annotation.Autowired
    public void setCultivationDao(@org.springframework.context.annotation.Lazy bw.co.sigmaproduce.farm.cultivation.CultivationDao cultivationDaoIn)
    {
        this.cultivationDao = cultivationDaoIn;
    }
    
    /**
     * Gets the reference to <code>cultivationDao</code>.
     * @return cultivationDao
     */
    protected bw.co.sigmaproduce.farm.cultivation.CultivationDao getCultivationDao()
    {
        return this.cultivationDao;
    }

    /**
     * Gets the reference to <code>cultivationRepository</code>.
     * @return cultivationRepository
     */
    protected bw.co.sigmaproduce.farm.cultivation.CultivationRepository getCultivationRepository()
    {
        return this.cultivationRepository;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final java.lang.String id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.get - 'id' can not be null");
        }
        java.util.Optional<bw.co.sigmaproduce.crop.variety.CropVariety> entity = cropVarietyRepository.findById(id);
        return transformEntity(transform, entity.get());
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety get(java.lang.String id)
    {
        return (bw.co.sigmaproduce.crop.variety.CropVariety)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final java.lang.String id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.load - 'id' can not be null");
        }
        java.util.Optional<bw.co.sigmaproduce.crop.variety.CropVariety> entity = cropVarietyRepository.findById(id);
        return transformEntity(transform, entity.get());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety load(java.lang.String id)
    {
        return (bw.co.sigmaproduce.crop.variety.CropVariety)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> loadAll()
    {
        return (java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety>) this.loadAll(bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
		
        final java.util.Collection<?> results = cropVarietyRepository.findAll();
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param cropVariety bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected void _prePersist(final bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param cropVariety bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected void _postPersist(final bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param cropVariety bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected void _preUpdate(final bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param cropVariety bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected void _postUpdate(final bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param cropVariety bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected void _preRemove(final bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param cropVariety bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected void _postRemove(final bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety create(bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
        return (bw.co.sigmaproduce.crop.variety.CropVariety)this.create(bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE, cropVariety);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
        if (cropVariety == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.create - 'cropVariety' can not be null");
        }

        //prePersist event
        _prePersist(cropVariety);

        cropVariety = this.cropVarietyRepository.save(cropVariety);

        //postPersist event
        _postPersist(cropVariety);

        return this.transformEntity(transform, cropVariety);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> create(final java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> entities)
    {
        return (java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety>) create(bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> create(final int transform, final java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.create - 'entities' can not be null");
        }
        java.util.Collection<Object> transformed = new java.util.ArrayList<Object>();
        for (bw.co.sigmaproduce.crop.variety.CropVariety entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety create(
        java.lang.String createdBy,
        java.lang.String updatedBy,
        java.time.LocalDateTime updatedDate,
        java.time.LocalDateTime createdDate,
        java.lang.String code,
        java.lang.String name,
        java.lang.String description,
        java.util.Collection<java.io.File> images)
    {
        return (bw.co.sigmaproduce.crop.variety.CropVariety)this.create(bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE, createdBy, updatedBy, updatedDate, createdDate, code, name, description, images);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        java.lang.String createdBy,
        java.lang.String updatedBy,
        java.time.LocalDateTime updatedDate,
        java.time.LocalDateTime createdDate,
        java.lang.String code,
        java.lang.String name,
        java.lang.String description,
        java.util.Collection<java.io.File> images)
    {
        bw.co.sigmaproduce.crop.variety.CropVariety entity = new bw.co.sigmaproduce.crop.variety.CropVariety();
        entity.setCreatedBy(createdBy);
        entity.setUpdatedBy(updatedBy);
        entity.setUpdatedDate(updatedDate);
        entity.setCreatedDate(createdDate);
        entity.setCode(code);
        entity.setName(name);
        entity.setDescription(description);
        entity.setImages(images);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety create(
        java.lang.String code,
        java.lang.String createdBy,
        java.time.LocalDateTime createdDate,
        bw.co.sigmaproduce.crop.Crop crop,
        java.lang.String name)
    {
        return (bw.co.sigmaproduce.crop.variety.CropVariety)this.create(bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE, code, createdBy, createdDate, crop, name);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        java.lang.String code,
        java.lang.String createdBy,
        java.time.LocalDateTime createdDate,
        bw.co.sigmaproduce.crop.Crop crop,
        java.lang.String name)
    {
        bw.co.sigmaproduce.crop.variety.CropVariety entity = new bw.co.sigmaproduce.crop.variety.CropVariety();
        entity.setCode(code);
        entity.setCreatedBy(createdBy);
        entity.setCreatedDate(createdDate);
        entity.setCrop(crop);
        entity.setName(name);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
        if (cropVariety == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.update - 'cropVariety' can not be null");
        }

        //preUpdate event
        _preUpdate(cropVariety);

        cropVariety = this.cropVarietyRepository.save(cropVariety);

        //postUpdate event
        _postUpdate(cropVariety);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.update - 'entities' can not be null");
        }
        for (bw.co.sigmaproduce.crop.variety.CropVariety entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
        if (cropVariety == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.remove - 'cropVariety' can not be null");
        }
        //preRemove event
        _preRemove(cropVariety);

        this.cropVarietyRepository.delete(cropVariety);

        //postRemove event
        _postRemove(cropVariety);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(java.lang.String id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.remove - 'id' can not be null");
        }
        bw.co.sigmaproduce.crop.variety.CropVariety entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "CropVariety.remove - 'entities' can not be null");
        }
        for (bw.co.sigmaproduce.crop.variety.CropVariety entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.cropVarietyRepository.delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> findByCriteria(final java.lang.String criteria)
    {
        try
        {
            return this.handleFindByCriteria(criteria);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'bw.co.sigmaproduce.crop.variety.CropVarietyDao.findByCriteria(java.lang.String criteria)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #findByCriteria(java.lang.String)}
     * @param criteria
     * @return java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety>
     * @throws Exception
     */
    protected abstract java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> handleFindByCriteria(java.lang.String criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public org.springframework.data.domain.Page<bw.co.sigmaproduce.crop.variety.CropVariety> findByCriteriaPaged(final java.lang.String criteria, final java.lang.Integer pageSize, final java.lang.Integer pageNumber)
    {
        if (criteria == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.crop.variety.CropVarietyDao.findByCriteriaPaged(java.lang.String criteria, java.lang.Integer pageSize, java.lang.Integer pageNumber) - 'criteria' can not be null");
        }
        try
        {
            return this.handleFindByCriteriaPaged(criteria, pageSize, pageNumber);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'bw.co.sigmaproduce.crop.variety.CropVarietyDao.findByCriteriaPaged(java.lang.String criteria, java.lang.Integer pageSize, java.lang.Integer pageNumber)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #findByCriteriaPaged(java.lang.String, java.lang.Integer, java.lang.Integer)}
     * @param criteria
     * @param pageSize
     * @param pageNumber
     * @return org.springframework.data.domain.Page<bw.co.sigmaproduce.crop.variety.CropVariety>
     * @throws Exception
     */
    protected abstract org.springframework.data.domain.Page<bw.co.sigmaproduce.crop.variety.CropVariety> handleFindByCriteriaPaged(java.lang.String criteria, java.lang.Integer pageSize, java.lang.Integer pageNumber)
        throws Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>bw.co.sigmaproduce.crop.variety.CropVarietyDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link bw.co.sigmaproduce.crop.variety.CropVariety} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link bw.co.sigmaproduce.crop.variety.CropVarietyVO} - {@link #TRANSFORM_CROPVARIETYVO}</li>
     *   <li>{@link bw.co.sigmaproduce.crop.variety.CropVarietyList} - {@link #TRANSFORM_CROPVARIETYLIST}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link bw.co.sigmaproduce.crop.variety.CropVarietyDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see bw.co.sigmaproduce.crop.variety.CropVarietyDao#transformEntity(int, bw.co.sigmaproduce.crop.variety.CropVariety)
     */
    @Override
    public Object transformEntity(final int transform, final bw.co.sigmaproduce.crop.variety.CropVariety entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_CROPVARIETYVO :
                    target = toCropVarietyVO(entity);
                    break;
                case TRANSFORM_CROPVARIETYLIST :
                    target = toCropVarietyList(entity);
                    break;
                case bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final java.util.Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_CROPVARIETYVO :
                org.apache.commons.collections4.CollectionUtils.transform(entities, this.CROPVARIETYVO_TRANSFORMER);
                break;
            case TRANSFORM_CROPVARIETYLIST :
                org.apache.commons.collections4.CollectionUtils.transform(entities, this.CROPVARIETYLIST_TRANSFORMER);
                break;
            case bw.co.sigmaproduce.crop.variety.CropVarietyDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see bw.co.sigmaproduce.crop.variety.CropVarietyDao#toEntities(java.util.Collection)
     */
    @Override
    public void toEntities(final java.util.Collection<?> results)
    {
        if (results != null)
        {
            org.apache.commons.collections4.CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link bw.co.sigmaproduce.crop.variety.CropVariety}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof bw.co.sigmaproduce.crop.variety.CropVariety)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return bw.co.sigmaproduce.crop.variety.CropVariety
     */
    protected bw.co.sigmaproduce.crop.variety.CropVariety toEntity(Object[] row)
    {
        bw.co.sigmaproduce.crop.variety.CropVariety target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof bw.co.sigmaproduce.crop.variety.CropVariety)
                {
                    target = (bw.co.sigmaproduce.crop.variety.CropVariety)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVarietyVO> toCropVarietyVOCollection(java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections4.CollectionUtils.transform(result, this.CROPVARIETYVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public bw.co.sigmaproduce.crop.variety.CropVarietyVO[] toCropVarietyVOArray(java.util.Collection<?> entities)
    {
        bw.co.sigmaproduce.crop.variety.CropVarietyVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toCropVarietyVOCollection(collection);
            result = (bw.co.sigmaproduce.crop.variety.CropVarietyVO[]) collection.toArray(new bw.co.sigmaproduce.crop.variety.CropVarietyVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link CropVarietyDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toCropVarietyVO(this.toEntity(row))
     * @see bw.co.sigmaproduce.crop.variety.CropVarietyDao#toCropVarietyVO(bw.co.sigmaproduce.crop.variety.CropVariety)
     */
    protected bw.co.sigmaproduce.crop.variety.CropVarietyVO toCropVarietyVO(Object[] row)
    {
        return this.toCropVarietyVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link bw.co.sigmaproduce.crop.variety.CropVarietyVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer CROPVARIETYVO_TRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof bw.co.sigmaproduce.crop.variety.CropVariety)
                {
                    final bw.co.sigmaproduce.crop.variety.CropVariety entity = (bw.co.sigmaproduce.crop.variety.CropVariety)input;
                    result = toCropVarietyVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toCropVarietyVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyVOToEntityCollection(java.util.Collection<?> instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof bw.co.sigmaproduce.crop.variety.CropVarietyVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections4.CollectionUtils.transform(instances, this.CropVarietyVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections4.Transformer CropVarietyVOToEntityTransformer =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return cropVarietyVOToEntity((bw.co.sigmaproduce.crop.variety.CropVarietyVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyVO(
        bw.co.sigmaproduce.crop.variety.CropVariety source,
        bw.co.sigmaproduce.crop.variety.CropVarietyVO target)
    {
        target.setId(source.getId());
        target.setCreatedBy(source.getCreatedBy());
        target.setUpdatedBy(source.getUpdatedBy());
        target.setCreatedDate(source.getCreatedDate());
        target.setUpdatedDate(source.getUpdatedDate());
        // No conversion for target.crop (can't convert source.getCrop():bw.co.sigmaproduce.crop.Crop to bw.co.sigmaproduce.crop.CropListVO)
        target.setCode(source.getCode());
        target.setName(source.getName());
        target.setDescription(source.getDescription());
        if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(target.getImages())){
            target.getImages().clear();
        } else {
            target.setImages(new java.util.ArrayList<>());
        }
        
        if(null!=source.getImages()) {
            target.getImages().addAll(source.getImages());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVarietyVO toCropVarietyVO(final bw.co.sigmaproduce.crop.variety.CropVariety entity)
    {
        bw.co.sigmaproduce.crop.variety.CropVarietyVO target = null;
        if (entity != null)
        {
            target =  new bw.co.sigmaproduce.crop.variety.CropVarietyVO();
            this.toCropVarietyVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyVOToEntity(
        bw.co.sigmaproduce.crop.variety.CropVarietyVO source,
        bw.co.sigmaproduce.crop.variety.CropVariety target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getCreatedBy() != null)
        {
            target.setCreatedBy(source.getCreatedBy());
        }
        if (copyIfNull || source.getUpdatedBy() != null)
        {
            target.setUpdatedBy(source.getUpdatedBy());
        }
        if (copyIfNull || source.getUpdatedDate() != null)
        {
            target.setUpdatedDate(source.getUpdatedDate());
        }
        if (copyIfNull || source.getCreatedDate() != null)
        {
            target.setCreatedDate(source.getCreatedDate());
        }
        if (copyIfNull || source.getCode() != null)
        {
            target.setCode(source.getCode());
        }
        if (copyIfNull || source.getName() != null)
        {
            target.setName(source.getName());
        }
        if (copyIfNull || source.getDescription() != null)
        {
            target.setDescription(source.getDescription());
        }
        if (copyIfNull || source.getImages() != null)
        {
            if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(target.getImages())){
                target.getImages().clear();
            } else {
                target.setImages(new java.util.ArrayList<>());
            }
            if(null != source.getImages()) {
                target.getImages().addAll(source.getImages());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVarietyList> toCropVarietyListCollection(java.util.Collection<bw.co.sigmaproduce.crop.variety.CropVariety> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections4.CollectionUtils.transform(result, this.CROPVARIETYLIST_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public bw.co.sigmaproduce.crop.variety.CropVarietyList[] toCropVarietyListArray(java.util.Collection<?> entities)
    {
        bw.co.sigmaproduce.crop.variety.CropVarietyList[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toCropVarietyListCollection(collection);
            result = (bw.co.sigmaproduce.crop.variety.CropVarietyList[]) collection.toArray(new bw.co.sigmaproduce.crop.variety.CropVarietyList[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link CropVarietyDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toCropVarietyList(this.toEntity(row))
     * @see bw.co.sigmaproduce.crop.variety.CropVarietyDao#toCropVarietyList(bw.co.sigmaproduce.crop.variety.CropVariety)
     */
    protected bw.co.sigmaproduce.crop.variety.CropVarietyList toCropVarietyList(Object[] row)
    {
        return this.toCropVarietyList(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link bw.co.sigmaproduce.crop.variety.CropVarietyList}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer CROPVARIETYLIST_TRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof bw.co.sigmaproduce.crop.variety.CropVariety)
                {
                    final bw.co.sigmaproduce.crop.variety.CropVariety entity = (bw.co.sigmaproduce.crop.variety.CropVariety)input;
                    result = toCropVarietyList(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toCropVarietyList(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyListToEntityCollection(java.util.Collection<?> instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof bw.co.sigmaproduce.crop.variety.CropVarietyList))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections4.CollectionUtils.transform(instances, this.CropVarietyListToEntityTransformer);
        }
    }

    private final org.apache.commons.collections4.Transformer CropVarietyListToEntityTransformer =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return cropVarietyListToEntity((bw.co.sigmaproduce.crop.variety.CropVarietyList)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyList(
        bw.co.sigmaproduce.crop.variety.CropVariety source,
        bw.co.sigmaproduce.crop.variety.CropVarietyList target)
    {
        target.setId(source.getId());
        target.setCode(source.getCode());
        target.setName(source.getName());
        // No conversion for target.crop (can't convert source.getCrop():bw.co.sigmaproduce.crop.Crop to java.lang.String)
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVarietyList toCropVarietyList(final bw.co.sigmaproduce.crop.variety.CropVariety entity)
    {
        bw.co.sigmaproduce.crop.variety.CropVarietyList target = null;
        if (entity != null)
        {
            target =  new bw.co.sigmaproduce.crop.variety.CropVarietyList();
            this.toCropVarietyList(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyListToEntity(
        bw.co.sigmaproduce.crop.variety.CropVarietyList source,
        bw.co.sigmaproduce.crop.variety.CropVariety target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getCode() != null)
        {
            target.setCode(source.getCode());
        }
        if (copyIfNull || source.getName() != null)
        {
            target.setName(source.getName());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return bw.co.sigmaproduce.PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety searchUniqueCode(final java.lang.String code)
    {

        org.springframework.data.jpa.domain.Specification<bw.co.sigmaproduce.crop.variety.CropVariety> spec = bw.co.sigmaproduce.SigmaproduceSpecifications.<bw.co.sigmaproduce.crop.variety.CropVariety, java.lang.String>findByAttribute(code, "code");
        java.util.List<bw.co.sigmaproduce.crop.variety.CropVariety> entities = cropVarietyRepository.findAll(spec, org.springframework.data.domain.Sort.by("code"));
        if(org.apache.commons.collections4.CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCode(final int transform, final java.lang.String code)
    {
        final bw.co.sigmaproduce.crop.variety.CropVariety entity=this.searchUniqueCode(code);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety searchUniqueName(final java.lang.String name)
    {

        org.springframework.data.jpa.domain.Specification<bw.co.sigmaproduce.crop.variety.CropVariety> spec = bw.co.sigmaproduce.SigmaproduceSpecifications.<bw.co.sigmaproduce.crop.variety.CropVariety, java.lang.String>findByAttribute(name, "name");
        java.util.List<bw.co.sigmaproduce.crop.variety.CropVariety> entities = cropVarietyRepository.findAll(spec, org.springframework.data.domain.Sort.by("name"));
        if(org.apache.commons.collections4.CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueName(final int transform, final java.lang.String name)
    {
        final bw.co.sigmaproduce.crop.variety.CropVariety entity=this.searchUniqueName(name);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety searchUniqueImages(final java.io.File images)
    {

        org.springframework.data.jpa.domain.Specification<bw.co.sigmaproduce.crop.variety.CropVariety> spec = bw.co.sigmaproduce.SigmaproduceSpecifications.<bw.co.sigmaproduce.crop.variety.CropVariety, java.io.File>findByAttribute(images, "images");
        java.util.List<bw.co.sigmaproduce.crop.variety.CropVariety> entities = cropVarietyRepository.findAll(spec, org.springframework.data.domain.Sort.by("images"));
        if(org.apache.commons.collections4.CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueImages(final int transform, final java.io.File images)
    {
        final bw.co.sigmaproduce.crop.variety.CropVariety entity=this.searchUniqueImages(images);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }


    /**
     * Create or Update the <code>cropVariety</code> instance in the persistent store.
     * @param cropVariety
     */
    @Override
    public bw.co.sigmaproduce.crop.variety.CropVariety createOrUpdate(bw.co.sigmaproduce.crop.variety.CropVariety cropVariety)
    {
        if(cropVariety.getId() == null)
        {
            return (bw.co.sigmaproduce.crop.variety.CropVariety)this.create(TRANSFORM_NONE,cropVariety);
        }
        this.update(cropVariety);
        return cropVariety;
    }

    // spring-hibernate-dao-base merge-point
}
