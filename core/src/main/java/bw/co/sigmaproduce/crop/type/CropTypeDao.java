// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.crop.type;

import java.io.File;
import java.time.LocalDateTime;
import java.util.Collection;

/**
 * TODO: Model Documentation for CropType
 * @see CropType
 */
public interface CropTypeDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link CropType}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link CropTypeVO}.
     */
    public static final int TRANSFORM_CROPTYPEVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toCropTypeVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toCropTypeVO(
        CropType source,
        CropTypeVO target);

    /**
     * Converts this DAO's entity to an object of type {@link CropTypeVO}.
     * @param entity
     * @return CropTypeVO
     */
    public CropTypeVO toCropTypeVO(CropType entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link CropTypeVO}.
     * @param entities
     * @return Collection<CropTypeVO>
     */
    public Collection<CropTypeVO> toCropTypeVOCollection(Collection<CropType> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link CropTypeVO}.
     * @param entities
     * @return CropTypeVO[]
     */
    public CropTypeVO[] toCropTypeVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link CropTypeVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void cropTypeVOToEntity(
        CropTypeVO source,
        CropType target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link CropTypeVO} to this DAO's entity.
     * @param cropTypeVO
     * @return CropType
     */
    public CropType cropTypeVOToEntity(CropTypeVO cropTypeVO);

    /**
     * Converts a Collection of instances of type {@link CropTypeVO} to this
     * DAO's entity.
     * @param instances
     */
    public void cropTypeVOToEntityCollection(Collection<?> instances);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link CropTypeListVO}.
     */
    public static final int TRANSFORM_CROPTYPELISTVO = 2;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toCropTypeListVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toCropTypeListVO(
        CropType source,
        CropTypeListVO target);

    /**
     * Converts this DAO's entity to an object of type {@link CropTypeListVO}.
     * @param entity
     * @return CropTypeListVO
     */
    public CropTypeListVO toCropTypeListVO(CropType entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link CropTypeListVO}.
     * @param entities
     * @return Collection<CropTypeListVO>
     */
    public Collection<CropTypeListVO> toCropTypeListVOCollection(Collection<CropType> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link CropTypeListVO}.
     * @param entities
     * @return CropTypeListVO[]
     */
    public CropTypeListVO[] toCropTypeListVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link CropTypeListVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void cropTypeListVOToEntity(
        CropTypeListVO source,
        CropType target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link CropTypeListVO} to this DAO's entity.
     * @param cropTypeListVO
     * @return CropType
     */
    public CropType cropTypeListVOToEntity(CropTypeListVO cropTypeListVO);

    /**
     * Converts a Collection of instances of type {@link CropTypeListVO} to this
     * DAO's entity.
     * @param instances
     */
    public void cropTypeListVOToEntityCollection(Collection<?> instances);

    /**
     * Gets an instance of CropType from the persistent store.
     * @param id
     * @return CropType
     */
    public CropType get(String id);

    /**
     * <p>
     * Does the same thing as {@link #get(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, String id);

    /**
     * Loads an instance of CropType from the persistent store.
     * @param id
     * @return CropType
     */
    public CropType load(String id);

    /**
     * <p>
     * Does the same thing as {@link #load(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, String id);

    /**
     * Loads all entities of type {@link CropType}.
     *
     * @return the loaded entities.
     */
    public Collection<CropType> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of CropType and adds it to the persistent store.
     * @param cropType
     * @return CropType
     */
    public CropType create(CropType cropType);

    /**
     * <p>
     * Does the same thing as {@link #create(CropType)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param cropType
     * @return Object
     */
    public Object create(int transform, CropType cropType);

    /**
     * Creates a new instance of CropType and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of CropType
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<CropType> create(Collection<CropType> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(CropType)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<CropType> entities);

    /**
     * <p>
     * Creates a new <code>CropType</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param createdBy TODO: Model Documentation for CropType.createdBy
     * @param updatedBy TODO: Model Documentation for CropType.updatedBy
     * @param updatedDate TODO: Model Documentation for CropType.updatedDate
     * @param createdDate TODO: Model Documentation for CropType.createdDate
     * @param code TODO: Model Documentation for CropType.code
     * @param images TODO: Model Documentation for CropType.images
     * @param description TODO: Model Documentation for CropType.description
     * @param name TODO: Model Documentation for CropType.name
     * @return CropType
     */
    public CropType create(
        String createdBy,
        String updatedBy,
        LocalDateTime updatedDate,
        LocalDateTime createdDate,
        String code,
        Collection<File> images,
        String description,
        String name);

    /**
     * <p>
     * Does the same thing as {@link #create(String, String, LocalDateTime, LocalDateTime, String, File, String, String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param createdBy TODO: Model Documentation for CropType.createdBy
     * @param updatedBy TODO: Model Documentation for CropType.updatedBy
     * @param updatedDate TODO: Model Documentation for CropType.updatedDate
     * @param createdDate TODO: Model Documentation for CropType.createdDate
     * @param code TODO: Model Documentation for CropType.code
     * @param images TODO: Model Documentation for CropType.images
     * @param description TODO: Model Documentation for CropType.description
     * @param name TODO: Model Documentation for CropType.name
     * @return CropType
     */
    public Object create(
        int transform,
        String createdBy,
        String updatedBy,
        LocalDateTime updatedDate,
        LocalDateTime createdDate,
        String code,
        Collection<File> images,
        String description,
        String name);


    /**
     * Updates the <code>cropType</code> instance in the persistent store.
     * @param cropType
     */
    public void update(CropType cropType);

    /**
     * Create or Update the <code>cropType</code> instance in the persistent store.
     * @param cropType
     * @return CropType
     */
    public CropType createOrUpdate(CropType cropType);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<CropType> entities);

    /**
     * Removes the instance of CropType from the persistent store.
     * @param cropType
     */
    public void remove(CropType cropType);

    /**
     * Removes the instance of CropType having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(String id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<CropType> entities);

    /**
     * TODO: Model Documentation for CropType.findByCriteria
     * @param criteria TODO: Model Documentation for CropType.findByCriteria(criteria)
     * @return Collection<CropType>
     */
    public Collection<CropType> findByCriteria(String criteria);


    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>bw.co.sigmaproduce.crop.type.CropTypeDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link CropType} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link CropTypeVO} - {@link #TRANSFORM_CROPTYPEVO}</li>
     *   <li>{@link CropTypeListVO} - {@link #TRANSFORM_CROPTYPELISTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link bw.co.sigmaproduce.crop.type.CropTypeDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final CropType entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,CropType)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>bw.co.sigmaproduce.crop.type.CropTypeDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,CropType)
     */
    public void transformEntities(final int transform, final Collection<?> entities);

    /**
     * Searches for a single instance of CropType.
     * @param code the unique code to be used in the search.'
     * @return a single instance of CropType.
     */
    public CropType searchUniqueCode(final String code);

    /**
     * Searches for a single instance of CropType.
     * @param transform the transformation flag.
     * @param code the unique code to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCode(final int transform, final String code);

    /**
     * Searches for a single instance of CropType.
     * @param images the unique images to be used in the search.'
     * @return a single instance of CropType.
     */
    public CropType searchUniqueImages(final File images);

    /**
     * Searches for a single instance of CropType.
     * @param transform the transformation flag.
     * @param images the unique images to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueImages(final int transform, final File images);

    /**
     * Searches for a single instance of CropType.
     * @param name the unique name to be used in the search.'
     * @return a single instance of CropType.
     */
    public CropType searchUniqueName(final String name);

    /**
     * Searches for a single instance of CropType.
     * @param transform the transformation flag.
     * @param name the unique name to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueName(final int transform, final String name);


    // spring-dao merge-point
}