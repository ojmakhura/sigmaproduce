// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.crop.type;

import bw.co.sigmaproduce.crop.CropRepository;
import bw.co.sigmaproduce.crop.issue.CropIssueRepository;
import bw.co.sigmaproduce.document.DocumentRepository;

import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see CropType
 */
@Repository("cropTypeDao")
public class CropTypeDaoImpl
    extends CropTypeDaoBase
{
    

    public CropTypeDaoImpl(CropRepository cropRepository, CropIssueRepository cropIssueRepository,
            DocumentRepository documentRepository, CropTypeRepository cropTypeRepository) {
        super(cropRepository, cropIssueRepository, documentRepository, cropTypeRepository);
        //TODO Auto-generated constructor stub
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<CropType> handleFindByCriteria(String criteria)
    {
        Specification<CropType> spec = null;

        if(StringUtils.isNotBlank(criteria)) {
            spec = (root, query, cb) -> cb.or(
                    cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                    cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%"));
        }

        return this.cropTypeRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropTypeDTO(
        CropType source,
        CropTypeDTO target)
    {
        // TODO verify behavior of toCropTypeDTO
        super.toCropTypeDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropTypeDTO toCropTypeDTO(final CropType entity)
    {
        // TODO verify behavior of toCropTypeDTO
        return super.toCropTypeDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropType loadCropTypeFromCropTypeDTO(CropTypeDTO cropTypeDTO)
    {
        if (cropTypeDTO.getId() == null)
        {
            return  CropType.Factory.newInstance();
        }
        else
        {
            return this.load(cropTypeDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public CropType cropTypeDTOToEntity(CropTypeDTO cropTypeDTO)
    {
        // TODO verify behavior of cropTypeDTOToEntity
        CropType entity = this.loadCropTypeFromCropTypeDTO(cropTypeDTO);
        this.cropTypeDTOToEntity(cropTypeDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropTypeDTOToEntity(
        CropTypeDTO source,
        CropType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropTypeDTOToEntity
        super.cropTypeDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropTypeListDTO(
        CropType source,
        CropTypeListDTO target)
    {
        // TODO verify behavior of toCropTypeListDTO
        super.toCropTypeListDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropTypeListDTO toCropTypeListDTO(final CropType entity)
    {
        // TODO verify behavior of toCropTypeListDTO
        return super.toCropTypeListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropType loadCropTypeFromCropTypeListDTO(CropTypeListDTO cropTypeListDTO)
    {
        if (cropTypeListDTO.getId() == null)
        {
            return  CropType.Factory.newInstance();
        }
        else
        {
            return this.load(cropTypeListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public CropType cropTypeListDTOToEntity(CropTypeListDTO cropTypeListDTO)
    {
        // TODO verify behavior of cropTypeListDTOToEntity
        CropType entity = this.loadCropTypeFromCropTypeListDTO(cropTypeListDTO);
        this.cropTypeListDTOToEntity(cropTypeListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropTypeListDTOToEntity(
        CropTypeListDTO source,
        CropType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropTypeListDTOToEntity
        super.cropTypeListDTOToEntity(source, target, copyIfNull);
    }
}