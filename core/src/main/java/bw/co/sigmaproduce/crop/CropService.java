// license-header java merge-point
//
/**
 * @author Generated by Service.vsl in andromda-java-cartridge on 06/12/2024 19:31:21+0200 Do not modify by hand!
 *
 * TEMPLATE:     Service.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::backend::bw.co.sigmaproduce::crop::CropService
 * STEREOTYPE:   Service
 */
package bw.co.sigmaproduce.crop;

import bw.co.sigmaproduce.crop.issue.CropIssueType;
import java.util.Collection;
import java.util.Set;
import org.springframework.data.domain.Page;

/**
 * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService
 */
public interface CropService
{
    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findById
     * @param id TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findById(id)
     * @return CropVO
     */
    public CropVO findById(String id);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.getAll
     * @return Collection<CropListVO>
     */
    public Collection<CropListVO> getAll();

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.getAll
     * @param pageNumber TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.getAll(pageNumber)
     * @param pageSize TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.getAll(pageSize)
     * @return Page<CropListVO>
     */
    public Page<CropListVO> getAll(Integer pageNumber, Integer pageSize);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.remove
     * @param id TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.remove(id)
     * @return boolean
     */
    public boolean remove(String id);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.save
     * @param crop TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.save(crop)
     * @return CropVO
     */
    public CropVO save(CropVO crop);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.search
     * @param criteria TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.search(criteria)
     * @return Collection<CropListVO>
     */
    public Collection<CropListVO> search(String criteria);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.search
     * @param pageNumber TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.search(pageNumber)
     * @param pageSize TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.search(pageSize)
     * @param criteria TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.search(criteria)
     * @return Page<CropListVO>
     */
    public Page<CropListVO> search(Integer pageNumber, Integer pageSize, String criteria);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByCropTypes
     * @param cropTypeIds TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByCropTypes(cropTypeIds)
     * @return Collection<CropListVO>
     */
    public Collection<CropListVO> findByCropTypes(Set<String> cropTypeIds);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByIssueType
     * @param issueType TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByIssueType(issueType)
     * @return Collection<CropListVO>
     */
    public Collection<CropListVO> findByIssueType(CropIssueType issueType);

    /**
     * TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByCropTypes
     * @param cropTypeIds TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByCropTypes(cropTypeIds)
     * @param pageNumber TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByCropTypes(pageNumber)
     * @param pageSize TODO: Model Documentation for bw.co.sigmaproduce.crop.CropService.findByCropTypes(pageSize)
     * @return Collection<Page<CropListVO>>
     */
    public Collection<Page<CropListVO>> findByCropTypes(Set<String> cropTypeIds, Integer pageNumber, Integer pageSize);

}