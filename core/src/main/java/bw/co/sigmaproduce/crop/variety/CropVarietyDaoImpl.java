// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.crop.variety;

import bw.co.sigmaproduce.crop.CropRepository;
import bw.co.sigmaproduce.document.DocumentRepository;
import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see CropVariety
 */
@Repository("cropVarietyDao")
public class CropVarietyDaoImpl
    extends CropVarietyDaoBase
{
    

    public CropVarietyDaoImpl(CropRepository cropRepository, CultivationRepository cultivationRepository,
            DocumentRepository documentRepository, CropVarietyRepository cropVarietyRepository) {
        super(cropRepository, cultivationRepository, documentRepository, cropVarietyRepository);
        //TODO Auto-generated constructor stub
    }

    private Specification<CropVariety> buildSpecification(final String criteria)
    {

        Specification<CropVariety> specification = null;

        if(criteria != null && !criteria.isEmpty())
        {
            specification = (root, query, cb) -> cb.or(
                cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%"),
                cb.like(cb.lower(root.get("description")), "%" + criteria.toLowerCase() + "%")
            );
        }

        return specification;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<CropVariety> handleFindByCriteria(String criteria)
    {
        return this.cropVarietyRepository.findAll(buildSpecification(criteria));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Page<CropVariety> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
    {
        return this.cropVarietyRepository.findAll(buildSpecification(criteria), PageRequest.of(pageSize, pageNumber));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyDTO(
        CropVariety source,
        CropVarietyDTO target)
    {
        // TODO verify behavior of toCropVarietyDTO
        super.toCropVarietyDTO(source, target);
        // WARNING! No conversion for target.crop (can't convert source.getCrop():bw.co.sigmaproduce.crop.Crop to bw.co.sigmaproduce.crop.CropVO
        if(source.getCrop() != null)
        {
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVarietyDTO toCropVarietyDTO(final CropVariety entity)
    {
        // TODO verify behavior of toCropVarietyDTO
        return super.toCropVarietyDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropVariety loadCropVarietyFromCropVarietyDTO(CropVarietyDTO cropVarietyDTO)
    {
        if (cropVarietyDTO.getId() == null)
        {
            return  CropVariety.Factory.newInstance();
        }
        else
        {
            return this.load(cropVarietyDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public CropVariety cropVarietyDTOToEntity(CropVarietyDTO cropVarietyDTO)
    {
        // TODO verify behavior of cropVarietyDTOToEntity
        CropVariety entity = this.loadCropVarietyFromCropVarietyDTO(cropVarietyDTO);
        this.cropVarietyDTOToEntity(cropVarietyDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyDTOToEntity(
        CropVarietyDTO source,
        CropVariety target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVarietyDTOToEntity
        super.cropVarietyDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyList(
        CropVariety source,
        CropVarietyList target)
    {
        // TODO verify behavior of toCropVarietyList
        super.toCropVarietyList(source, target);
        // WARNING! No conversion for target.crop (can't convert source.getCrop():bw.co.sigmaproduce.crop.Crop to String
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVarietyList toCropVarietyList(final CropVariety entity)
    {
        // TODO verify behavior of toCropVarietyList
        return super.toCropVarietyList(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropVariety loadCropVarietyFromCropVarietyList(CropVarietyList cropVarietyList)
    {
        if (cropVarietyList.getId() == null)
        {
            return  CropVariety.Factory.newInstance();
        }
        else
        {
            return this.load(cropVarietyList.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public CropVariety cropVarietyListToEntity(CropVarietyList cropVarietyList)
    {
        // TODO verify behavior of cropVarietyListToEntity
        CropVariety entity = this.loadCropVarietyFromCropVarietyList(cropVarietyList);
        this.cropVarietyListToEntity(cropVarietyList, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyListToEntity(
        CropVarietyList source,
        CropVariety target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVarietyListToEntity
        super.cropVarietyListToEntity(source, target, copyIfNull);
    }
}