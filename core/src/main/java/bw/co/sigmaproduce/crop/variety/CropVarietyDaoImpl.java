// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.crop.variety;

import bw.co.sigmaproduce.crop.CropRepository;
import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Repository;

/**
 * @see CropVariety
 */
@Repository("cropVarietyDao")
public class CropVarietyDaoImpl
    extends CropVarietyDaoBase
{
    
    public CropVarietyDaoImpl(
        CropRepository cropRepository,
        CultivationRepository cultivationRepository,
        CropVarietyRepository cropVarietyRepository
    ) {

        super(
            cropRepository,
            cultivationRepository,
            cropVarietyRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<CropVariety> handleFindByCriteria(String criteria)
    {
        // TODO implement public Collection<CropVariety> handleFindByCriteria(String criteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Page<CropVariety> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
    {
        // TODO implement public Page<CropVariety> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyVO(
        CropVariety source,
        CropVarietyVO target)
    {
        // TODO verify behavior of toCropVarietyVO
        super.toCropVarietyVO(source, target);
        // WARNING! No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.crop (can't convert source.getCrop():bw.co.sigmaproduce.crop.Crop to bw.co.sigmaproduce.crop.CropListVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVarietyVO toCropVarietyVO(final CropVariety entity)
    {
        // TODO verify behavior of toCropVarietyVO
        return super.toCropVarietyVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropVariety loadCropVarietyFromCropVarietyVO(CropVarietyVO cropVarietyVO)
    {
        // TODO implement loadCropVarietyFromCropVarietyVO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.crop.variety.loadCropVarietyFromCropVarietyVO(CropVarietyVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cropVarietyVO.getId() == null)
        {
            return  CropVariety.Factory.newInstance();
        }
        else
        {
            return this.load(cropVarietyVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public CropVariety cropVarietyVOToEntity(CropVarietyVO cropVarietyVO)
    {
        // TODO verify behavior of cropVarietyVOToEntity
        CropVariety entity = this.loadCropVarietyFromCropVarietyVO(cropVarietyVO);
        this.cropVarietyVOToEntity(cropVarietyVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyVOToEntity(
        CropVarietyVO source,
        CropVariety target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVarietyVOToEntity
        super.cropVarietyVOToEntity(source, target, copyIfNull);
        // No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyList(
        CropVariety source,
        CropVarietyList target)
    {
        // TODO verify behavior of toCropVarietyList
        super.toCropVarietyList(source, target);
        // WARNING! No conversion for target.crop (can't convert source.getCrop():bw.co.sigmaproduce.crop.Crop to String
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVarietyList toCropVarietyList(final CropVariety entity)
    {
        // TODO verify behavior of toCropVarietyList
        return super.toCropVarietyList(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropVariety loadCropVarietyFromCropVarietyList(CropVarietyList cropVarietyList)
    {
        // TODO implement loadCropVarietyFromCropVarietyList
        throw new UnsupportedOperationException("bw.co.sigmaproduce.crop.variety.loadCropVarietyFromCropVarietyList(CropVarietyList) not yet implemented.");

        /* A typical implementation looks like this:
        if (cropVarietyList.getId() == null)
        {
            return  CropVariety.Factory.newInstance();
        }
        else
        {
            return this.load(cropVarietyList.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public CropVariety cropVarietyListToEntity(CropVarietyList cropVarietyList)
    {
        // TODO verify behavior of cropVarietyListToEntity
        CropVariety entity = this.loadCropVarietyFromCropVarietyList(cropVarietyList);
        this.cropVarietyListToEntity(cropVarietyList, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyListToEntity(
        CropVarietyList source,
        CropVariety target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVarietyListToEntity
        super.cropVarietyListToEntity(source, target, copyIfNull);
    }
}