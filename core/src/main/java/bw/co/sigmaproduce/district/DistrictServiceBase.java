// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::backend::bw.co.sigmaproduce::district::DistrictService
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.district;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;

/**
 * <p>
 * Spring Service base class for <code>DistrictService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see DistrictService
 */
public abstract class DistrictServiceBase
    implements DistrictService
{
    protected Logger logger = LoggerFactory.getLogger(DistrictService.class);
    protected final DistrictDao districtDao;
    protected final DistrictRepository districtRepository;
    protected final MessageSource messageSource;

    public DistrictServiceBase(
        DistrictDao districtDao,
        DistrictRepository districtRepository,
        MessageSource messageSource
    ) {
        this.districtDao = districtDao;
        this.districtRepository = districtRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>district</code>'s DAO.
     * @return districtDao
     */
    protected DistrictDao getDistrictDao()
    {
        return this.districtDao;
    }

    /**
     * Gets the reference to <code>district</code>'s repository.
     * @return districtRepository
     */
    public DistrictRepository getDistrictRepository() {
        return districtRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistrictVO findById(final Long id)
    {
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new DistrictServiceException(
                "Error performing 'DistrictService.findById(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(Long)}
     * @param id Long TODO: Model Documentation for DistrictService.findById(id)
     * @return DistrictVO
     * @throws Exception
     */
    protected abstract DistrictVO handleFindById(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<DistrictVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new DistrictServiceException(
                "Error performing 'DistrictService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<DistrictVO>
     * @throws Exception
     */
    protected abstract Collection<DistrictVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public DistrictVO save(final DistrictVO district)
    {
        if (district == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.district.DistrictService.save(DistrictVO district) - 'district' can not be null");
        }
        if (district.getCode() == null || district.getCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.district.DistrictService.save(DistrictVO district) - 'district.code' can not be null or empty");
        }
        if (district.getName() == null || district.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.district.DistrictService.save(DistrictVO district) - 'district.name' can not be null or empty");
        }
        try
        {
            return this.handleSave(district);
        }
        catch (Throwable th)
        {
            throw new DistrictServiceException(
                "Error performing 'DistrictService.save(DistrictVO district)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(DistrictVO)}
     * @param district DistrictVO TODO: Model Documentation for DistrictService.save(district)
     * @return DistrictVO
     * @throws Exception
     */
    protected abstract DistrictVO handleSave(DistrictVO district)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final Long id)
    {
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new DistrictServiceException(
                "Error performing 'DistrictService.remove(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(Long)}
     * @param id Long TODO: Model Documentation for DistrictService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<DistrictVO> search(final String criteria)
    {
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new DistrictServiceException(
                "Error performing 'DistrictService.search(String criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(String)}
     * @param criteria String TODO: Model Documentation for DistrictService.search(criteria)
     * @return Collection<DistrictVO>
     * @throws Exception
     */
    protected abstract Collection<DistrictVO> handleSearch(String criteria)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}