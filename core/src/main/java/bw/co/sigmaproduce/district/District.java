// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 06/12/2024 19:31:13+0200.
//
package bw.co.sigmaproduce.district;

import bw.co.sigmaproduce.village.Village;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.io.Serializable;
import java.util.Collection;
import java.util.HashSet;

/**
 * TODO: Model Documentation for District
 */
@Entity
@Table(name = "DISTRICT")
// Uncomment to enable caching for District
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQuery(name = "District.findAll", query = "SELECT d FROM District AS d")
// HibernateEntity.vsl annotations merge-point
public class District
    implements Serializable, Comparable<District>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 2817617392472069569L;

    // Generate 3 attributes
    private String code;

    /**
     * TODO: Model Documentation for District.code
     * @return this.code String
     */
    @Column(name = "CODE", unique = true, nullable = false, insertable = true, updatable = true)
    public String getCode()
    {
        return this.code;
    }

    /**
     * TODO: Model Documentation for District.code
     * @param codeIn String
     */
    public void setCode(String codeIn)
    {
        this.code = codeIn;
    }

    private String name;

    /**
     * TODO: Model Documentation for District.name
     * @return this.name String
     */
    @Column(name = "NAME", unique = true, nullable = false, insertable = true, updatable = true)
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for District.name
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private Long id;

    /**
     * TODO: Model Documentation for District.id
     * @return this.id Long
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for District.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    private Collection<Village> villages = new HashSet<Village>();

    /**
     * TODO: Model Documentation for Village
     * @return this.villages Collection<Village>
     */
    @OneToMany( mappedBy = "district") 
    public Collection<Village> getVillages()
    {
        return this.villages;
    }

    /**
     * TODO: Model Documentation for Village
     * @param villagesIn Collection<Village>
     */
    public void setVillages(Collection<Village> villagesIn)
    {
        this.villages = villagesIn;
    }

    /**
     * TODO: Model Documentation for Village
     * @param elementToAdd Village
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addVillages(Village elementToAdd)
    {
        return this.villages.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Village
     * @param elementToRemove Village
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeVillages(Village elementToRemove)
    {
        return this.villages.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an District instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof District))
        {
            return false;
        }
        final District that = (District)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link District}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link District}.
         * @return new District()
         */
        public static District newInstance()
        {
            return new District();
        }

        /**
         * Constructs a new instance of {@link District}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param code String
         * @param name String
         * @return newInstance
         */
        public static District newInstance(String code, String name)
        {
            final District entity = new District();
            entity.setCode(code);
            entity.setName(name);
            return entity;
        }

        /**
         * Constructs a new instance of {@link District}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param code String
         * @param name String
         * @param villages Collection<Village>
         * @return newInstance District
         */
        public static District newInstance(String code, String name, Collection<Village> villages)
        {
            final District entity = new District();
            entity.setCode(code);
            entity.setName(name);
            entity.setVillages(villages);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(District other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCode() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCode().compareTo(other.getCode()));
            }
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(other.getName()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("District(");
        sb.append(" code=").append(getCode());
        sb.append(" name=").append(getName());
        sb.append(" id=").append(getId());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}