// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.document.type;

import java.util.Collection;
import org.springframework.stereotype.Repository;

/**
 * @see DocumentType
 */
@Repository("documentTypeDao")
public class DocumentTypeDaoImpl
    extends DocumentTypeDaoBase
{
    
    public DocumentTypeDaoImpl(
        DocumentTypeRepository documentTypeRepository
    ) {

        super(
            documentTypeRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<DocumentType> handleFindByCriteria(String criteria)
    {
        // TODO implement public Collection<DocumentType> handleFindByCriteria(String criteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toDocumentTypeDTO(
        DocumentType source,
        DocumentTypeDTO target)
    {
        // TODO verify behavior of toDocumentTypeDTO
        super.toDocumentTypeDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentTypeDTO toDocumentTypeDTO(final DocumentType entity)
    {
        // TODO verify behavior of toDocumentTypeDTO
        return super.toDocumentTypeDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private DocumentType loadDocumentTypeFromDocumentTypeDTO(DocumentTypeDTO documentTypeDTO)
    {
        // TODO implement loadDocumentTypeFromDocumentTypeDTO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.document.type.loadDocumentTypeFromDocumentTypeDTO(DocumentTypeDTO) not yet implemented.");

        /* A typical implementation looks like this:
        if (documentTypeDTO.getId() == null)
        {
            return  DocumentType.Factory.newInstance();
        }
        else
        {
            return this.load(documentTypeDTO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public DocumentType documentTypeDTOToEntity(DocumentTypeDTO documentTypeDTO)
    {
        // TODO verify behavior of documentTypeDTOToEntity
        DocumentType entity = this.loadDocumentTypeFromDocumentTypeDTO(documentTypeDTO);
        this.documentTypeDTOToEntity(documentTypeDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void documentTypeDTOToEntity(
        DocumentTypeDTO source,
        DocumentType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of documentTypeDTOToEntity
        super.documentTypeDTOToEntity(source, target, copyIfNull);
    }
}