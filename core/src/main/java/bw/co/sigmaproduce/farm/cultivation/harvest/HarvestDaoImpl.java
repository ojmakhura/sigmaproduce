// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm.cultivation.harvest;

import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import org.springframework.stereotype.Repository;

/**
 * @see Harvest
 */
@Repository("harvestDao")
public class HarvestDaoImpl
    extends HarvestDaoBase
{
    
    public HarvestDaoImpl(
        CultivationRepository cultivationRepository,
        HarvestRepository harvestRepository
    ) {

        super(
            cultivationRepository,
            harvestRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toHarvestVO(
        Harvest source,
        HarvestVO target)
    {
        // TODO verify behavior of toHarvestVO
        super.toHarvestVO(source, target);
        // WARNING! No conversion for target.harvestDate (can't convert source.getHarvestDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.cultivation (can't convert source.getCultivation():bw.co.sigmaproduce.farm.cultivation.Cultivation to bw.co.sigmaproduce.farm.cultivation.CultivationVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HarvestVO toHarvestVO(final Harvest entity)
    {
        // TODO verify behavior of toHarvestVO
        return super.toHarvestVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Harvest loadHarvestFromHarvestVO(HarvestVO harvestVO)
    {
        // TODO implement loadHarvestFromHarvestVO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.farm.cultivation.harvest.loadHarvestFromHarvestVO(HarvestVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (harvestVO.getId() == null)
        {
            return  Harvest.Factory.newInstance();
        }
        else
        {
            return this.load(harvestVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Harvest harvestVOToEntity(HarvestVO harvestVO)
    {
        // TODO verify behavior of harvestVOToEntity
        Harvest entity = this.loadHarvestFromHarvestVO(harvestVO);
        this.harvestVOToEntity(harvestVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void harvestVOToEntity(
        HarvestVO source,
        Harvest target,
        boolean copyIfNull)
    {
        // TODO verify behavior of harvestVOToEntity
        super.harvestVOToEntity(source, target, copyIfNull);
        // No conversion for target.harvestDate (can't convert source.getHarvestDate():java.util.Date to java.util.Date
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toHarvestList(
        Harvest source,
        HarvestList target)
    {
        // TODO verify behavior of toHarvestList
        super.toHarvestList(source, target);
        // WARNING! No conversion for target.harvestDate (can't convert source.getHarvestDate():java.util.Date to java.util.Date
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HarvestList toHarvestList(final Harvest entity)
    {
        // TODO verify behavior of toHarvestList
        return super.toHarvestList(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Harvest loadHarvestFromHarvestList(HarvestList harvestList)
    {
        // TODO implement loadHarvestFromHarvestList
        throw new UnsupportedOperationException("bw.co.sigmaproduce.farm.cultivation.harvest.loadHarvestFromHarvestList(HarvestList) not yet implemented.");

        /* A typical implementation looks like this:
        if (harvestList.getId() == null)
        {
            return  Harvest.Factory.newInstance();
        }
        else
        {
            return this.load(harvestList.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Harvest harvestListToEntity(HarvestList harvestList)
    {
        // TODO verify behavior of harvestListToEntity
        Harvest entity = this.loadHarvestFromHarvestList(harvestList);
        this.harvestListToEntity(harvestList, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void harvestListToEntity(
        HarvestList source,
        Harvest target,
        boolean copyIfNull)
    {
        // TODO verify behavior of harvestListToEntity
        super.harvestListToEntity(source, target, copyIfNull);
        // No conversion for target.harvestDate (can't convert source.getHarvestDate():java.util.Date to java.util.Date
    }
}