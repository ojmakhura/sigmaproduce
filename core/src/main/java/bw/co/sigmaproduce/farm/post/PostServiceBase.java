// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::backend::bw.co.sigmaproduce::farm::post::PostService
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.farm.post;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;

/**
 * <p>
 * Spring Service base class for <code>PostService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see PostService
 */
public abstract class PostServiceBase
    implements PostService
{
    protected Logger logger = LoggerFactory.getLogger(PostService.class);
    protected final PostDao postDao;
    protected final PostRepository postRepository;
    protected final MessageSource messageSource;

    public PostServiceBase(
        PostDao postDao,
        PostRepository postRepository,
        MessageSource messageSource
    ) {
        this.postDao = postDao;
        this.postRepository = postRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>post</code>'s DAO.
     * @return postDao
     */
    protected PostDao getPostDao()
    {
        return this.postDao;
    }

    /**
     * Gets the reference to <code>post</code>'s repository.
     * @return postRepository
     */
    public PostRepository getPostRepository() {
        return postRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<PostVO> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for PostService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for PostService.getAll(pageSize)
     * @return Page<PostVO>
     * @throws Exception
     */
    protected abstract Page<PostVO> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<PostVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<PostVO>
     * @throws Exception
     */
    protected abstract Collection<PostVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostService.remove(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.remove(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(String)}
     * @param id String TODO: Model Documentation for PostService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public PostVO findById(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostService.findById(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.findById(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(String)}
     * @param id String TODO: Model Documentation for PostService.findById(id)
     * @return PostVO
     * @throws Exception
     */
    protected abstract PostVO handleFindById(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public PostVO save(final PostVO post)
    {
        if (post == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostService.save(PostVO post) - 'post' can not be null");
        }
        if (post.getFarm() == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostService.save(PostVO post) - 'post.farm' can not be null");
        }
        try
        {
            return this.handleSave(post);
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.save(PostVO post)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(PostVO)}
     * @param post PostVO TODO: Model Documentation for PostService.save(post)
     * @return PostVO
     * @throws Exception
     */
    protected abstract PostVO handleSave(PostVO post)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public PostVO getFarmPosts(final String farmId)
    {
        if (farmId == null || farmId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostService.getFarmPosts(String farmId) - 'farmId' can not be null or empty");
        }
        try
        {
            return this.handleGetFarmPosts(farmId);
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.getFarmPosts(String farmId)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getFarmPosts(String)}
     * @param farmId String TODO: Model Documentation for PostService.getFarmPosts(farmId)
     * @return PostVO
     * @throws Exception
     */
    protected abstract PostVO handleGetFarmPosts(String farmId)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<PostVO> getFarmPosts(final String farmId, final Integer pageSize, final Integer pageNumber)
    {
        if (farmId == null || farmId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostService.getFarmPosts(String farmId, Integer pageSize, Integer pageNumber) - 'farmId' can not be null or empty");
        }
        try
        {
            return this.handleGetFarmPosts(farmId, pageSize, pageNumber);
        }
        catch (Throwable th)
        {
            throw new PostServiceException(
                "Error performing 'PostService.getFarmPosts(String farmId, Integer pageSize, Integer pageNumber)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getFarmPosts(String, Integer, Integer)}
     * @param farmId String TODO: Model Documentation for PostService.getFarmPosts(farmId)
     * @param pageSize Integer TODO: Model Documentation for PostService.getFarmPosts(pageSize)
     * @param pageNumber Integer TODO: Model Documentation for PostService.getFarmPosts(pageNumber)
     * @return Page<PostVO>
     * @throws Exception
     */
    protected abstract Page<PostVO> handleGetFarmPosts(String farmId, Integer pageSize, Integer pageNumber)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}