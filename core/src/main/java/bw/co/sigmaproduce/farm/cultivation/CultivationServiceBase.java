// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::backend::bw.co.sigmaproduce::farm::cultivation::CultivationService
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.farm.cultivation;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;

/**
 * <p>
 * Spring Service base class for <code>CultivationService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see CultivationService
 */
public abstract class CultivationServiceBase
    implements CultivationService
{
    protected Logger logger = LoggerFactory.getLogger(CultivationService.class);
    protected final CultivationDao cultivationDao;
    protected final CultivationRepository cultivationRepository;
    protected final MessageSource messageSource;

    public CultivationServiceBase(
        CultivationDao cultivationDao,
        CultivationRepository cultivationRepository,
        MessageSource messageSource
    ) {
        this.cultivationDao = cultivationDao;
        this.cultivationRepository = cultivationRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>cultivation</code>'s DAO.
     * @return cultivationDao
     */
    protected CultivationDao getCultivationDao()
    {
        return this.cultivationDao;
    }

    /**
     * Gets the reference to <code>cultivation</code>'s repository.
     * @return cultivationRepository
     */
    public CultivationRepository getCultivationRepository() {
        return cultivationRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationVO findById(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.CultivationService.findById(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.findById(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(String)}
     * @param id String TODO: Model Documentation for CultivationService.findById(id)
     * @return CultivationVO
     * @throws Exception
     */
    protected abstract CultivationVO handleFindById(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CultivationListVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<CultivationListVO>
     * @throws Exception
     */
    protected abstract Collection<CultivationListVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.CultivationService.remove(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.remove(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(String)}
     * @param id String TODO: Model Documentation for CultivationService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationVO save(final CultivationVO cultivation)
    {
        if (cultivation == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.CultivationService.save(CultivationVO cultivation) - 'cultivation' can not be null");
        }
        try
        {
            return this.handleSave(cultivation);
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.save(CultivationVO cultivation)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(CultivationVO)}
     * @param cultivation CultivationVO TODO: Model Documentation for
CultivationService.save(cultivation)
     * @return CultivationVO
     * @throws Exception
     */
    protected abstract CultivationVO handleSave(CultivationVO cultivation)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CultivationListVO> search(final CultivationCriteria criteria)
    {
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.search(CultivationCriteria criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(CultivationCriteria)}
     * @param criteria CultivationCriteria TODO: Model Documentation for
CultivationService.search(criteria)
     * @return Collection<CultivationListVO>
     * @throws Exception
     */
    protected abstract Collection<CultivationListVO> handleSearch(CultivationCriteria criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<CultivationListVO> search(final Integer pageNumber, final Integer pageSize, final CultivationCriteria criteria)
    {
        if (criteria == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.CultivationService.search(Integer pageNumber, Integer pageSize, CultivationCriteria criteria) - 'criteria' can not be null");
        }
        try
        {
            return this.handleSearch(pageNumber, pageSize, criteria);
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.search(Integer pageNumber, Integer pageSize, CultivationCriteria criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(Integer, Integer, CultivationCriteria)}
     * @param pageNumber Integer TODO: Model Documentation for
CultivationService.search(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
CultivationService.search(pageSize)
     * @param criteria CultivationCriteria TODO: Model Documentation for
CultivationService.search(criteria)
     * @return Page<CultivationListVO>
     * @throws Exception
     */
    protected abstract Page<CultivationListVO> handleSearch(Integer pageNumber, Integer pageSize, CultivationCriteria criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<CultivationListVO> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new CultivationServiceException(
                "Error performing 'CultivationService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for
CultivationService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
CultivationService.getAll(pageSize)
     * @return Page<CultivationListVO>
     * @throws Exception
     */
    protected abstract Page<CultivationListVO> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}