// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm.post;

import bw.co.sigmaproduce.SigmaproduceSpecifications;
import bw.co.sigmaproduce.farm.FarmRepository;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see Post
 */
@Repository("postDao")
public class PostDaoImpl
    extends PostDaoBase
{
    
    public PostDaoImpl(
        FarmRepository farmRepository,
        PostRepository postRepository
    ) {

        super(
            farmRepository,
            postRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Post> handleFindFarmPosts(String farmId)
    {
        Specification<Post> spec = SigmaproduceSpecifications.findByAttribute(farmId, "farm", "id");
       
        return this.postRepository.findAll(spec, Sort.by(Direction.DESC, "createdDate"));
    }

    /**
     * {@inheritDoc}
     */ 
    @Override
    protected Page<Post> handleFindFarmPosts(String farmId, Integer pageSize, Integer pageNumber)
    {
        Specification<Post> spec = SigmaproduceSpecifications.findByAttribute(farmId, "farm", "id");

        return this.postRepository.findAll(spec, PageRequest.of(pageNumber, pageSize, Sort.by(Direction.DESC, "createdDate")));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toPostVO(
        Post source,
        PostVO target)
    {
        // TODO verify behavior of toPostVO
        super.toPostVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostVO toPostVO(final Post entity)
    {
        // TODO verify behavior of toPostVO
        return super.toPostVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Post loadPostFromPostVO(PostVO postVO)
    {
        if (postVO.getId() == null)
        {
            return  Post.Factory.newInstance();
        }
        else
        {
            return this.load(postVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Post postVOToEntity(PostVO postVO)
    {
        // TODO verify behavior of postVOToEntity
        Post entity = this.loadPostFromPostVO(postVO);
        this.postVOToEntity(postVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void postVOToEntity(
        PostVO source,
        Post target,
        boolean copyIfNull)
    {
        // TODO verify behavior of postVOToEntity
        super.postVOToEntity(source, target, copyIfNull);
    }
}