// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 06/12/2024 19:31:13+0200.
//
package bw.co.sigmaproduce.farm.post;

import bw.co.sigmaproduce.farm.Farm;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashSet;

/**
 * TODO: Model Documentation for Post
 */
@Entity
@Table(name = "POST")
// Uncomment to enable caching for Post
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQuery(name = "Post.findAll", query = "SELECT p FROM Post AS p")
// HibernateEntity.vsl annotations merge-point
public class Post
    implements Serializable, Comparable<Post>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 7633692225623628319L;

    // Generate 7 attributes
    private String id;

    /**
     * TODO: Model Documentation for Post.id
     * @return this.id String
     */
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Post.id
     * @param idIn String
     */
    public void setId(String idIn)
    {
        this.id = idIn;
    }

    private String createdBy;

    /**
     * TODO: Model Documentation for Post.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = false, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for Post.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private String updatedBy;

    /**
     * TODO: Model Documentation for Post.updatedBy
     * @return this.updatedBy String
     */
    @Column(name = "UPDATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for Post.updatedBy
     * @param updatedByIn String
     */
    public void setUpdatedBy(String updatedByIn)
    {
        this.updatedBy = updatedByIn;
    }

    private LocalDateTime updatedDate;

    /**
     * TODO: Model Documentation for Post.updatedDate
     * @return this.updatedDate LocalDateTime
     */
    @Column(name = "UPDATED_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for Post.updatedDate
     * @param updatedDateIn LocalDateTime
     */
    public void setUpdatedDate(LocalDateTime updatedDateIn)
    {
        this.updatedDate = updatedDateIn;
    }

    private LocalDateTime createdDate;

    /**
     * TODO: Model Documentation for Post.createdDate
     * @return this.createdDate LocalDateTime
     */
    @Column(name = "CREATED_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for Post.createdDate
     * @param createdDateIn LocalDateTime
     */
    public void setCreatedDate(LocalDateTime createdDateIn)
    {
        this.createdDate = createdDateIn;
    }

    private String content;

    /**
     * TODO: Model Documentation for Post.content
     * @return this.content String
     */
    @Lob
    @Column(name = "CONTENT", unique = false, nullable = true, insertable = true, updatable = true)
    public String getContent()
    {
        return this.content;
    }

    /**
     * TODO: Model Documentation for Post.content
     * @param contentIn String
     */
    public void setContent(String contentIn)
    {
        this.content = contentIn;
    }

    private Collection<File> images;

    /**
     * TODO: Model Documentation for Post.images
     * @return this.images Collection<File>
     */
    @ElementCollection
    public Collection<File> getImages()
    {
        return this.images;
    }

    /**
     * TODO: Model Documentation for Post.images
     * @param imagesIn Collection<File>
     */
    public void setImages(Collection<File> imagesIn)
    {
        this.images = imagesIn;
    }

    // Generate 1 associations
    private Collection<Farm> farms = new HashSet<Farm>();

    /**
     * TODO: Model Documentation for Farm
     * @return this.farms Collection<Farm>
     */
    @ManyToMany( mappedBy = "posts")
    public Collection<Farm> getFarms()
    {
        return this.farms;
    }

    /**
     * TODO: Model Documentation for Farm
     * @param farmsIn Collection<Farm>
     */
    public void setFarms(Collection<Farm> farmsIn)
    {
        this.farms = farmsIn;
    }

    /**
     * TODO: Model Documentation for Farm
     * @param elementToAdd Farm
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addFarms(Farm elementToAdd)
    {
        return this.farms.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Farm
     * @param elementToRemove Farm
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeFarms(Farm elementToRemove)
    {
        return this.farms.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an Post instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Post))
        {
            return false;
        }
        final Post that = (Post)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Post}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Post}.
         * @return new Post()
         */
        public static Post newInstance()
        {
            return new Post();
        }

        /**
         * Constructs a new instance of {@link Post}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdBy String
         * @param createdDate LocalDateTime
         * @return newInstance
         */
        public static Post newInstance(String createdBy, LocalDateTime createdDate)
        {
            final Post entity = new Post();
            entity.setCreatedBy(createdBy);
            entity.setCreatedDate(createdDate);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Post}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param createdBy String
         * @param updatedBy String
         * @param updatedDate LocalDateTime
         * @param createdDate LocalDateTime
         * @param content String
         * @param images Collection<File>
         * @param farms Collection<Farm>
         * @return newInstance Post
         */
        public static Post newInstance(String createdBy, String updatedBy, LocalDateTime updatedDate, LocalDateTime createdDate, String content, Collection<File> images, Collection<Farm> farms)
        {
            final Post entity = new Post();
            entity.setCreatedBy(createdBy);
            entity.setUpdatedBy(updatedBy);
            entity.setUpdatedDate(updatedDate);
            entity.setCreatedDate(createdDate);
            entity.setContent(content);
            entity.setImages(images);
            entity.setFarms(farms);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Post other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getUpdatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedBy().compareTo(other.getUpdatedBy()));
            }
            if (this.getUpdatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedDate().compareTo(other.getUpdatedDate()));
            }
            if (this.getCreatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedDate().compareTo(other.getCreatedDate()));
            }
            if (this.getContent() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getContent().compareTo(other.getContent()));
            }
            if (this.getImages() != null)
            {
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.getImages().size()-other.getImages().size()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Post(");
        sb.append(" id=").append(getId());
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" updatedBy=").append(getUpdatedBy());
        sb.append(" updatedDate=").append(getUpdatedDate());
        sb.append(" createdDate=").append(getCreatedDate());
        sb.append(" content=").append(getContent());
        sb.append(" images=").append(getImages());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}