// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.farm.cultivation;

import bw.co.sigmaproduce.crop.variety.CropVariety;
import bw.co.sigmaproduce.farm.Farm;
import bw.co.sigmaproduce.farm.Unit;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;

/**
 * TODO: Model Documentation for Cultivation
 * @see Cultivation
 */
public interface CultivationDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link Cultivation}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link CultivationVO}.
     */
    public static final int TRANSFORM_CULTIVATIONVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toCultivationVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toCultivationVO(
        Cultivation source,
        CultivationVO target);

    /**
     * Converts this DAO's entity to an object of type {@link CultivationVO}.
     * @param entity
     * @return CultivationVO
     */
    public CultivationVO toCultivationVO(Cultivation entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link CultivationVO}.
     * @param entities
     * @return Collection<CultivationVO>
     */
    public Collection<CultivationVO> toCultivationVOCollection(Collection<Cultivation> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link CultivationVO}.
     * @param entities
     * @return CultivationVO[]
     */
    public CultivationVO[] toCultivationVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link CultivationVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void cultivationVOToEntity(
        CultivationVO source,
        Cultivation target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link CultivationVO} to this DAO's entity.
     * @param cultivationVO
     * @return Cultivation
     */
    public Cultivation cultivationVOToEntity(CultivationVO cultivationVO);

    /**
     * Converts a Collection of instances of type {@link CultivationVO} to this
     * DAO's entity.
     * @param instances
     */
    public void cultivationVOToEntityCollection(Collection<?> instances);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link CultivationListVO}.
     */
    public static final int TRANSFORM_CULTIVATIONLISTVO = 2;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toCultivationListVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toCultivationListVO(
        Cultivation source,
        CultivationListVO target);

    /**
     * Converts this DAO's entity to an object of type {@link CultivationListVO}.
     * @param entity
     * @return CultivationListVO
     */
    public CultivationListVO toCultivationListVO(Cultivation entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link CultivationListVO}.
     * @param entities
     * @return Collection<CultivationListVO>
     */
    public Collection<CultivationListVO> toCultivationListVOCollection(Collection<Cultivation> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link CultivationListVO}.
     * @param entities
     * @return CultivationListVO[]
     */
    public CultivationListVO[] toCultivationListVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link CultivationListVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void cultivationListVOToEntity(
        CultivationListVO source,
        Cultivation target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link CultivationListVO} to this DAO's entity.
     * @param cultivationListVO
     * @return Cultivation
     */
    public Cultivation cultivationListVOToEntity(CultivationListVO cultivationListVO);

    /**
     * Converts a Collection of instances of type {@link CultivationListVO} to this
     * DAO's entity.
     * @param instances
     */
    public void cultivationListVOToEntityCollection(Collection<?> instances);

    /**
     * Gets an instance of Cultivation from the persistent store.
     * @param id
     * @return Cultivation
     */
    public Cultivation get(String id);

    /**
     * <p>
     * Does the same thing as {@link #get(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, String id);

    /**
     * Loads an instance of Cultivation from the persistent store.
     * @param id
     * @return Cultivation
     */
    public Cultivation load(String id);

    /**
     * <p>
     * Does the same thing as {@link #load(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, String id);

    /**
     * Loads all entities of type {@link Cultivation}.
     *
     * @return the loaded entities.
     */
    public Collection<Cultivation> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of Cultivation and adds it to the persistent store.
     * @param cultivation
     * @return Cultivation
     */
    public Cultivation create(Cultivation cultivation);

    /**
     * <p>
     * Does the same thing as {@link #create(Cultivation)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param cultivation
     * @return Object
     */
    public Object create(int transform, Cultivation cultivation);

    /**
     * Creates a new instance of Cultivation and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of Cultivation
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<Cultivation> create(Collection<Cultivation> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(Cultivation)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<Cultivation> entities);

    /**
     * <p>
     * Creates a new <code>Cultivation</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param createdBy TODO: Model Documentation for Cultivation.createdBy
     * @param updatedBy TODO: Model Documentation for Cultivation.updatedBy
     * @param updatedDate TODO: Model Documentation for Cultivation.updatedDate
     * @param createdDate TODO: Model Documentation for Cultivation.createdDate
     * @param cultivationDate TODO: Model Documentation for Cultivation.cultivationDate
     * @param exptectedHarvestDate TODO: Model Documentation for Cultivation.exptectedHarvestDate
     * @param size TODO: Model Documentation for Cultivation.size
     * @param unit TODO: Model Documentation for Cultivation.unit
     * @return Cultivation
     */
    public Cultivation create(
        String createdBy,
        String updatedBy,
        LocalDateTime updatedDate,
        LocalDateTime createdDate,
        LocalDate cultivationDate,
        LocalDate exptectedHarvestDate,
        Double size,
        Unit unit);

    /**
     * <p>
     * Does the same thing as {@link #create(String, String, LocalDateTime, LocalDateTime, LocalDate, LocalDate, Double, Unit)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param createdBy TODO: Model Documentation for Cultivation.createdBy
     * @param updatedBy TODO: Model Documentation for Cultivation.updatedBy
     * @param updatedDate TODO: Model Documentation for Cultivation.updatedDate
     * @param createdDate TODO: Model Documentation for Cultivation.createdDate
     * @param cultivationDate TODO: Model Documentation for Cultivation.cultivationDate
     * @param exptectedHarvestDate TODO: Model Documentation for Cultivation.exptectedHarvestDate
     * @param size TODO: Model Documentation for Cultivation.size
     * @param unit TODO: Model Documentation for Cultivation.unit
     * @return Cultivation
     */
    public Object create(
        int transform,
        String createdBy,
        String updatedBy,
        LocalDateTime updatedDate,
        LocalDateTime createdDate,
        LocalDate cultivationDate,
        LocalDate exptectedHarvestDate,
        Double size,
        Unit unit);

    /**
     * <p>
     * Creates a new <code>Cultivation</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     * @param createdBy
     * @param createdDate
     * @param cropVariety
     * @param farm
     * @return Cultivation
     */
    public Cultivation create(
        String createdBy,
        LocalDateTime createdDate,
        CropVariety cropVariety,
        Farm farm);

    /**
     * <p>
     * Does the same thing as {@link #create(String, LocalDateTime)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform flag to determine transformation type.
     * @param createdBy
     * @param createdDate
     * @param cropVariety
     * @param farm
     * @return Object
     */
    public Object create(
        int transform,
        String createdBy,
        LocalDateTime createdDate,
        CropVariety cropVariety,
        Farm farm);

    /**
     * Updates the <code>cultivation</code> instance in the persistent store.
     * @param cultivation
     */
    public void update(Cultivation cultivation);

    /**
     * Create or Update the <code>cultivation</code> instance in the persistent store.
     * @param cultivation
     * @return Cultivation
     */
    public Cultivation createOrUpdate(Cultivation cultivation);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<Cultivation> entities);

    /**
     * Removes the instance of Cultivation from the persistent store.
     * @param cultivation
     */
    public void remove(Cultivation cultivation);

    /**
     * Removes the instance of Cultivation having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(String id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<Cultivation> entities);


    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>bw.co.sigmaproduce.farm.cultivation.CultivationDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Cultivation} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link CultivationVO} - {@link #TRANSFORM_CULTIVATIONVO}</li>
     *   <li>{@link CultivationListVO} - {@link #TRANSFORM_CULTIVATIONLISTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link bw.co.sigmaproduce.farm.cultivation.CultivationDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final Cultivation entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,Cultivation)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>bw.co.sigmaproduce.farm.cultivation.CultivationDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,Cultivation)
     */
    public void transformEntities(final int transform, final Collection<?> entities);


    // spring-dao merge-point
}