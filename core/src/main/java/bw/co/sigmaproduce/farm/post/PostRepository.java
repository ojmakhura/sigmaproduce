// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.farm.post;

import java.io.File;
import java.time.LocalDateTime;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface PostRepository extends 
        JpaRepository<Post, String>,
        JpaSpecificationExecutor<Post> {

    // Generating pageable query method for id
    Page<Post> findByIdNull(Pageable pageable);

    Page<Post> findByIdStartingWithIgnoreCase(String id, Pageable pageable);
    
    Page<Post> findByIdEndingWithIgnoreCase(String id, Pageable pageable);
    
    Page<Post> findByIdContainingIgnoreCase(String id, Pageable pageable);
    
    Page<Post> findByIdLikeIgnoreCase(String id, Pageable pageable);
    
    Page<Post> findByIdNotLikeIgnoreCase(String id, Pageable pageable);
    
    Page<Post> findByIdContaining(String id, Pageable pageable);
    
    // Search by a list of parameters
    List<Post> findByIdNot(String id);
    Page<Post> findByIdNot(String id, Pageable pageable);
    
    List<Post> findByIdIn(List<String> ids);
    Page<Post> findByIdIn(List<String> ids, Pageable pageable);
    
    List<Post> findByIdNotIn(List<String> ids);
    Page<Post> findByIdNotIn(List<String> ids, Pageable pageable);

    // Generating pageable query method for createdBy
    Page<Post> findByCreatedBy(String createdBy, Pageable pageable);

    Page<Post> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Post> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Post> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Post> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Post> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Post> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    List<Post> findByCreatedByNot(String createdBy);
    Page<Post> findByCreatedByNot(String createdBy, Pageable pageable);
    
    List<Post> findByCreatedByIn(List<String> createdBys);
    Page<Post> findByCreatedByIn(List<String> createdBys, Pageable pageable);
    
    List<Post> findByCreatedByNotIn(List<String> createdBys);
    Page<Post> findByCreatedByNotIn(List<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<Post> findByUpdatedByNull(Pageable pageable);

    Page<Post> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Post> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Post> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Post> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Post> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Post> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    List<Post> findByUpdatedByNot(String updatedBy);
    Page<Post> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    List<Post> findByUpdatedByIn(List<String> updatedBys);
    Page<Post> findByUpdatedByIn(List<String> updatedBys, Pageable pageable);
    
    List<Post> findByUpdatedByNotIn(List<String> updatedBys);
    Page<Post> findByUpdatedByNotIn(List<String> updatedBys, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<Post> findByUpdatedDateNull(Pageable pageable);

    Page<Post> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<Post> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<Post> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<Post> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<Post> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    List<Post> findByUpdatedDateIn(List<LocalDateTime> updatedDates);
    Page<Post> findByUpdatedDateIn(List<LocalDateTime> updatedDates, Pageable pageable);
    
    List<Post> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates);
    Page<Post> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<Post> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<Post> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<Post> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<Post> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<Post> findByCreatedDateNot(LocalDateTime createdDate);
    Page<Post> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    List<Post> findByCreatedDateIn(List<LocalDateTime> createdDates);
    Page<Post> findByCreatedDateIn(List<LocalDateTime> createdDates, Pageable pageable);
    
    List<Post> findByCreatedDateNotIn(List<LocalDateTime> createdDates);
    Page<Post> findByCreatedDateNotIn(List<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for content
    Page<Post> findByContentNull(Pageable pageable);

    Page<Post> findByContentStartingWithIgnoreCase(String content, Pageable pageable);
    
    Page<Post> findByContentEndingWithIgnoreCase(String content, Pageable pageable);
    
    Page<Post> findByContentContainingIgnoreCase(String content, Pageable pageable);
    
    Page<Post> findByContentLikeIgnoreCase(String content, Pageable pageable);
    
    Page<Post> findByContentNotLikeIgnoreCase(String content, Pageable pageable);
    
    Page<Post> findByContentContaining(String content, Pageable pageable);
    
    // Search by a list of parameters
    List<Post> findByContentNot(String content);
    Page<Post> findByContentNot(String content, Pageable pageable);
    
    List<Post> findByContentIn(List<String> contents);
    Page<Post> findByContentIn(List<String> contents, Pageable pageable);
    
    List<Post> findByContentNotIn(List<String> contents);
    Page<Post> findByContentNotIn(List<String> contents, Pageable pageable);

    // Search by a list of parameters
    List<Post> findByImagesNot(File images);
    Page<Post> findByImagesNot(File images, Pageable pageable);
    
    List<Post> findByImagesIn(List<File> imagess);
    Page<Post> findByImagesIn(List<File> imagess, Pageable pageable);
    
    List<Post> findByImagesNotIn(List<File> imagess);
    Page<Post> findByImagesNotIn(List<File> imagess, Pageable pageable);

}