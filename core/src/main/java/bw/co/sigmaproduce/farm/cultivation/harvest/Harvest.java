// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 06/12/2024 19:31:12+0200.
//
package bw.co.sigmaproduce.farm.cultivation.harvest;

import bw.co.sigmaproduce.farm.cultivation.Cultivation;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Collection;

/**
 * TODO: Model Documentation for Harvest
 */
@Entity
@Table(name = "HARVEST")
// Uncomment to enable caching for Harvest
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQuery(name = "Harvest.findAll", query = "SELECT h FROM Harvest AS h")
// HibernateEntity.vsl annotations merge-point
public class Harvest
    implements Serializable, Comparable<Harvest>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1711109599728371372L;

    // Generate 6 attributes
    private String id;

    /**
     * TODO: Model Documentation for Harvest.id
     * @return this.id String
     */
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Harvest.id
     * @param idIn String
     */
    public void setId(String idIn)
    {
        this.id = idIn;
    }

    private String createdBy;

    /**
     * TODO: Model Documentation for Harvest.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = false, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for Harvest.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private LocalDate harvestDate;

    /**
     * TODO: Model Documentation for Harvest.harvestDate
     * @return this.harvestDate LocalDate
     */
    @Column(name = "HARVEST_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDate getHarvestDate()
    {
        return this.harvestDate;
    }

    /**
     * TODO: Model Documentation for Harvest.harvestDate
     * @param harvestDateIn LocalDate
     */
    public void setHarvestDate(LocalDate harvestDateIn)
    {
        this.harvestDate = harvestDateIn;
    }

    private Integer quantity = Integer.valueOf(0);

    /**
     * TODO: Model Documentation for Harvest.quantity
     * @return this.quantity Integer
     */
    @Column(name = "QUANTITY", unique = false, nullable = true, insertable = true, updatable = true)
    public Integer getQuantity()
    {
        return this.quantity;
    }

    /**
     * TODO: Model Documentation for Harvest.quantity
     * @param quantityIn Integer
     */
    public void setQuantity(Integer quantityIn)
    {
        this.quantity = quantityIn;
    }

    private HarvestUnit unit;

    /**
     * TODO: Model Documentation for Harvest.unit
     * @return this.unit HarvestUnit
     */
    @Column(name = "UNIT", unique = false, nullable = false, insertable = true, updatable = true)
    @Enumerated(EnumType.STRING)
    public HarvestUnit getUnit()
    {
        return this.unit;
    }

    /**
     * TODO: Model Documentation for Harvest.unit
     * @param unitIn HarvestUnit
     */
    public void setUnit(HarvestUnit unitIn)
    {
        this.unit = unitIn;
    }

    private Collection<File> images;

    /**
     * TODO: Model Documentation for Harvest.images
     * @return this.images Collection<File>
     */
    @ElementCollection
    public Collection<File> getImages()
    {
        return this.images;
    }

    /**
     * TODO: Model Documentation for Harvest.images
     * @param imagesIn Collection<File>
     */
    public void setImages(Collection<File> imagesIn)
    {
        this.images = imagesIn;
    }

    // Generate 1 associations
    private Cultivation cultivation;

    /**
     * TODO: Model Documentation for Cultivation
     * @return this.cultivation Cultivation
     */
    @ManyToOne(optional = false,  fetch = FetchType.LAZY)
    @JoinColumn(name = "CULTIVATION_FK")
    public Cultivation getCultivation()
    {
        return this.cultivation;
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param cultivationIn Cultivation
     */
    public void setCultivation(Cultivation cultivationIn)
    {
        this.cultivation = cultivationIn;
    }

    /**
     * Returns <code>true</code> if the argument is an Harvest instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Harvest))
        {
            return false;
        }
        final Harvest that = (Harvest)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Harvest}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Harvest}.
         * @return new Harvest()
         */
        public static Harvest newInstance()
        {
            return new Harvest();
        }

        /**
         * Constructs a new instance of {@link Harvest}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdBy String
         * @param harvestDate LocalDate
         * @param unit HarvestUnit
         * @param cultivation Cultivation
         * @return newInstance
         */
        public static Harvest newInstance(String createdBy, LocalDate harvestDate, HarvestUnit unit, Cultivation cultivation)
        {
            final Harvest entity = new Harvest();
            entity.setCreatedBy(createdBy);
            entity.setHarvestDate(harvestDate);
            entity.setUnit(unit);
            entity.setCultivation(cultivation);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Harvest}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param createdBy String
         * @param harvestDate LocalDate
         * @param quantity Integer
         * @param unit HarvestUnit
         * @param images Collection<File>
         * @param cultivation Cultivation
         * @return newInstance Harvest
         */
        public static Harvest newInstance(String createdBy, LocalDate harvestDate, Integer quantity, HarvestUnit unit, Collection<File> images, Cultivation cultivation)
        {
            final Harvest entity = new Harvest();
            entity.setCreatedBy(createdBy);
            entity.setHarvestDate(harvestDate);
            entity.setQuantity(quantity);
            entity.setUnit(unit);
            entity.setImages(images);
            entity.setCultivation(cultivation);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Harvest other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getHarvestDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getHarvestDate().compareTo(other.getHarvestDate()));
            }
            if (this.getQuantity() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getQuantity().compareTo(other.getQuantity()));
            }
            if (this.getUnit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUnit().compareTo(other.getUnit()));
            }
            if (this.getImages() != null)
            {
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.getImages().size()-other.getImages().size()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Harvest(");
        sb.append(" id=").append(getId());
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" harvestDate=").append(getHarvestDate());
        sb.append(" quantity=").append(getQuantity());
        sb.append(" unit=").append(getUnit());
        sb.append(" images=").append(getImages());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}