// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.farm;

import java.io.File;
import java.time.LocalDateTime;
import java.util.Collection;

/**
 * TODO: Model Documentation for Farm
 * @see Farm
 */
public interface FarmDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link Farm}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link FarmVO}.
     */
    public static final int TRANSFORM_FARMVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toFarmVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toFarmVO(
        Farm source,
        FarmVO target);

    /**
     * Converts this DAO's entity to an object of type {@link FarmVO}.
     * @param entity
     * @return FarmVO
     */
    public FarmVO toFarmVO(Farm entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link FarmVO}.
     * @param entities
     * @return Collection<FarmVO>
     */
    public Collection<FarmVO> toFarmVOCollection(Collection<Farm> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link FarmVO}.
     * @param entities
     * @return FarmVO[]
     */
    public FarmVO[] toFarmVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link FarmVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void farmVOToEntity(
        FarmVO source,
        Farm target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link FarmVO} to this DAO's entity.
     * @param farmVO
     * @return Farm
     */
    public Farm farmVOToEntity(FarmVO farmVO);

    /**
     * Converts a Collection of instances of type {@link FarmVO} to this
     * DAO's entity.
     * @param instances
     */
    public void farmVOToEntityCollection(Collection<?> instances);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link FarmListVO}.
     */
    public static final int TRANSFORM_FARMLISTVO = 2;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toFarmListVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toFarmListVO(
        Farm source,
        FarmListVO target);

    /**
     * Converts this DAO's entity to an object of type {@link FarmListVO}.
     * @param entity
     * @return FarmListVO
     */
    public FarmListVO toFarmListVO(Farm entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link FarmListVO}.
     * @param entities
     * @return Collection<FarmListVO>
     */
    public Collection<FarmListVO> toFarmListVOCollection(Collection<Farm> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link FarmListVO}.
     * @param entities
     * @return FarmListVO[]
     */
    public FarmListVO[] toFarmListVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link FarmListVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void farmListVOToEntity(
        FarmListVO source,
        Farm target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link FarmListVO} to this DAO's entity.
     * @param farmListVO
     * @return Farm
     */
    public Farm farmListVOToEntity(FarmListVO farmListVO);

    /**
     * Converts a Collection of instances of type {@link FarmListVO} to this
     * DAO's entity.
     * @param instances
     */
    public void farmListVOToEntityCollection(Collection<?> instances);

    /**
     * Gets an instance of Farm from the persistent store.
     * @param id
     * @return Farm
     */
    public Farm get(String id);

    /**
     * <p>
     * Does the same thing as {@link #get(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, String id);

    /**
     * Loads an instance of Farm from the persistent store.
     * @param id
     * @return Farm
     */
    public Farm load(String id);

    /**
     * <p>
     * Does the same thing as {@link #load(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, String id);

    /**
     * Loads all entities of type {@link Farm}.
     *
     * @return the loaded entities.
     */
    public Collection<Farm> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of Farm and adds it to the persistent store.
     * @param farm
     * @return Farm
     */
    public Farm create(Farm farm);

    /**
     * <p>
     * Does the same thing as {@link #create(Farm)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param farm
     * @return Object
     */
    public Object create(int transform, Farm farm);

    /**
     * Creates a new instance of Farm and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of Farm
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<Farm> create(Collection<Farm> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(Farm)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<Farm> entities);

    /**
     * <p>
     * Creates a new <code>Farm</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param createdBy TODO: Model Documentation for Farm.createdBy
     * @param updatedBy TODO: Model Documentation for Farm.updatedBy
     * @param updatedDate TODO: Model Documentation for Farm.updatedDate
     * @param createdDate TODO: Model Documentation for Farm.createdDate
     * @param name TODO: Model Documentation for Farm.name
     * @param ownerId TODO: Model Documentation for Farm.ownerId
     * @param latitude TODO: Model Documentation for Farm.latitude
     * @param longitude TODO: Model Documentation for Farm.longitude
     * @param description TODO: Model Documentation for Farm.description
     * @param size TODO: Model Documentation for Farm.size
     * @param unit TODO: Model Documentation for Farm.unit
     * @param photos TODO: Model Documentation for Farm.photos
     * @return Farm
     */
    public Farm create(
        String createdBy,
        String updatedBy,
        LocalDateTime updatedDate,
        LocalDateTime createdDate,
        String name,
        String ownerId,
        Double latitude,
        Double longitude,
        String description,
        Double size,
        Unit unit,
        Collection<File> photos);

    /**
     * <p>
     * Does the same thing as {@link #create(String, String, LocalDateTime, LocalDateTime, String, String, Double, Double, String, Double, Unit, File)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param createdBy TODO: Model Documentation for Farm.createdBy
     * @param updatedBy TODO: Model Documentation for Farm.updatedBy
     * @param updatedDate TODO: Model Documentation for Farm.updatedDate
     * @param createdDate TODO: Model Documentation for Farm.createdDate
     * @param name TODO: Model Documentation for Farm.name
     * @param ownerId TODO: Model Documentation for Farm.ownerId
     * @param latitude TODO: Model Documentation for Farm.latitude
     * @param longitude TODO: Model Documentation for Farm.longitude
     * @param description TODO: Model Documentation for Farm.description
     * @param size TODO: Model Documentation for Farm.size
     * @param unit TODO: Model Documentation for Farm.unit
     * @param photos TODO: Model Documentation for Farm.photos
     * @return Farm
     */
    public Object create(
        int transform,
        String createdBy,
        String updatedBy,
        LocalDateTime updatedDate,
        LocalDateTime createdDate,
        String name,
        String ownerId,
        Double latitude,
        Double longitude,
        String description,
        Double size,
        Unit unit,
        Collection<File> photos);


    /**
     * Updates the <code>farm</code> instance in the persistent store.
     * @param farm
     */
    public void update(Farm farm);

    /**
     * Create or Update the <code>farm</code> instance in the persistent store.
     * @param farm
     * @return Farm
     */
    public Farm createOrUpdate(Farm farm);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<Farm> entities);

    /**
     * Removes the instance of Farm from the persistent store.
     * @param farm
     */
    public void remove(Farm farm);

    /**
     * Removes the instance of Farm having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(String id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<Farm> entities);


    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>bw.co.sigmaproduce.farm.FarmDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Farm} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link FarmVO} - {@link #TRANSFORM_FARMVO}</li>
     *   <li>{@link FarmListVO} - {@link #TRANSFORM_FARMLISTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link bw.co.sigmaproduce.farm.FarmDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final Farm entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,Farm)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>bw.co.sigmaproduce.farm.FarmDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,Farm)
     */
    public void transformEntities(final int transform, final Collection<?> entities);

    /**
     * Searches for a single instance of Farm.
     * @param name the unique name to be used in the search.'
     * @return a single instance of Farm.
     */
    public Farm searchUniqueName(final String name);

    /**
     * Searches for a single instance of Farm.
     * @param transform the transformation flag.
     * @param name the unique name to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueName(final int transform, final String name);

    /**
     * Searches for a single instance of Farm.
     * @param photos the unique photos to be used in the search.'
     * @return a single instance of Farm.
     */
    public Farm searchUniquePhotos(final File photos);

    /**
     * Searches for a single instance of Farm.
     * @param transform the transformation flag.
     * @param photos the unique photos to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniquePhotos(final int transform, final File photos);


    // spring-dao merge-point
}