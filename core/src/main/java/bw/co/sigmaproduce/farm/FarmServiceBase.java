// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::backend::bw.co.sigmaproduce::farm::FarmService
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.farm;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;

/**
 * <p>
 * Spring Service base class for <code>FarmService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see FarmService
 */
public abstract class FarmServiceBase
    implements FarmService
{
    protected Logger logger = LoggerFactory.getLogger(FarmService.class);
    protected final FarmDao farmDao;
    protected final FarmRepository farmRepository;
    protected final MessageSource messageSource;

    public FarmServiceBase(
        FarmDao farmDao,
        FarmRepository farmRepository,
        MessageSource messageSource
    ) {
        this.farmDao = farmDao;
        this.farmRepository = farmRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>farm</code>'s DAO.
     * @return farmDao
     */
    protected FarmDao getFarmDao()
    {
        return this.farmDao;
    }

    /**
     * Gets the reference to <code>farm</code>'s repository.
     * @return farmRepository
     */
    public FarmRepository getFarmRepository() {
        return farmRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmListVO findById(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.findById(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.findById(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(String)}
     * @param id String TODO: Model Documentation for FarmService.findById(id)
     * @return FarmListVO
     * @throws Exception
     */
    protected abstract FarmListVO handleFindById(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<FarmListVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<FarmListVO>
     * @throws Exception
     */
    protected abstract Collection<FarmListVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<FarmListVO> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for FarmService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for FarmService.getAll(pageSize)
     * @return Page<FarmListVO>
     * @throws Exception
     */
    protected abstract Page<FarmListVO> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.remove(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.remove(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(String)}
     * @param id String TODO: Model Documentation for FarmService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmVO save(final FarmVO farm)
    {
        if (farm == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.save(FarmVO farm) - 'farm' can not be null");
        }
        if (farm.getName() == null || farm.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.save(FarmVO farm) - 'farm.name' can not be null or empty");
        }
        if (farm.getOwner() == null || farm.getOwner().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.save(FarmVO farm) - 'farm.owner' can not be null or empty");
        }
        if (farm.getOwnerId() == null || farm.getOwnerId().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.save(FarmVO farm) - 'farm.ownerId' can not be null or empty");
        }
        try
        {
            return this.handleSave(farm);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.save(FarmVO farm)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(FarmVO)}
     * @param farm FarmVO TODO: Model Documentation for FarmService.save(farm)
     * @return FarmVO
     * @throws Exception
     */
    protected abstract FarmVO handleSave(FarmVO farm)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<FarmListVO> search(final FarmCriteria criteria)
    {
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.search(FarmCriteria criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(FarmCriteria)}
     * @param criteria FarmCriteria TODO: Model Documentation for FarmService.search(criteria)
     * @return Collection<FarmListVO>
     * @throws Exception
     */
    protected abstract Collection<FarmListVO> handleSearch(FarmCriteria criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<FarmListVO> search(final Integer pageNumber, final Integer pageSize, final FarmCriteria criteria)
    {
        if (criteria == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.search(Integer pageNumber, Integer pageSize, FarmCriteria criteria) - 'criteria' can not be null");
        }
        try
        {
            return this.handleSearch(pageNumber, pageSize, criteria);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.search(Integer pageNumber, Integer pageSize, FarmCriteria criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(Integer, Integer, FarmCriteria)}
     * @param pageNumber Integer TODO: Model Documentation for FarmService.search(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for FarmService.search(pageSize)
     * @param criteria FarmCriteria TODO: Model Documentation for FarmService.search(criteria)
     * @return Page<FarmListVO>
     * @throws Exception
     */
    protected abstract Page<FarmListVO> handleSearch(Integer pageNumber, Integer pageSize, FarmCriteria criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmListVO findByVillage(final String villageId)
    {
        if (villageId == null || villageId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.findByVillage(String villageId) - 'villageId' can not be null or empty");
        }
        try
        {
            return this.handleFindByVillage(villageId);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.findByVillage(String villageId)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findByVillage(String)}
     * @param villageId String TODO: Model Documentation for FarmService.findByVillage(villageId)
     * @return FarmListVO
     * @throws Exception
     */
    protected abstract FarmListVO handleFindByVillage(String villageId)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmListVO findByDistrict(final String districtId)
    {
        if (districtId == null || districtId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.FarmService.findByDistrict(String districtId) - 'districtId' can not be null or empty");
        }
        try
        {
            return this.handleFindByDistrict(districtId);
        }
        catch (Throwable th)
        {
            throw new FarmServiceException(
                "Error performing 'FarmService.findByDistrict(String districtId)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findByDistrict(String)}
     * @param districtId String TODO: Model Documentation for FarmService.findByDistrict(districtId)
     * @return FarmListVO
     * @throws Exception
     */
    protected abstract FarmListVO handleFindByDistrict(String districtId)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}