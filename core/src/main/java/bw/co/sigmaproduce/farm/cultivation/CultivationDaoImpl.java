// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm.cultivation;

import bw.co.sigmaproduce.crop.variety.CropVarietyRepository;
import bw.co.sigmaproduce.farm.Farm;
import bw.co.sigmaproduce.farm.FarmListVO;
import bw.co.sigmaproduce.farm.FarmRepository;
import bw.co.sigmaproduce.farm.cultivation.harvest.HarvestRepository;
import bw.co.sigmaproduce.farm.cultivation.problem.CultivationProblemRepository;

import org.springframework.stereotype.Repository;

/**
 * @see Cultivation
 */
@Repository("cultivationDao")
public class CultivationDaoImpl
        extends CultivationDaoBase {

    public CultivationDaoImpl(
            FarmRepository farmRepository,
            CropVarietyRepository cropVarietyRepository,
            HarvestRepository harvestRepository,
            CultivationProblemRepository cultivationProblemRepository,
            CultivationRepository cultivationRepository) {

        super(farmRepository, cropVarietyRepository, harvestRepository, cultivationProblemRepository,
                cultivationRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationVO(
            Cultivation source,
            CultivationVO target) {
        // TODO verify behavior of toCultivationVO
        super.toCultivationVO(source, target);
        // WARNING! No conversion for target.farm (can't convert
        // source.getFarm():bw.co.sigmaproduce.farm.Farm to
        // bw.co.sigmaproduce.farm.FarmListVO
        if (source.getFarm() != null) {
            FarmListVO farm = new FarmListVO();
            farm.setId(source.getFarm().getId());
            farm.setName(source.getFarm().getName());
            // farm.setOwner(source.getFarm().getOwner());
            // farm.setLatitude(source.getFarm().getLatitude());
            // farm.setLongitude(source.getFarm().getLongitude());

            target.setFarm(farm);
        }

        // WARNING! No conversion for target.cropVariety (can't convert
        // source.getCropVariety():bw.co.sigmaproduce.crop.variety.CropVariety to
        // bw.co.sigmaproduce.crop.variety.CropVarietyList

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationVO toCultivationVO(final Cultivation entity) {
        // TODO verify behavior of toCultivationVO
        return super.toCultivationVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Cultivation loadCultivationFromCultivationVO(CultivationVO cultivationVO) {
        // TODO implement loadCultivationFromCultivationVO
        throw new UnsupportedOperationException(
                "bw.co.sigmaproduce.farm.cultivation.loadCultivationFromCultivationVO(CultivationVO) not yet implemented.");

        /*
         * A typical implementation looks like this:
         * if (cultivationVO.getId() == null)
         * {
         * return Cultivation.Factory.newInstance();
         * }
         * else
         * {
         * return this.load(cultivationVO.getId());
         * }
         */
    }

    /**
     * {@inheritDoc}
     */
    public Cultivation cultivationVOToEntity(CultivationVO cultivationVO) {
        // TODO verify behavior of cultivationVOToEntity
        Cultivation entity = this.loadCultivationFromCultivationVO(cultivationVO);
        this.cultivationVOToEntity(cultivationVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationVOToEntity(
            CultivationVO source,
            Cultivation target,
            boolean copyIfNull) {
        // TODO verify behavior of cultivationVOToEntity
        super.cultivationVOToEntity(source, target, copyIfNull);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationListVO(
            Cultivation source,
            CultivationListVO target) {
        // TODO verify behavior of toCultivationListVO
        super.toCultivationListVO(source, target);
        // WARNING! No conversion for target.cropVariety (can't convert
        // source.getCropVariety():bw.co.sigmaproduce.crop.variety.CropVariety to
        // java.lang.String
        // WARNING! No conversion for target.farm (can't convert
        // source.getFarm():bw.co.sigmaproduce.farm.Farm to java.lang.String
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationListVO toCultivationListVO(final Cultivation entity) {
        // TODO verify behavior of toCultivationListVO
        return super.toCultivationListVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Cultivation loadCultivationFromCultivationListVO(CultivationListVO cultivationListVO) {
        // TODO implement loadCultivationFromCultivationListVO
        throw new UnsupportedOperationException(
                "bw.co.sigmaproduce.farm.cultivation.loadCultivationFromCultivationListVO(CultivationListVO) not yet implemented.");

        /*
         * A typical implementation looks like this:
         * if (cultivationListVO.getId() == null)
         * {
         * return Cultivation.Factory.newInstance();
         * }
         * else
         * {
         * return this.load(cultivationListVO.getId());
         * }
         */
    }

    /**
     * {@inheritDoc}
     */
    public Cultivation cultivationListVOToEntity(CultivationListVO cultivationListVO) {
        // TODO verify behavior of cultivationListVOToEntity
        Cultivation entity = this.loadCultivationFromCultivationListVO(cultivationListVO);
        this.cultivationListVOToEntity(cultivationListVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationListVOToEntity(
            CultivationListVO source,
            Cultivation target,
            boolean copyIfNull) {
        // TODO verify behavior of cultivationListVOToEntity
        super.cultivationListVOToEntity(source, target, copyIfNull);
    }
}