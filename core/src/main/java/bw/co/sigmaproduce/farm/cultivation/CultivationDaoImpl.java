// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm.cultivation;

import bw.co.sigmaproduce.crop.variety.CropVarietyRepository;
import bw.co.sigmaproduce.farm.Farm;
import bw.co.sigmaproduce.farm.FarmListDTO;
import bw.co.sigmaproduce.farm.FarmRepository;
import bw.co.sigmaproduce.farm.cultivation.harvest.HarvestRepository;
import bw.co.sigmaproduce.farm.cultivation.problem.CultivationProblemRepository;

import org.springframework.stereotype.Repository;

/**
 * @see Cultivation
 */
@Repository("cultivationDao")
public class CultivationDaoImpl
        extends CultivationDaoBase {

    public CultivationDaoImpl(
            FarmRepository farmRepository,
            CropVarietyRepository cropVarietyRepository,
            HarvestRepository harvestRepository,
            CultivationProblemRepository cultivationProblemRepository,
            CultivationRepository cultivationRepository) {

        super(farmRepository, cropVarietyRepository, harvestRepository, cultivationProblemRepository,
                cultivationRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationDTO(
            Cultivation source,
            CultivationDTO target) {
        // TODO verify behavior of toCultivationDTO
        super.toCultivationDTO(source, target);
        // WARNING! No conversion for target.farm (can't convert
        // source.getFarm():bw.co.sigmaproduce.farm.Farm to
        // bw.co.sigmaproduce.farm.FarmListDTO
        if (source.getFarm() != null) {
            FarmListDTO farm = new FarmListDTO();
            farm.setId(source.getFarm().getId());
            farm.setName(source.getFarm().getName());
            // farm.setOwner(source.getFarm().getOwner());
            // farm.setLatitude(source.getFarm().getLatitude());
            // farm.setLongitude(source.getFarm().getLongitude());

            target.setFarm(farm);
        }

        // WARNING! No conversion for target.cropVariety (can't convert
        // source.getCropVariety():bw.co.sigmaproduce.crop.variety.CropVariety to
        // bw.co.sigmaproduce.crop.variety.CropVarietyList

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationDTO toCultivationDTO(final Cultivation entity) {
        // TODO verify behavior of toCultivationDTO
        return super.toCultivationDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Cultivation loadCultivationFromCultivationDTO(CultivationDTO cultivationDTO) {
        // TODO implement loadCultivationFromCultivationDTO
        throw new UnsupportedOperationException(
                "bw.co.sigmaproduce.farm.cultivation.loadCultivationFromCultivationDTO(CultivationDTO) not yet implemented.");

        /*
         * A typical implementation looks like this:
         * if (cultivationDTO.getId() == null)
         * {
         * return Cultivation.Factory.newInstance();
         * }
         * else
         * {
         * return this.load(cultivationDTO.getId());
         * }
         */
    }

    /**
     * {@inheritDoc}
     */
    public Cultivation cultivationDTOToEntity(CultivationDTO cultivationDTO) {
        // TODO verify behavior of cultivationDTOToEntity
        Cultivation entity = this.loadCultivationFromCultivationDTO(cultivationDTO);
        this.cultivationDTOToEntity(cultivationDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationDTOToEntity(
            CultivationDTO source,
            Cultivation target,
            boolean copyIfNull) {
        // TODO verify behavior of cultivationDTOToEntity
        super.cultivationDTOToEntity(source, target, copyIfNull);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationListDTO(
            Cultivation source,
            CultivationListDTO target) {
        // TODO verify behavior of toCultivationListDTO
        super.toCultivationListDTO(source, target);
        // WARNING! No conversion for target.cropVariety (can't convert
        // source.getCropVariety():bw.co.sigmaproduce.crop.variety.CropVariety to
        // java.lang.String
        // WARNING! No conversion for target.farm (can't convert
        // source.getFarm():bw.co.sigmaproduce.farm.Farm to java.lang.String
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationListDTO toCultivationListDTO(final Cultivation entity) {
        // TODO verify behavior of toCultivationListDTO
        return super.toCultivationListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Cultivation loadCultivationFromCultivationListDTO(CultivationListDTO cultivationListDTO) {
        // TODO implement loadCultivationFromCultivationListDTO
        throw new UnsupportedOperationException(
                "bw.co.sigmaproduce.farm.cultivation.loadCultivationFromCultivationListDTO(CultivationListDTO) not yet implemented.");

        /*
         * A typical implementation looks like this:
         * if (cultivationListDTO.getId() == null)
         * {
         * return Cultivation.Factory.newInstance();
         * }
         * else
         * {
         * return this.load(cultivationListDTO.getId());
         * }
         */
    }

    /**
     * {@inheritDoc}
     */
    public Cultivation cultivationListDTOToEntity(CultivationListDTO cultivationListDTO) {
        // TODO verify behavior of cultivationListDTOToEntity
        Cultivation entity = this.loadCultivationFromCultivationListDTO(cultivationListDTO);
        this.cultivationListDTOToEntity(cultivationListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationListDTOToEntity(
            CultivationListDTO source,
            Cultivation target,
            boolean copyIfNull) {
        // TODO verify behavior of cultivationListDTOToEntity
        super.cultivationListDTOToEntity(source, target, copyIfNull);
    }
}