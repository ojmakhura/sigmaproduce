// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.farm.cultivation.problem;

import java.io.File;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface CultivationProblemRepository extends 
        JpaRepository<CultivationProblem, String>,
        JpaSpecificationExecutor<CultivationProblem> {

    // Generating pageable query method for id
    Page<CultivationProblem> findByIdNull(Pageable pageable);

    Page<CultivationProblem> findByIdStartingWithIgnoreCase(String id, Pageable pageable);
    
    Page<CultivationProblem> findByIdEndingWithIgnoreCase(String id, Pageable pageable);
    
    Page<CultivationProblem> findByIdContainingIgnoreCase(String id, Pageable pageable);
    
    Page<CultivationProblem> findByIdLikeIgnoreCase(String id, Pageable pageable);
    
    Page<CultivationProblem> findByIdNotLikeIgnoreCase(String id, Pageable pageable);
    
    Page<CultivationProblem> findByIdContaining(String id, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByIdNot(String id);
    Page<CultivationProblem> findByIdNot(String id, Pageable pageable);
    
    List<CultivationProblem> findByIdIn(List<String> ids);
    Page<CultivationProblem> findByIdIn(List<String> ids, Pageable pageable);
    
    List<CultivationProblem> findByIdNotIn(List<String> ids);
    Page<CultivationProblem> findByIdNotIn(List<String> ids, Pageable pageable);

    // Generating pageable query method for createdBy
    Page<CultivationProblem> findByCreatedBy(String createdBy, Pageable pageable);

    Page<CultivationProblem> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByCreatedByNot(String createdBy);
    Page<CultivationProblem> findByCreatedByNot(String createdBy, Pageable pageable);
    
    List<CultivationProblem> findByCreatedByIn(List<String> createdBys);
    Page<CultivationProblem> findByCreatedByIn(List<String> createdBys, Pageable pageable);
    
    List<CultivationProblem> findByCreatedByNotIn(List<String> createdBys);
    Page<CultivationProblem> findByCreatedByNotIn(List<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<CultivationProblem> findByUpdatedByNull(Pageable pageable);

    Page<CultivationProblem> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByUpdatedByNot(String updatedBy);
    Page<CultivationProblem> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    List<CultivationProblem> findByUpdatedByIn(List<String> updatedBys);
    Page<CultivationProblem> findByUpdatedByIn(List<String> updatedBys, Pageable pageable);
    
    List<CultivationProblem> findByUpdatedByNotIn(List<String> updatedBys);
    Page<CultivationProblem> findByUpdatedByNotIn(List<String> updatedBys, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<CultivationProblem> findByUpdatedDateNull(Pageable pageable);

    Page<CultivationProblem> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CultivationProblem> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<CultivationProblem> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    List<CultivationProblem> findByUpdatedDateIn(List<LocalDateTime> updatedDates);
    Page<CultivationProblem> findByUpdatedDateIn(List<LocalDateTime> updatedDates, Pageable pageable);
    
    List<CultivationProblem> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates);
    Page<CultivationProblem> findByUpdatedDateNotIn(List<LocalDateTime> updatedDates, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<CultivationProblem> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<CultivationProblem> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<CultivationProblem> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByCreatedDateNot(LocalDateTime createdDate);
    Page<CultivationProblem> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    List<CultivationProblem> findByCreatedDateIn(List<LocalDateTime> createdDates);
    Page<CultivationProblem> findByCreatedDateIn(List<LocalDateTime> createdDates, Pageable pageable);
    
    List<CultivationProblem> findByCreatedDateNotIn(List<LocalDateTime> createdDates);
    Page<CultivationProblem> findByCreatedDateNotIn(List<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for description
    Page<CultivationProblem> findByDescription(String description, Pageable pageable);

    Page<CultivationProblem> findByDescriptionStartingWithIgnoreCase(String description, Pageable pageable);
    
    Page<CultivationProblem> findByDescriptionEndingWithIgnoreCase(String description, Pageable pageable);
    
    Page<CultivationProblem> findByDescriptionContainingIgnoreCase(String description, Pageable pageable);
    
    Page<CultivationProblem> findByDescriptionLikeIgnoreCase(String description, Pageable pageable);
    
    Page<CultivationProblem> findByDescriptionNotLikeIgnoreCase(String description, Pageable pageable);
    
    Page<CultivationProblem> findByDescriptionContaining(String description, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByDescriptionNot(String description);
    Page<CultivationProblem> findByDescriptionNot(String description, Pageable pageable);
    
    List<CultivationProblem> findByDescriptionIn(List<String> descriptions);
    Page<CultivationProblem> findByDescriptionIn(List<String> descriptions, Pageable pageable);
    
    List<CultivationProblem> findByDescriptionNotIn(List<String> descriptions);
    Page<CultivationProblem> findByDescriptionNotIn(List<String> descriptions, Pageable pageable);

    // Search by a list of parameters
    List<CultivationProblem> findByPhotosNot(File photos);
    Page<CultivationProblem> findByPhotosNot(File photos, Pageable pageable);
    
    List<CultivationProblem> findByPhotosIn(List<File> photoss);
    Page<CultivationProblem> findByPhotosIn(List<File> photoss, Pageable pageable);
    
    List<CultivationProblem> findByPhotosNotIn(List<File> photoss);
    Page<CultivationProblem> findByPhotosNotIn(List<File> photoss, Pageable pageable);

    // Generating pageable query method for dateNoticed
    Page<CultivationProblem> findByDateNoticed(LocalDate dateNoticed, Pageable pageable);

    Page<CultivationProblem> findByDateNoticedAfter(LocalDate dateNoticed, Pageable pageable);
    
    Page<CultivationProblem> findByDateNoticedBefore(LocalDate dateNoticed, Pageable pageable);
    
    Page<CultivationProblem> findByDateNoticedBetween(LocalDate dateNoticedStart, LocalDate dateNoticedEnd, Pageable pageable);
    
    // Search by a list of parameters
    List<CultivationProblem> findByDateNoticedNot(LocalDate dateNoticed);
    Page<CultivationProblem> findByDateNoticedNot(LocalDate dateNoticed, Pageable pageable);
    
    List<CultivationProblem> findByDateNoticedIn(List<LocalDate> dateNoticeds);
    Page<CultivationProblem> findByDateNoticedIn(List<LocalDate> dateNoticeds, Pageable pageable);
    
    List<CultivationProblem> findByDateNoticedNotIn(List<LocalDate> dateNoticeds);
    Page<CultivationProblem> findByDateNoticedNotIn(List<LocalDate> dateNoticeds, Pageable pageable);

}