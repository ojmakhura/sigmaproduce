// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 06/12/2024 19:31:12+0200.
//
package bw.co.sigmaproduce.farm;

import bw.co.sigmaproduce.farm.cultivation.Cultivation;
import bw.co.sigmaproduce.farm.post.Post;
import bw.co.sigmaproduce.village.Village;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import java.io.File;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashSet;

/**
 * TODO: Model Documentation for Farm
 */
@Entity
@Table(name = "FARM")
// Uncomment to enable caching for Farm
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQuery(name = "Farm.findAll", query = "SELECT f FROM Farm AS f")
// HibernateEntity.vsl annotations merge-point
public class Farm
    implements Serializable, Comparable<Farm>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 4696638959789173709L;

    // Generate 13 attributes
    private String id;

    /**
     * TODO: Model Documentation for Farm.id
     * @return this.id String
     */
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public String getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Farm.id
     * @param idIn String
     */
    public void setId(String idIn)
    {
        this.id = idIn;
    }

    private String createdBy;

    /**
     * TODO: Model Documentation for Farm.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = false, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for Farm.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private String updatedBy;

    /**
     * TODO: Model Documentation for Farm.updatedBy
     * @return this.updatedBy String
     */
    @Column(name = "UPDATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for Farm.updatedBy
     * @param updatedByIn String
     */
    public void setUpdatedBy(String updatedByIn)
    {
        this.updatedBy = updatedByIn;
    }

    private LocalDateTime updatedDate;

    /**
     * TODO: Model Documentation for Farm.updatedDate
     * @return this.updatedDate LocalDateTime
     */
    @Column(name = "UPDATED_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for Farm.updatedDate
     * @param updatedDateIn LocalDateTime
     */
    public void setUpdatedDate(LocalDateTime updatedDateIn)
    {
        this.updatedDate = updatedDateIn;
    }

    private LocalDateTime createdDate;

    /**
     * TODO: Model Documentation for Farm.createdDate
     * @return this.createdDate LocalDateTime
     */
    @Column(name = "CREATED_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for Farm.createdDate
     * @param createdDateIn LocalDateTime
     */
    public void setCreatedDate(LocalDateTime createdDateIn)
    {
        this.createdDate = createdDateIn;
    }

    private String name;

    /**
     * TODO: Model Documentation for Farm.name
     * @return this.name String
     */
    @Column(name = "NAME", unique = true, nullable = false, insertable = true, updatable = true)
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for Farm.name
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private String ownerId;

    /**
     * TODO: Model Documentation for Farm.ownerId
     * @return this.ownerId String
     */
    @Column(name = "OWNER_ID", unique = false, nullable = false, insertable = true, updatable = true)
    public String getOwnerId()
    {
        return this.ownerId;
    }

    /**
     * TODO: Model Documentation for Farm.ownerId
     * @param ownerIdIn String
     */
    public void setOwnerId(String ownerIdIn)
    {
        this.ownerId = ownerIdIn;
    }

    private Double latitude;

    /**
     * TODO: Model Documentation for Farm.latitude
     * @return this.latitude Double
     */
    @Column(name = "LATITUDE", unique = false, nullable = true, insertable = true, updatable = true)
    public Double getLatitude()
    {
        return this.latitude;
    }

    /**
     * TODO: Model Documentation for Farm.latitude
     * @param latitudeIn Double
     */
    public void setLatitude(Double latitudeIn)
    {
        this.latitude = latitudeIn;
    }

    private Double longitude;

    /**
     * TODO: Model Documentation for Farm.longitude
     * @return this.longitude Double
     */
    @Column(name = "LONGITUDE", unique = false, nullable = true, insertable = true, updatable = true)
    public Double getLongitude()
    {
        return this.longitude;
    }

    /**
     * TODO: Model Documentation for Farm.longitude
     * @param longitudeIn Double
     */
    public void setLongitude(Double longitudeIn)
    {
        this.longitude = longitudeIn;
    }

    private String description;

    /**
     * TODO: Model Documentation for Farm.description
     * @return this.description String
     */
    @Lob
    @Column(name = "DESCRIPTION", unique = false, nullable = true, insertable = true, updatable = true)
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for Farm.description
     * @param descriptionIn String
     */
    public void setDescription(String descriptionIn)
    {
        this.description = descriptionIn;
    }

    private Double size;

    /**
     * TODO: Model Documentation for Farm.size
     * @return this.size Double
     */
    @Column(name = "SIZE", unique = false, nullable = true, insertable = true, updatable = true)
    public Double getSize()
    {
        return this.size;
    }

    /**
     * TODO: Model Documentation for Farm.size
     * @param sizeIn Double
     */
    public void setSize(Double sizeIn)
    {
        this.size = sizeIn;
    }

    private Unit unit;

    /**
     * TODO: Model Documentation for Farm.unit
     * @return this.unit Unit
     */
    @Column(name = "UNIT", unique = false, nullable = true, insertable = true, updatable = true)
    @Enumerated(EnumType.STRING)
    public Unit getUnit()
    {
        return this.unit;
    }

    /**
     * TODO: Model Documentation for Farm.unit
     * @param unitIn Unit
     */
    public void setUnit(Unit unitIn)
    {
        this.unit = unitIn;
    }

    private Collection<File> photos;

    /**
     * TODO: Model Documentation for Farm.photos
     * @return this.photos Collection<File>
     */
    @ElementCollection
    public Collection<File> getPhotos()
    {
        return this.photos;
    }

    /**
     * TODO: Model Documentation for Farm.photos
     * @param photosIn Collection<File>
     */
    public void setPhotos(Collection<File> photosIn)
    {
        this.photos = photosIn;
    }

    // Generate 4 associations
    private Village nearestVillage;

    /**
     * TODO: Model Documentation for Village
     * @return this.nearestVillage Village
     */
    @OneToOne( fetch = FetchType.LAZY)
    @JoinColumn(name = "NEAREST_VILLAGE_FK", nullable = true)
    public Village getNearestVillage()
    {
        return this.nearestVillage;
    }

    /**
     * TODO: Model Documentation for Village
     * @param nearestVillageIn Village
     */
    public void setNearestVillage(Village nearestVillageIn)
    {
        this.nearestVillage = nearestVillageIn;
    }

    private Collection<Post> posts = new HashSet<Post>();

    /**
     * TODO: Model Documentation for Post
     * @return this.posts Collection<Post>
     */
    @ManyToMany()
    @JoinTable
    (
        name = "FARMS2POSTS",
        joinColumns = {@JoinColumn(name = "FARMS_FK")},
        inverseJoinColumns = {@JoinColumn(name = "POSTS_FK")}
    )
    public Collection<Post> getPosts()
    {
        return this.posts;
    }

    /**
     * TODO: Model Documentation for Post
     * @param postsIn Collection<Post>
     */
    public void setPosts(Collection<Post> postsIn)
    {
        this.posts = postsIn;
    }

    /**
     * TODO: Model Documentation for Post
     * @param elementToAdd Post
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPosts(Post elementToAdd)
    {
        return this.posts.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Post
     * @param elementToRemove Post
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePosts(Post elementToRemove)
    {
        return this.posts.remove(elementToRemove);
    }

    private Collection<Farm> alliedFarms = new HashSet<Farm>();

    /**
     * TODO: Model Documentation for Farm
     * @return this.alliedFarms Collection<Farm>
     */
    @OneToMany() 
    @JoinTable
    (
        name = "ALLIED_FARMS2FARM",
        joinColumns = {@JoinColumn(name = "FARM_FK")},
        inverseJoinColumns = {@JoinColumn(name = "ALLIED_FARMS_FK")}
    )
    public Collection<Farm> getAlliedFarms()
    {
        return this.alliedFarms;
    }

    /**
     * TODO: Model Documentation for Farm
     * @param alliedFarmsIn Collection<Farm>
     */
    public void setAlliedFarms(Collection<Farm> alliedFarmsIn)
    {
        this.alliedFarms = alliedFarmsIn;
    }

    /**
     * TODO: Model Documentation for Farm
     * @param elementToAdd Farm
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addAlliedFarms(Farm elementToAdd)
    {
        return this.alliedFarms.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Farm
     * @param elementToRemove Farm
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeAlliedFarms(Farm elementToRemove)
    {
        return this.alliedFarms.remove(elementToRemove);
    }

    private Collection<Cultivation> cultivations = new HashSet<Cultivation>();

    /**
     * TODO: Model Documentation for Cultivation
     * @return this.cultivations Collection<Cultivation>
     */
    @OneToMany( mappedBy = "farm") 
    public Collection<Cultivation> getCultivations()
    {
        return this.cultivations;
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param cultivationsIn Collection<Cultivation>
     */
    public void setCultivations(Collection<Cultivation> cultivationsIn)
    {
        this.cultivations = cultivationsIn;
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param elementToAdd Cultivation
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addCultivations(Cultivation elementToAdd)
    {
        return this.cultivations.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Cultivation
     * @param elementToRemove Cultivation
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeCultivations(Cultivation elementToRemove)
    {
        return this.cultivations.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an Farm instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Farm))
        {
            return false;
        }
        final Farm that = (Farm)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Farm}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Farm}.
         * @return new Farm()
         */
        public static Farm newInstance()
        {
            return new Farm();
        }

        /**
         * Constructs a new instance of {@link Farm}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdBy String
         * @param createdDate LocalDateTime
         * @param name String
         * @param ownerId String
         * @return newInstance
         */
        public static Farm newInstance(String createdBy, LocalDateTime createdDate, String name, String ownerId)
        {
            final Farm entity = new Farm();
            entity.setCreatedBy(createdBy);
            entity.setCreatedDate(createdDate);
            entity.setName(name);
            entity.setOwnerId(ownerId);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Farm}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param createdBy String
         * @param updatedBy String
         * @param updatedDate LocalDateTime
         * @param createdDate LocalDateTime
         * @param name String
         * @param ownerId String
         * @param latitude Double
         * @param longitude Double
         * @param description String
         * @param size Double
         * @param unit Unit
         * @param photos Collection<File>
         * @param nearestVillage Village
         * @param posts Collection<Post>
         * @param alliedFarms Collection<Farm>
         * @param cultivations Collection<Cultivation>
         * @return newInstance Farm
         */
        public static Farm newInstance(String createdBy, String updatedBy, LocalDateTime updatedDate, LocalDateTime createdDate, String name, String ownerId, Double latitude, Double longitude, String description, Double size, Unit unit, Collection<File> photos, Village nearestVillage, Collection<Post> posts, Collection<Farm> alliedFarms, Collection<Cultivation> cultivations)
        {
            final Farm entity = new Farm();
            entity.setCreatedBy(createdBy);
            entity.setUpdatedBy(updatedBy);
            entity.setUpdatedDate(updatedDate);
            entity.setCreatedDate(createdDate);
            entity.setName(name);
            entity.setOwnerId(ownerId);
            entity.setLatitude(latitude);
            entity.setLongitude(longitude);
            entity.setDescription(description);
            entity.setSize(size);
            entity.setUnit(unit);
            entity.setPhotos(photos);
            entity.setNearestVillage(nearestVillage);
            entity.setPosts(posts);
            entity.setAlliedFarms(alliedFarms);
            entity.setCultivations(cultivations);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Farm other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getUpdatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedBy().compareTo(other.getUpdatedBy()));
            }
            if (this.getUpdatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedDate().compareTo(other.getUpdatedDate()));
            }
            if (this.getCreatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedDate().compareTo(other.getCreatedDate()));
            }
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(other.getName()));
            }
            if (this.getOwnerId() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getOwnerId().compareTo(other.getOwnerId()));
            }
            if (this.getLatitude() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getLatitude().compareTo(other.getLatitude()));
            }
            if (this.getLongitude() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getLongitude().compareTo(other.getLongitude()));
            }
            if (this.getDescription() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDescription().compareTo(other.getDescription()));
            }
            if (this.getSize() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getSize().compareTo(other.getSize()));
            }
            if (this.getUnit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUnit().compareTo(other.getUnit()));
            }
            if (this.getPhotos() != null)
            {
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.getPhotos().size()-other.getPhotos().size()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Farm(");
        sb.append(" id=").append(getId());
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" updatedBy=").append(getUpdatedBy());
        sb.append(" updatedDate=").append(getUpdatedDate());
        sb.append(" createdDate=").append(getCreatedDate());
        sb.append(" name=").append(getName());
        sb.append(" ownerId=").append(getOwnerId());
        sb.append(" latitude=").append(getLatitude());
        sb.append(" longitude=").append(getLongitude());
        sb.append(" description=").append(getDescription());
        sb.append(" size=").append(getSize());
        sb.append(" unit=").append(getUnit());
        sb.append(" photos=").append(getPhotos());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}