// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::backend::bw.co.sigmaproduce::farm::cultivation::harvest::HarvestService
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.farm.cultivation.harvest;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;

/**
 * <p>
 * Spring Service base class for <code>HarvestService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see HarvestService
 */
public abstract class HarvestServiceBase
    implements HarvestService
{
    protected Logger logger = LoggerFactory.getLogger(HarvestService.class);
    protected final HarvestDao harvestDao;
    protected final HarvestRepository harvestRepository;
    protected final MessageSource messageSource;

    public HarvestServiceBase(
        HarvestDao harvestDao,
        HarvestRepository harvestRepository,
        MessageSource messageSource
    ) {
        this.harvestDao = harvestDao;
        this.harvestRepository = harvestRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>harvest</code>'s DAO.
     * @return harvestDao
     */
    protected HarvestDao getHarvestDao()
    {
        return this.harvestDao;
    }

    /**
     * Gets the reference to <code>harvest</code>'s repository.
     * @return harvestRepository
     */
    public HarvestRepository getHarvestRepository() {
        return harvestRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HarvestVO findById(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.findById(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.findById(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(String)}
     * @param id String TODO: Model Documentation for
HarvestService.findById(id)
     * @return HarvestVO
     * @throws Exception
     */
    protected abstract HarvestVO handleFindById(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<HarvestList> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<HarvestList>
     * @throws Exception
     */
    protected abstract Collection<HarvestList> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final String id)
    {
        if (id == null || id.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.remove(String id) - 'id' can not be null or empty");
        }
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.remove(String id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(String)}
     * @param id String TODO: Model Documentation for HarvestService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(String id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public HarvestVO save(final HarvestVO harvest)
    {
        if (harvest == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.save(HarvestVO harvest) - 'harvest' can not be null");
        }
        if (harvest.getCreatedBy() == null || harvest.getCreatedBy().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.save(HarvestVO harvest) - 'harvest.createdBy' can not be null or empty");
        }
        if (harvest.getHarvestDate() == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.save(HarvestVO harvest) - 'harvest.harvestDate' can not be null");
        }
        if (harvest.getUnit() == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.save(HarvestVO harvest) - 'harvest.unit' can not be null");
        }
        if (harvest.getCultivation() == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.save(HarvestVO harvest) - 'harvest.cultivation' can not be null");
        }
        try
        {
            return this.handleSave(harvest);
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.save(HarvestVO harvest)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(HarvestVO)}
     * @param harvest HarvestVO TODO: Model Documentation for
HarvestService.save(harvest)
     * @return HarvestVO
     * @throws Exception
     */
    protected abstract HarvestVO handleSave(HarvestVO harvest)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<HarvestList> search(final HarvestCriteria criteria)
    {
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.search(HarvestCriteria criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(HarvestCriteria)}
     * @param criteria HarvestCriteria TODO: Model Documentation for
HarvestService.search(criteria)
     * @return Collection<HarvestList>
     * @throws Exception
     */
    protected abstract Collection<HarvestList> handleSearch(HarvestCriteria criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<HarvestList> search(final Integer pageNumber, final Integer pageSize, final HarvestCriteria criteria)
    {
        if (criteria == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.cultivation.harvest.HarvestService.search(Integer pageNumber, Integer pageSize, HarvestCriteria criteria) - 'criteria' can not be null");
        }
        try
        {
            return this.handleSearch(pageNumber, pageSize, criteria);
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.search(Integer pageNumber, Integer pageSize, HarvestCriteria criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(Integer, Integer, HarvestCriteria)}
     * @param pageNumber Integer TODO: Model Documentation for
HarvestService.search(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
HarvestService.search(pageSize)
     * @param criteria HarvestCriteria TODO: Model Documentation for
HarvestService.search(criteria)
     * @return Page<HarvestList>
     * @throws Exception
     */
    protected abstract Page<HarvestList> handleSearch(Integer pageNumber, Integer pageSize, HarvestCriteria criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<HarvestList> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new HarvestServiceException(
                "Error performing 'HarvestService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for
HarvestService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
HarvestService.getAll(pageSize)
     * @return Page<HarvestList>
     * @throws Exception
     */
    protected abstract Page<HarvestList> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}