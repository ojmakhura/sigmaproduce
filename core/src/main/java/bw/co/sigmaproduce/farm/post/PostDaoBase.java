// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4or5=true hibernateVersion=6.1.6.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.farm.post;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>bw.co.sigmaproduce.farm.post.Post</code>.
 * </p>
 *
 * @see bw.co.sigmaproduce.farm.post.Post
 */
public abstract class PostDaoBase
    implements bw.co.sigmaproduce.farm.post.PostDao
{

    protected final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(PostDaoBase.class);

    protected final bw.co.sigmaproduce.farm.post.PostRepository postRepository;

    protected bw.co.sigmaproduce.farm.FarmDao farmDao;
    protected final bw.co.sigmaproduce.farm.FarmRepository farmRepository;

    public PostDaoBase(
        bw.co.sigmaproduce.farm.FarmRepository farmRepository,
        bw.co.sigmaproduce.farm.post.PostRepository postRepository
    ) {
        this.postRepository = postRepository;
        this.farmRepository = farmRepository;
    }

    /**
     * Sets the reference to <code>farmDao</code>.
     * @param farmDaoIn
     */
    @org.springframework.beans.factory.annotation.Autowired
    public void setFarmDao(@org.springframework.context.annotation.Lazy bw.co.sigmaproduce.farm.FarmDao farmDaoIn)
    {
        this.farmDao = farmDaoIn;
    }
    
    /**
     * Gets the reference to <code>farmDao</code>.
     * @return farmDao
     */
    protected bw.co.sigmaproduce.farm.FarmDao getFarmDao()
    {
        return this.farmDao;
    }

    /**
     * Gets the reference to <code>farmRepository</code>.
     * @return farmRepository
     */
    protected bw.co.sigmaproduce.farm.FarmRepository getFarmRepository()
    {
        return this.farmRepository;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final java.lang.String id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Post.get - 'id' can not be null");
        }
        java.util.Optional<bw.co.sigmaproduce.farm.post.Post> entity = postRepository.findById(id);
        return transformEntity(transform, entity.get());
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.farm.post.Post get(java.lang.String id)
    {
        return (bw.co.sigmaproduce.farm.post.Post)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final java.lang.String id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Post.load - 'id' can not be null");
        }
        java.util.Optional<bw.co.sigmaproduce.farm.post.Post> entity = postRepository.findById(id);
        return transformEntity(transform, entity.get());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.farm.post.Post load(java.lang.String id)
    {
        return (bw.co.sigmaproduce.farm.post.Post)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.farm.post.Post> loadAll()
    {
        return (java.util.Collection<bw.co.sigmaproduce.farm.post.Post>) this.loadAll(bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
		
        final java.util.Collection<?> results = postRepository.findAll();
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param post bw.co.sigmaproduce.farm.post.Post
     */
    protected void _prePersist(final bw.co.sigmaproduce.farm.post.Post post)
    {
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param post bw.co.sigmaproduce.farm.post.Post
     */
    protected void _postPersist(final bw.co.sigmaproduce.farm.post.Post post)
    {
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param post bw.co.sigmaproduce.farm.post.Post
     */
    protected void _preUpdate(final bw.co.sigmaproduce.farm.post.Post post)
    {
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param post bw.co.sigmaproduce.farm.post.Post
     */
    protected void _postUpdate(final bw.co.sigmaproduce.farm.post.Post post)
    {
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param post bw.co.sigmaproduce.farm.post.Post
     */
    protected void _preRemove(final bw.co.sigmaproduce.farm.post.Post post)
    {
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param post bw.co.sigmaproduce.farm.post.Post
     */
    protected void _postRemove(final bw.co.sigmaproduce.farm.post.Post post)
    {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.farm.post.Post create(bw.co.sigmaproduce.farm.post.Post post)
    {
        return (bw.co.sigmaproduce.farm.post.Post)this.create(bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE, post);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, bw.co.sigmaproduce.farm.post.Post post)
    {
        if (post == null)
        {
            throw new IllegalArgumentException(
                "Post.create - 'post' can not be null");
        }

        //prePersist event
        _prePersist(post);

        post = this.postRepository.save(post);

        //postPersist event
        _postPersist(post);

        return this.transformEntity(transform, post);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.farm.post.Post> create(final java.util.Collection<bw.co.sigmaproduce.farm.post.Post> entities)
    {
        return (java.util.Collection<bw.co.sigmaproduce.farm.post.Post>) create(bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> create(final int transform, final java.util.Collection<bw.co.sigmaproduce.farm.post.Post> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Post.create - 'entities' can not be null");
        }
        java.util.Collection<Object> transformed = new java.util.ArrayList<Object>();
        for (bw.co.sigmaproduce.farm.post.Post entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.farm.post.Post create(
        java.lang.String createdBy,
        java.lang.String updatedBy,
        java.time.LocalDateTime updatedDate,
        java.time.LocalDateTime createdDate,
        java.lang.String content,
        java.util.Collection<java.io.File> images)
    {
        return (bw.co.sigmaproduce.farm.post.Post)this.create(bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE, createdBy, updatedBy, updatedDate, createdDate, content, images);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        java.lang.String createdBy,
        java.lang.String updatedBy,
        java.time.LocalDateTime updatedDate,
        java.time.LocalDateTime createdDate,
        java.lang.String content,
        java.util.Collection<java.io.File> images)
    {
        bw.co.sigmaproduce.farm.post.Post entity = new bw.co.sigmaproduce.farm.post.Post();
        entity.setCreatedBy(createdBy);
        entity.setUpdatedBy(updatedBy);
        entity.setUpdatedDate(updatedDate);
        entity.setCreatedDate(createdDate);
        entity.setContent(content);
        entity.setImages(images);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(bw.co.sigmaproduce.farm.post.Post post)
    {
        if (post == null)
        {
            throw new IllegalArgumentException(
                "Post.update - 'post' can not be null");
        }

        //preUpdate event
        _preUpdate(post);

        post = this.postRepository.save(post);

        //postUpdate event
        _postUpdate(post);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final java.util.Collection<bw.co.sigmaproduce.farm.post.Post> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Post.update - 'entities' can not be null");
        }
        for (bw.co.sigmaproduce.farm.post.Post entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(bw.co.sigmaproduce.farm.post.Post post)
    {
        if (post == null)
        {
            throw new IllegalArgumentException(
                "Post.remove - 'post' can not be null");
        }
        //preRemove event
        _preRemove(post);

        this.postRepository.delete(post);

        //postRemove event
        _postRemove(post);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(java.lang.String id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Post.remove - 'id' can not be null");
        }
        bw.co.sigmaproduce.farm.post.Post entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(java.util.Collection<bw.co.sigmaproduce.farm.post.Post> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Post.remove - 'entities' can not be null");
        }
        for (bw.co.sigmaproduce.farm.post.Post entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.postRepository.delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<bw.co.sigmaproduce.farm.post.Post> findFarmPosts(final java.lang.String farmId)
    {
        if (farmId == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostDao.findFarmPosts(java.lang.String farmId) - 'farmId' can not be null");
        }
        try
        {
            return this.handleFindFarmPosts(farmId);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'bw.co.sigmaproduce.farm.post.PostDao.findFarmPosts(java.lang.String farmId)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #findFarmPosts(java.lang.String)}
     * @param farmId
     * @return java.util.Collection<bw.co.sigmaproduce.farm.post.Post>
     * @throws Exception
     */
    protected abstract java.util.Collection<bw.co.sigmaproduce.farm.post.Post> handleFindFarmPosts(java.lang.String farmId)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public org.springframework.data.domain.Page<bw.co.sigmaproduce.farm.post.Post> findFarmPosts(final java.lang.String farmId, final java.lang.Integer pageSize, final java.lang.Integer pageNumber)
    {
        if (farmId == null)
        {
            throw new IllegalArgumentException(
                "bw.co.sigmaproduce.farm.post.PostDao.findFarmPosts(java.lang.String farmId, java.lang.Integer pageSize, java.lang.Integer pageNumber) - 'farmId' can not be null");
        }
        try
        {
            return this.handleFindFarmPosts(farmId, pageSize, pageNumber);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'bw.co.sigmaproduce.farm.post.PostDao.findFarmPosts(java.lang.String farmId, java.lang.Integer pageSize, java.lang.Integer pageNumber)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #findFarmPosts(java.lang.String, java.lang.Integer, java.lang.Integer)}
     * @param farmId
     * @param pageSize
     * @param pageNumber
     * @return org.springframework.data.domain.Page<bw.co.sigmaproduce.farm.post.Post>
     * @throws Exception
     */
    protected abstract org.springframework.data.domain.Page<bw.co.sigmaproduce.farm.post.Post> handleFindFarmPosts(java.lang.String farmId, java.lang.Integer pageSize, java.lang.Integer pageNumber)
        throws Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>bw.co.sigmaproduce.farm.post.PostDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link bw.co.sigmaproduce.farm.post.Post} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link bw.co.sigmaproduce.farm.post.PostVO} - {@link #TRANSFORM_POSTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link bw.co.sigmaproduce.farm.post.PostDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see bw.co.sigmaproduce.farm.post.PostDao#transformEntity(int, bw.co.sigmaproduce.farm.post.Post)
     */
    @Override
    public Object transformEntity(final int transform, final bw.co.sigmaproduce.farm.post.Post entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_POSTVO :
                    target = toPostVO(entity);
                    break;
                case bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final java.util.Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_POSTVO :
                org.apache.commons.collections4.CollectionUtils.transform(entities, this.POSTVO_TRANSFORMER);
                break;
            case bw.co.sigmaproduce.farm.post.PostDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see bw.co.sigmaproduce.farm.post.PostDao#toEntities(java.util.Collection)
     */
    @Override
    public void toEntities(final java.util.Collection<?> results)
    {
        if (results != null)
        {
            org.apache.commons.collections4.CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link bw.co.sigmaproduce.farm.post.Post}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof bw.co.sigmaproduce.farm.post.Post)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return bw.co.sigmaproduce.farm.post.Post
     */
    protected bw.co.sigmaproduce.farm.post.Post toEntity(Object[] row)
    {
        bw.co.sigmaproduce.farm.post.Post target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof bw.co.sigmaproduce.farm.post.Post)
                {
                    target = (bw.co.sigmaproduce.farm.post.Post)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<bw.co.sigmaproduce.farm.post.PostVO> toPostVOCollection(java.util.Collection<bw.co.sigmaproduce.farm.post.Post> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections4.CollectionUtils.transform(result, this.POSTVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public bw.co.sigmaproduce.farm.post.PostVO[] toPostVOArray(java.util.Collection<?> entities)
    {
        bw.co.sigmaproduce.farm.post.PostVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toPostVOCollection(collection);
            result = (bw.co.sigmaproduce.farm.post.PostVO[]) collection.toArray(new bw.co.sigmaproduce.farm.post.PostVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link PostDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toPostVO(this.toEntity(row))
     * @see bw.co.sigmaproduce.farm.post.PostDao#toPostVO(bw.co.sigmaproduce.farm.post.Post)
     */
    protected bw.co.sigmaproduce.farm.post.PostVO toPostVO(Object[] row)
    {
        return this.toPostVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link bw.co.sigmaproduce.farm.post.PostVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer POSTVO_TRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof bw.co.sigmaproduce.farm.post.Post)
                {
                    final bw.co.sigmaproduce.farm.post.Post entity = (bw.co.sigmaproduce.farm.post.Post)input;
                    result = toPostVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toPostVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public void postVOToEntityCollection(java.util.Collection<?> instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof bw.co.sigmaproduce.farm.post.PostVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections4.CollectionUtils.transform(instances, this.PostVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections4.Transformer PostVOToEntityTransformer =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return postVOToEntity((bw.co.sigmaproduce.farm.post.PostVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toPostVO(
        bw.co.sigmaproduce.farm.post.Post source,
        bw.co.sigmaproduce.farm.post.PostVO target)
    {
        target.setId(source.getId());
        target.setCreatedBy(source.getCreatedBy());
        target.setUpdatedBy(source.getUpdatedBy());
        target.setCreatedDate(source.getCreatedDate());
        target.setUpdatedDate(source.getUpdatedDate());
        target.setContent(source.getContent());
        if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(target.getImages())){
            target.getImages().clear();
        } else {
            target.setImages(new java.util.ArrayList<>());
        }
        
        if(null!=source.getImages()) {
            target.getImages().addAll(source.getImages());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public bw.co.sigmaproduce.farm.post.PostVO toPostVO(final bw.co.sigmaproduce.farm.post.Post entity)
    {
        bw.co.sigmaproduce.farm.post.PostVO target = null;
        if (entity != null)
        {
            target =  new bw.co.sigmaproduce.farm.post.PostVO();
            this.toPostVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void postVOToEntity(
        bw.co.sigmaproduce.farm.post.PostVO source,
        bw.co.sigmaproduce.farm.post.Post target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getCreatedBy() != null)
        {
            target.setCreatedBy(source.getCreatedBy());
        }
        if (copyIfNull || source.getUpdatedBy() != null)
        {
            target.setUpdatedBy(source.getUpdatedBy());
        }
        if (copyIfNull || source.getUpdatedDate() != null)
        {
            target.setUpdatedDate(source.getUpdatedDate());
        }
        if (copyIfNull || source.getCreatedDate() != null)
        {
            target.setCreatedDate(source.getCreatedDate());
        }
        if (copyIfNull || source.getContent() != null)
        {
            target.setContent(source.getContent());
        }
        if (copyIfNull || source.getImages() != null)
        {
            if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(target.getImages())){
                target.getImages().clear();
            } else {
                target.setImages(new java.util.ArrayList<>());
            }
            if(null != source.getImages()) {
                target.getImages().addAll(source.getImages());
            }
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return bw.co.sigmaproduce.PrincipalStore.get();
    }


    /**
     * Create or Update the <code>post</code> instance in the persistent store.
     * @param post
     */
    @Override
    public bw.co.sigmaproduce.farm.post.Post createOrUpdate(bw.co.sigmaproduce.farm.post.Post post)
    {
        if(post.getId() == null)
        {
            return (bw.co.sigmaproduce.farm.post.Post)this.create(TRANSFORM_NONE,post);
        }
        this.update(post);
        return post;
    }

    // spring-hibernate-dao-base merge-point
}
