// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm.cultivation.problem;

import bw.co.sigmaproduce.crop.issue.CropIssueRepository;
import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import org.springframework.stereotype.Repository;

/**
 * @see CultivationProblem
 */
@Repository("cultivationProblemDao")
public class CultivationProblemDaoImpl
    extends CultivationProblemDaoBase
{
    
    public CultivationProblemDaoImpl(
        CropIssueRepository cropIssueRepository,
        CultivationRepository cultivationRepository,
        CultivationProblemRepository cultivationProblemRepository
    ) {

        super(
            cropIssueRepository,
            cultivationRepository,
            cultivationProblemRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationProblemVO(
        CultivationProblem source,
        CultivationProblemVO target)
    {
        // TODO verify behavior of toCultivationProblemVO
        super.toCultivationProblemVO(source, target);
        // WARNING! No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.cropIssue (can't convert source.getCropIssue():bw.co.sigmaproduce.crop.issue.CropIssue to bw.co.sigmaproduce.crop.issue.CropIssueVO
        // WARNING! No conversion for target.cultivation (can't convert source.getCultivation():bw.co.sigmaproduce.farm.cultivation.Cultivation to bw.co.sigmaproduce.farm.cultivation.CultivationListVO
        // WARNING! No conversion for target.dateNoticed (can't convert source.getDateNoticed():java.util.Date to java.util.Date
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationProblemVO toCultivationProblemVO(final CultivationProblem entity)
    {
        // TODO verify behavior of toCultivationProblemVO
        return super.toCultivationProblemVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CultivationProblem loadCultivationProblemFromCultivationProblemVO(CultivationProblemVO cultivationProblemVO)
    {
        // TODO implement loadCultivationProblemFromCultivationProblemVO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.farm.cultivation.problem.loadCultivationProblemFromCultivationProblemVO(CultivationProblemVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cultivationProblemVO.getId() == null)
        {
            return  CultivationProblem.Factory.newInstance();
        }
        else
        {
            return this.load(cultivationProblemVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public CultivationProblem cultivationProblemVOToEntity(CultivationProblemVO cultivationProblemVO)
    {
        // TODO verify behavior of cultivationProblemVOToEntity
        CultivationProblem entity = this.loadCultivationProblemFromCultivationProblemVO(cultivationProblemVO);
        this.cultivationProblemVOToEntity(cultivationProblemVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationProblemVOToEntity(
        CultivationProblemVO source,
        CultivationProblem target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cultivationProblemVOToEntity
        super.cultivationProblemVOToEntity(source, target, copyIfNull);
        // No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // No conversion for target.dateNoticed (can't convert source.getDateNoticed():java.util.Date to java.util.Date
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationProblemListVO(
        CultivationProblem source,
        CultivationProblemListVO target)
    {
        // TODO verify behavior of toCultivationProblemListVO
        super.toCultivationProblemListVO(source, target);
        // WARNING! No conversion for target.dateNoticed (can't convert source.getDateNoticed():java.util.Date to java.util.Date
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationProblemListVO toCultivationProblemListVO(final CultivationProblem entity)
    {
        // TODO verify behavior of toCultivationProblemListVO
        return super.toCultivationProblemListVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CultivationProblem loadCultivationProblemFromCultivationProblemListVO(CultivationProblemListVO cultivationProblemListVO)
    {
        // TODO implement loadCultivationProblemFromCultivationProblemListVO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.farm.cultivation.problem.loadCultivationProblemFromCultivationProblemListVO(CultivationProblemListVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cultivationProblemListVO.getId() == null)
        {
            return  CultivationProblem.Factory.newInstance();
        }
        else
        {
            return this.load(cultivationProblemListVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public CultivationProblem cultivationProblemListVOToEntity(CultivationProblemListVO cultivationProblemListVO)
    {
        // TODO verify behavior of cultivationProblemListVOToEntity
        CultivationProblem entity = this.loadCultivationProblemFromCultivationProblemListVO(cultivationProblemListVO);
        this.cultivationProblemListVOToEntity(cultivationProblemListVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationProblemListVOToEntity(
        CultivationProblemListVO source,
        CultivationProblem target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cultivationProblemListVOToEntity
        super.cultivationProblemListVOToEntity(source, target, copyIfNull);
        // No conversion for target.dateNoticed (can't convert source.getDateNoticed():java.util.Date to java.util.Date
    }
}