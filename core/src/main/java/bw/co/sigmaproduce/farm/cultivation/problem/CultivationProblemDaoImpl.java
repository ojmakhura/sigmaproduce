// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm.cultivation.problem;

import bw.co.sigmaproduce.crop.issue.CropIssueRepository;
import bw.co.sigmaproduce.document.DocumentRepository;
import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import org.springframework.stereotype.Repository;

/**
 * @see CultivationProblem
 */
@Repository("cultivationProblemDao")
public class CultivationProblemDaoImpl
    extends CultivationProblemDaoBase
{
    
    

    public CultivationProblemDaoImpl(CropIssueRepository cropIssueRepository,
            CultivationRepository cultivationRepository, DocumentRepository documentRepository,
            CultivationProblemRepository cultivationProblemRepository) {
        super(cropIssueRepository, cultivationRepository, documentRepository, cultivationProblemRepository);
        //TODO Auto-generated constructor stub
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationProblemDTO(
        CultivationProblem source,
        CultivationProblemDTO target)
    {
        // TODO verify behavior of toCultivationProblemDTO
        super.toCultivationProblemDTO(source, target);
        // WARNING! No conversion for target.cropIssue (can't convert source.getCropIssue():bw.co.sigmaproduce.crop.issue.CropIssue to bw.co.sigmaproduce.crop.issue.CropIssueVO
        // WARNING! No conversion for target.cultivation (can't convert source.getCultivation():bw.co.sigmaproduce.farm.cultivation.Cultivation to bw.co.sigmaproduce.farm.cultivation.CultivationListVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationProblemDTO toCultivationProblemDTO(final CultivationProblem entity)
    {
        // TODO verify behavior of toCultivationProblemDTO
        return super.toCultivationProblemDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CultivationProblem loadCultivationProblemFromCultivationProblemDTO(CultivationProblemDTO cultivationProblemDTO)
    {
        // TODO implement loadCultivationProblemFromCultivationProblemDTO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.farm.cultivation.problem.loadCultivationProblemFromCultivationProblemDTO(CultivationProblemDTO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cultivationProblemDTO.getId() == null)
        {
            return  CultivationProblem.Factory.newInstance();
        }
        else
        {
            return this.load(cultivationProblemDTO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public CultivationProblem cultivationProblemDTOToEntity(CultivationProblemDTO cultivationProblemDTO)
    {
        // TODO verify behavior of cultivationProblemDTOToEntity
        CultivationProblem entity = this.loadCultivationProblemFromCultivationProblemDTO(cultivationProblemDTO);
        this.cultivationProblemDTOToEntity(cultivationProblemDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationProblemDTOToEntity(
        CultivationProblemDTO source,
        CultivationProblem target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cultivationProblemDTOToEntity
        super.cultivationProblemDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toCultivationProblemListDTO(
        CultivationProblem source,
        CultivationProblemListDTO target)
    {
        // TODO verify behavior of toCultivationProblemListDTO
        super.toCultivationProblemListDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CultivationProblemListDTO toCultivationProblemListDTO(final CultivationProblem entity)
    {
        // TODO verify behavior of toCultivationProblemListDTO
        return super.toCultivationProblemListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CultivationProblem loadCultivationProblemFromCultivationProblemListDTO(CultivationProblemListDTO cultivationProblemListDTO)
    {
        // TODO implement loadCultivationProblemFromCultivationProblemListDTO
        throw new UnsupportedOperationException("bw.co.sigmaproduce.farm.cultivation.problem.loadCultivationProblemFromCultivationProblemListDTO(CultivationProblemListDTO) not yet implemented.");

        /* A typical implementation looks like this:
        if (cultivationProblemListDTO.getId() == null)
        {
            return  CultivationProblem.Factory.newInstance();
        }
        else
        {
            return this.load(cultivationProblemListDTO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public CultivationProblem cultivationProblemListDTOToEntity(CultivationProblemListDTO cultivationProblemListDTO)
    {
        // TODO verify behavior of cultivationProblemListDTOToEntity
        CultivationProblem entity = this.loadCultivationProblemFromCultivationProblemListDTO(cultivationProblemListDTO);
        this.cultivationProblemListDTOToEntity(cultivationProblemListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cultivationProblemListDTOToEntity(
        CultivationProblemListDTO source,
        CultivationProblem target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cultivationProblemListDTOToEntity
        super.cultivationProblemListDTOToEntity(source, target, copyIfNull);
    }
}