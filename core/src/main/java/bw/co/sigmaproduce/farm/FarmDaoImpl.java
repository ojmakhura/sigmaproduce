// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm;

import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import bw.co.sigmaproduce.farm.post.PostRepository;
import bw.co.sigmaproduce.village.VillageRepository;
import bw.co.sigmaproduce.village.VillageVO;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

/**
 * @see Farm
 */
@Repository("farmDao")
public class FarmDaoImpl
    extends FarmDaoBase
{
    
    public FarmDaoImpl(
        VillageRepository villageRepository,
        CultivationRepository cultivationRepository,
        PostRepository postRepository,
        FarmRepository farmRepository
    ) {

        super(
            villageRepository,
            cultivationRepository,
            postRepository,
            farmRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toFarmVO(
        Farm source,
        FarmVO target)
    {
        // TODO verify behavior of toFarmVO
        super.toFarmVO(source, target);
        // WARNING! No conversion for target.nearestVillage (can't convert source.getNearestVillage():bw.co.sigmaproduce.village.Village to bw.co.sigmaproduce.village.VillageVO

        if(source.getNearestVillage() != null)
        {
            VillageVO nearestVillage = new VillageVO();
            this.getVillageDao().toVillageVO(source.getNearestVillage(), nearestVillage);

            target.setNearestVillage(nearestVillage);
        }
        // WARNING! No conversion for target.alliedFarms (can't convert source.getAlliedFarms():Farm to FarmListVO

        if(source.getAlliedFarms() != null)
        {
            List<FarmListVO> alliedFarms = new ArrayList<>();

            for(Farm alliedFarm : source.getAlliedFarms())
            {
                FarmListVO farmListVO = new FarmListVO();
                farmListVO.setId(alliedFarm.getId());
                farmListVO.setName(alliedFarm.getName());
                alliedFarms.add(farmListVO);
            }

            target.setAlliedFarms(alliedFarms);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmVO toFarmVO(final Farm entity)
    {
        // TODO verify behavior of toFarmVO
        return super.toFarmVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Farm loadFarmFromFarmVO(FarmVO farmVO)
    {
        if (farmVO.getId() == null)
        {
            return  Farm.Factory.newInstance();
        }
        else
        {
            return this.load(farmVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Farm farmVOToEntity(FarmVO farmVO)
    {
        // TODO verify behavior of farmVOToEntity
        Farm entity = this.loadFarmFromFarmVO(farmVO);
        this.farmVOToEntity(farmVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void farmVOToEntity(
        FarmVO source,
        Farm target,
        boolean copyIfNull)
    {
        // TODO verify behavior of farmVOToEntity
        super.farmVOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toFarmListVO(
        Farm source,
        FarmListVO target)
    {
        // TODO verify behavior of toFarmListVO
        super.toFarmListVO(source, target);
        // WARNING! No conversion for target.nearestVillage (can't convert source.getNearestVillage():bw.co.sigmaproduce.village.Village to java.lang.String

        if(source.getNearestVillage() != null)
        {
            target.setNearestVillage(source.getNearestVillage().getName());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmListVO toFarmListVO(final Farm entity)
    {
        // TODO verify behavior of toFarmListVO
        return super.toFarmListVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Farm loadFarmFromFarmListVO(FarmListVO farmListVO)
    {
        if (farmListVO.getId() == null)
        {
            return  Farm.Factory.newInstance();
        }
        else
        {
            return this.load(farmListVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Farm farmListVOToEntity(FarmListVO farmListVO)
    {
        // TODO verify behavior of farmListVOToEntity
        Farm entity = this.loadFarmFromFarmListVO(farmListVO);
        this.farmListVOToEntity(farmListVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void farmListVOToEntity(
        FarmListVO source,
        Farm target,
        boolean copyIfNull)
    {
        // TODO verify behavior of farmListVOToEntity
        super.farmListVOToEntity(source, target, copyIfNull);
    }
}