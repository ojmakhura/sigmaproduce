// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.farm;

import bw.co.sigmaproduce.document.DocumentRepository;
import bw.co.sigmaproduce.farm.cultivation.CultivationRepository;
import bw.co.sigmaproduce.farm.post.PostRepository;
import bw.co.sigmaproduce.village.VillageRepository;
import bw.co.sigmaproduce.village.VillageDTO;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

/**
 * @see Farm
 */
@Repository("farmDao")
public class FarmDaoImpl
    extends FarmDaoBase
{
    

    public FarmDaoImpl(VillageRepository villageRepository, CultivationRepository cultivationRepository,
            PostRepository postRepository, DocumentRepository documentRepository, FarmRepository farmRepository) {
        super(villageRepository, cultivationRepository, postRepository, documentRepository, farmRepository);
        //TODO Auto-generated constructor stub
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toFarmDTO(
        Farm source,
        FarmDTO target)
    {
        // TODO verify behavior of toFarmDTO
        super.toFarmDTO(source, target);
        // WARNING! No conversion for target.nearestVillage (can't convert source.getNearestVillage():bw.co.sigmaproduce.village.Village to bw.co.sigmaproduce.village.VillageDTO

        if(source.getNearestVillage() != null)
        {
            VillageDTO nearestVillage = new VillageDTO();
            this.getVillageDao().toVillageDTO(source.getNearestVillage(), nearestVillage);

            target.setNearestVillage(nearestVillage);
        }
        // WARNING! No conversion for target.alliedFarms (can't convert source.getAlliedFarms():Farm to FarmListDTO

        if(source.getAlliedFarms() != null)
        {
            List<FarmListDTO> alliedFarms = new ArrayList<>();

            for(Farm alliedFarm : source.getAlliedFarms())
            {
                FarmListDTO farmListDTO = new FarmListDTO();
                farmListDTO.setId(alliedFarm.getId());
                farmListDTO.setName(alliedFarm.getName());
                alliedFarms.add(farmListDTO);
            }

            target.setAlliedFarms(alliedFarms);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmDTO toFarmDTO(final Farm entity)
    {
        // TODO verify behavior of toFarmDTO
        return super.toFarmDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Farm loadFarmFromFarmDTO(FarmDTO farmDTO)
    {
        if (farmDTO.getId() == null)
        {
            return  Farm.Factory.newInstance();
        }
        else
        {
            return this.load(farmDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Farm farmDTOToEntity(FarmDTO farmDTO)
    {
        // TODO verify behavior of farmDTOToEntity
        Farm entity = this.loadFarmFromFarmDTO(farmDTO);
        this.farmDTOToEntity(farmDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void farmDTOToEntity(
        FarmDTO source,
        Farm target,
        boolean copyIfNull)
    {
        // TODO verify behavior of farmDTOToEntity
        super.farmDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toFarmListDTO(
        Farm source,
        FarmListDTO target)
    {
        // TODO verify behavior of toFarmListDTO
        super.toFarmListDTO(source, target);
        // WARNING! No conversion for target.nearestVillage (can't convert source.getNearestVillage():bw.co.sigmaproduce.village.Village to java.lang.String

        if(source.getNearestVillage() != null)
        {
            target.setNearestVillage(source.getNearestVillage().getName());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FarmListDTO toFarmListDTO(final Farm entity)
    {
        // TODO verify behavior of toFarmListDTO
        return super.toFarmListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Farm loadFarmFromFarmListDTO(FarmListDTO farmListDTO)
    {
        if (farmListDTO.getId() == null)
        {
            return  Farm.Factory.newInstance();
        }
        else
        {
            return this.load(farmListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Farm farmListDTOToEntity(FarmListDTO farmListDTO)
    {
        // TODO verify behavior of farmListDTOToEntity
        Farm entity = this.loadFarmFromFarmListDTO(farmListDTO);
        this.farmListDTOToEntity(farmListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void farmListDTOToEntity(
        FarmListDTO source,
        Farm target,
        boolean copyIfNull)
    {
        // TODO verify behavior of farmListDTOToEntity
        super.farmListDTOToEntity(source, target, copyIfNull);
    }
}