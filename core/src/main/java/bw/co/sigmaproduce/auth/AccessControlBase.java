// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: bocraportal::backend::bw.co.sigmaproduce::auth::AccessControl
 * STEREOTYPE:  Service
 */
package bw.co.sigmaproduce.auth;

import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Lazy;

/**
 * <p>
 * Spring Service base class for <code>AccessControl</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see AccessControl
 */
public abstract class AccessControlBase
    implements AccessControl
{
    protected Logger logger = LoggerFactory.getLogger(AccessControl.class);
    protected final AuthorisationService authorisationService;
    protected final MessageSource messageSource;

    public AccessControlBase(
        @Lazy AuthorisationService authorisationService,
        MessageSource messageSource
    ) {
        this.authorisationService = authorisationService;
        this.messageSource = messageSource;
    }

    /**
     * Gets the reference to <code>authorisationService</code>.
     * @return authorisationService
     */
    protected AuthorisationService getAuthorisationService()
    {
        return this.authorisationService;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean authorised(final String url)
    {
        if (url == null || url.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "AccessControl.authorised(String url) - 'url' can not be null or empty");
        }
        try
        {
            return this.handleAuthorised(url);
        }
        catch (Throwable th)
        {
            throw new AccessControlException(
                "Error performing 'AccessControl.authorised(String url)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #authorised(String)}
     * @param url String TODO: Model Documentation for AccessControl.authorised(url)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleAuthorised(String url)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}