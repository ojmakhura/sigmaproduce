// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.auth;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Set;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

import bw.co.sigmaproduce.access.AccessPoint;

/**
 * TODO: Model Documentation for Authorisation
 * @see Authorisation
 */
@Transactional
public interface AuthorisationDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link Authorisation}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link AuthorisationVO}.
     */
    public static final int TRANSFORM_AUTHORISATIONVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toAuthorisationVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toAuthorisationVO(
        Authorisation source,
        AuthorisationVO target);

    /**
     * Converts this DAO's entity to an object of type {@link AuthorisationVO}.
     * @param entity
     * @return AuthorisationVO
     */
    public AuthorisationVO toAuthorisationVO(Authorisation entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link AuthorisationVO}.
     * @param entities
     * @return Collection<AuthorisationVO>
     */
    public Collection<AuthorisationVO> toAuthorisationVOCollection(Collection<Authorisation> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link AuthorisationVO}.
     * @param entities
     * @return AuthorisationVO[]
     */
    public AuthorisationVO[] toAuthorisationVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link AuthorisationVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void authorisationVOToEntity(
        AuthorisationVO source,
        Authorisation target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link AuthorisationVO} to this DAO's entity.
     * @param authorisationVO
     * @return Authorisation
     */
    public Authorisation authorisationVOToEntity(AuthorisationVO authorisationVO);

    /**
     * Converts a Collection of instances of type {@link AuthorisationVO} to this
     * DAO's entity.
     * @param instances
     */
    public void authorisationVOToEntityCollection(Collection<?> instances);

    /**
     * Gets an instance of Authorisation from the persistent store.
     * @param id
     * @return Authorisation
     */
    public Authorisation get(Long id);

    /**
     * <p>
     * Does the same thing as {@link #get(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, Long id);

    /**
     * Loads an instance of Authorisation from the persistent store.
     * @param id
     * @return Authorisation
     */
    public Authorisation load(Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, Long id);

    /**
     * Loads all entities of type {@link Authorisation}.
     *
     * @return the loaded entities.
     */
    public Collection<Authorisation> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of Authorisation and adds it to the persistent store.
     * @param authorisation
     * @return Authorisation
     */
    public Authorisation create(Authorisation authorisation);

    /**
     * <p>
     * Does the same thing as {@link #create(Authorisation)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param authorisation
     * @return Object
     */
    public Object create(int transform, Authorisation authorisation);

    /**
     * Creates a new instance of Authorisation and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of Authorisation
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<Authorisation> create(Collection<Authorisation> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(Authorisation)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<Authorisation> entities);

    /**
     * <p>
     * Creates a new <code>Authorisation</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param roles TODO: Model Documentation for Authorisation.roles
     * @param createdBy TODO: Model Documentation for Authorisation.createdBy
     * @param updatedBy TODO: Model Documentation for Authorisation.updatedBy
     * @param createdDate TODO: Model Documentation for Authorisation.createdDate
     * @param updatedDate TODO: Model Documentation for Authorisation.updatedDate
     * @return Authorisation
     */
    public Authorisation create(
        Collection<String> roles,
        String createdBy,
        String updatedBy,
        LocalDateTime createdDate,
        LocalDateTime updatedDate);

    /**
     * <p>
     * Does the same thing as {@link #create(String, String, String, LocalDateTime, LocalDateTime)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param roles TODO: Model Documentation for Authorisation.roles
     * @param createdBy TODO: Model Documentation for Authorisation.createdBy
     * @param updatedBy TODO: Model Documentation for Authorisation.updatedBy
     * @param createdDate TODO: Model Documentation for Authorisation.createdDate
     * @param updatedDate TODO: Model Documentation for Authorisation.updatedDate
     * @return Authorisation
     */
    public Object create(
        int transform,
        Collection<String> roles,
        String createdBy,
        String updatedBy,
        LocalDateTime createdDate,
        LocalDateTime updatedDate);

    /**
     * <p>
     * Creates a new <code>Authorisation</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     * @param accessPoint
     * @param createdBy
     * @param createdDate
     * @return Authorisation
     */
    public Authorisation create(
        AccessPoint accessPoint,
        String createdBy,
        LocalDateTime createdDate);

    /**
     * <p>
     * Does the same thing as {@link #create(String, LocalDateTime)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform flag to determine transformation type.
     * @param accessPoint
     * @param createdBy
     * @param createdDate
     * @return Object
     */
    public Object create(
        int transform,
        AccessPoint accessPoint,
        String createdBy,
        LocalDateTime createdDate);

    /**
     * Updates the <code>authorisation</code> instance in the persistent store.
     * @param authorisation
     */
    public void update(Authorisation authorisation);

    /**
     * Create or Update the <code>authorisation</code> instance in the persistent store.
     * @param authorisation
     * @return Authorisation
     */
    public Authorisation createOrUpdate(Authorisation authorisation);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<Authorisation> entities);

    /**
     * Removes the instance of Authorisation from the persistent store.
     * @param authorisation
     */
    public void remove(Authorisation authorisation);

    /**
     * Removes the instance of Authorisation having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<Authorisation> entities);

    /**
     * TODO: Model Documentation for Authorisation.findByCriteria
     * @param searchCriteria TODO: Model Documentation for Authorisation.findByCriteria(searchCriteria)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByCriteria(AuthorisationCriteria searchCriteria);

    /**
     * <p>
     * Does the same thing as {@link #findByCriteria(AuthorisationCriteria)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param searchCriteria TODO: Model Documentation for Authorisation.findByCriteria(searchCriteria)
     * @return Collection<?>
     */
    public Collection<?> findByCriteria(final int transform, final AuthorisationCriteria searchCriteria);

    /**
     * <p>
     * Does the same thing as {@link #findByCriteria(int, String, AuthorisationCriteria)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param
     * @param pageNumber
     * @param pageSize
     * @param searchCriteria TODO: Model Documentation for Authorisation.findByCriteria(searchCriteria)
     * @return Collection<?>
     */
    public Page<Authorisation> findByCriteria(final Pageable pageable, final AuthorisationCriteria searchCriteria);

    /**
     * TODO: Model Documentation for
     * Authorisation.findAccessTypeCodeAuthorisations
     * @param roles TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(roles)
     * @param accessPointTypeCodes TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(accessPointTypeCodes)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findAccessTypeCodeAuthorisations(Set<String> roles, Set<String> accessPointTypeCodes);


    /**
     * <p>
     * Does the same thing as {@link #findAccessTypeCodeAuthorisations(Set<String>, Set<String>)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param roles TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(roles)
     * @param accessPointTypeCodes TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(accessPointTypeCodes)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findAccessTypeCodeAuthorisations(int pageNumber, int pageSize, Set<String> roles, Set<String> accessPointTypeCodes);


    /**
     * <p>
     * Does the same thing as {@link #findAccessTypeCodeAuthorisations(int, String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param roles TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(roles)
     * @param accessPointTypeCodes TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(accessPointTypeCodes)
     * @return Collection<Authorisation>
     */
    public Collection<?> findAccessTypeCodeAuthorisations(int transform, int pageNumber, int pageSize, Set<String> roles, Set<String> accessPointTypeCodes);

    /**
     * <p>
     * Does the same thing as {@link #findAccessTypeCodeAuthorisations(int, String, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findAccessTypeCodeAuthorisations(int, Set<String> roles, Set<String> accessPointTypeCodes)}.
     * </p>
     * @param transform
     * @param roles TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(roles)
     * @param accessPointTypeCodes TODO: Model Documentation for
Authorisation.findAccessTypeCodeAuthorisations(accessPointTypeCodes)
     * @return Collection<Authorisation>
     */
    public Collection<?> findAccessTypeCodeAuthorisations(int transform, Set<String> roles, Set<String> accessPointTypeCodes);
    /**
     * TODO: Model Documentation for Authorisation.findByRolesAndUrl
     * @param url TODO: Model Documentation for Authorisation.findByRolesAndUrl(url)
     * @param roles TODO: Model Documentation for Authorisation.findByRolesAndUrl(roles)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByRolesAndUrl(String url, Set<String> roles);


    /**
     * <p>
     * Does the same thing as {@link #findByRolesAndUrl(String, Set<String>)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for Authorisation.findByRolesAndUrl(url)
     * @param roles TODO: Model Documentation for Authorisation.findByRolesAndUrl(roles)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByRolesAndUrl(int pageNumber, int pageSize, String url, Set<String> roles);


    /**
     * <p>
     * Does the same thing as {@link #findByRolesAndUrl(int, String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for Authorisation.findByRolesAndUrl(url)
     * @param roles TODO: Model Documentation for Authorisation.findByRolesAndUrl(roles)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByRolesAndUrl(int transform, int pageNumber, int pageSize, String url, Set<String> roles);

    /**
     * <p>
     * Does the same thing as {@link #findByRolesAndUrl(int, String, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRolesAndUrl(int, String url, Set<String> roles)}.
     * </p>
     * @param transform
     * @param url TODO: Model Documentation for Authorisation.findByRolesAndUrl(url)
     * @param roles TODO: Model Documentation for Authorisation.findByRolesAndUrl(roles)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByRolesAndUrl(int transform, String url, Set<String> roles);
    /**
     * TODO: Model Documentation for Authorisation.findByUrl
     * @param url TODO: Model Documentation for Authorisation.findByUrl(url)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByUrl(String url);


    /**
     * <p>
     * Does the same thing as {@link #findByUrl(String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for Authorisation.findByUrl(url)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByUrl(int pageNumber, int pageSize, String url);


    /**
     * <p>
     * Does the same thing as {@link #findByUrl(int, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for Authorisation.findByUrl(url)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByUrl(int transform, int pageNumber, int pageSize, String url);

    /**
     * <p>
     * Does the same thing as {@link #findByUrl(int, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByUrl(int, String url)}.
     * </p>
     * @param transform
     * @param url TODO: Model Documentation for Authorisation.findByUrl(url)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByUrl(int transform, String url);
    /**
     * TODO: Model Documentation for Authorisation.findByAccessUrlAndCode
     * @param url TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(url)
     * @param code TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(code)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByAccessUrlAndCode(String url, String code);


    /**
     * <p>
     * Does the same thing as {@link #findByAccessUrlAndCode(String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(url)
     * @param code TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(code)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByAccessUrlAndCode(int pageNumber, int pageSize, String url, String code);


    /**
     * <p>
     * Does the same thing as {@link #findByAccessUrlAndCode(int, String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(url)
     * @param code TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(code)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByAccessUrlAndCode(int transform, int pageNumber, int pageSize, String url, String code);

    /**
     * <p>
     * Does the same thing as {@link #findByAccessUrlAndCode(int, String, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByAccessUrlAndCode(int, String url, String code)}.
     * </p>
     * @param transform
     * @param url TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(url)
     * @param code TODO: Model Documentation for Authorisation.findByAccessUrlAndCode(code)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByAccessUrlAndCode(int transform, String url, String code);
    /**
     * TODO: Model Documentation for
     * Authorisation.findByRolesAndUrlContaining
     * @param url TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(url)
     * @param roles TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(roles)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByRolesAndUrlContaining(String url, Set<String> roles);


    /**
     * <p>
     * Does the same thing as {@link #findByRolesAndUrlContaining(String, Set<String>)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(url)
     * @param roles TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(roles)
     * @return Collection<Authorisation>
     */
    public Collection<Authorisation> findByRolesAndUrlContaining(int pageNumber, int pageSize, String url, Set<String> roles);


    /**
     * <p>
     * Does the same thing as {@link #findByRolesAndUrlContaining(int, String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param url TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(url)
     * @param roles TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(roles)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByRolesAndUrlContaining(int transform, int pageNumber, int pageSize, String url, Set<String> roles);

    /**
     * <p>
     * Does the same thing as {@link #findByRolesAndUrlContaining(int, String, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRolesAndUrlContaining(int, String url, Set<String> roles)}.
     * </p>
     * @param transform
     * @param url TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(url)
     * @param roles TODO: Model Documentation for
Authorisation.findByRolesAndUrlContaining(roles)
     * @return Collection<Authorisation>
     */
    public Collection<?> findByRolesAndUrlContaining(int transform, String url, Set<String> roles);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>AuthorisationDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Authorisation} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link AuthorisationVO} - {@link #TRANSFORM_AUTHORISATIONVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link AuthorisationDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final Authorisation entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,Authorisation)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>AuthorisationDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,Authorisation)
     */
    public void transformEntities(final int transform, final Collection<?> entities);


    // spring-dao merge-point
}