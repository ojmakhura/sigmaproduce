// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 05/31/2024 22:50:27+0200.
//
package bw.co.sigmaproduce.auth;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collection;

import bw.co.sigmaproduce.access.AccessPoint;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;

/**
 * TODO: Model Documentation for Authorisation
 */
// $entity.uniqueConstraints
@Entity
@Table(
    name = "AUTHORISATION")
// Uncomment to enable caching for Authorisation
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQueries
({
    @NamedQuery(name = "Authorisation.findAll", query = "SELECT a FROM Authorisation AS a"),
})
// HibernateEntity.vsl annotations merge-point
public class Authorisation
    implements Serializable, Comparable<Authorisation>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5853081825709296679L;

    // Generate 6 attributes
    private Collection<String> roles;

    /**
     * TODO: Model Documentation for Authorisation.roles
     * @return this.roles Collection<String>
     */
    @ElementCollection
    public Collection<String> getRoles()
    {
        return this.roles;
    }

    /**
     * TODO: Model Documentation for Authorisation.roles
     * @param rolesIn Collection<String>
     */
    public void setRoles(Collection<String> rolesIn)
    {
        this.roles = rolesIn;
    }

    private String createdBy;

    /**
     * TODO: Model Documentation for Authorisation.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = false, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for Authorisation.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private String updatedBy;

    /**
     * TODO: Model Documentation for Authorisation.updatedBy
     * @return this.updatedBy String
     */
    @Column(name = "UPDATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for Authorisation.updatedBy
     * @param updatedByIn String
     */
    public void setUpdatedBy(String updatedByIn)
    {
        this.updatedBy = updatedByIn;
    }

    private LocalDateTime createdDate;

    /**
     * TODO: Model Documentation for Authorisation.createdDate
     * @return this.createdDate LocalDateTime
     */
    @Column(name = "CREATED_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for Authorisation.createdDate
     * @param createdDateIn LocalDateTime
     */
    public void setCreatedDate(LocalDateTime createdDateIn)
    {
        this.createdDate = createdDateIn;
    }

    private LocalDateTime updatedDate;

    /**
     * TODO: Model Documentation for Authorisation.updatedDate
     * @return this.updatedDate LocalDateTime
     */
    @Column(name = "UPDATED_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for Authorisation.updatedDate
     * @param updatedDateIn LocalDateTime
     */
    public void setUpdatedDate(LocalDateTime updatedDateIn)
    {
        this.updatedDate = updatedDateIn;
    }

    private Long id;

    /**
     * TODO: Model Documentation for Authorisation.id
     * @return this.id Long
     */
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator="AUTHORISATION_SEQ")
    @SequenceGenerator(name="AUTHORISATION_SEQ", sequenceName="AUTHORISATION_SEQ", allocationSize=1)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Authorisation.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    private AccessPoint accessPoint;

    /**
     * TODO: Model Documentation for AccessPoint
     * @return this.accessPoint AccessPoint
     */
    @OneToOne(optional = false,  fetch = FetchType.LAZY)
    @JoinColumn(name = "ACCESS_POINT_FK", unique = false)
    public AccessPoint getAccessPoint()
    {
        return this.accessPoint;
    }

    /**
     * TODO: Model Documentation for AccessPoint
     * @param accessPointIn AccessPoint
     */
    public void setAccessPoint(AccessPoint accessPointIn)
    {
        this.accessPoint = accessPointIn;
    }

    /**
     * Returns <code>true</code> if the argument is an Authorisation instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Authorisation))
        {
            return false;
        }
        final Authorisation that = (Authorisation)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Authorisation}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Authorisation}.
         * @return new Authorisation()
         */
        public static Authorisation newInstance()
        {
            return new Authorisation();
        }

        /**
         * Constructs a new instance of {@link Authorisation}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdBy String
         * @param createdDate LocalDateTime
         * @param accessPoint AccessPoint
         * @return newInstance
         */
        public static Authorisation newInstance(String createdBy, LocalDateTime createdDate, AccessPoint accessPoint)
        {
            final Authorisation entity = new Authorisation();
            entity.setCreatedBy(createdBy);
            entity.setCreatedDate(createdDate);
            entity.setAccessPoint(accessPoint);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Authorisation}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param roles Collection<String>
         * @param createdBy String
         * @param updatedBy String
         * @param createdDate LocalDateTime
         * @param updatedDate LocalDateTime
         * @param accessPoint AccessPoint
         * @return newInstance Authorisation
         */
        public static Authorisation newInstance(Collection<String> roles, String createdBy, String updatedBy, LocalDateTime createdDate, LocalDateTime updatedDate, AccessPoint accessPoint)
        {
            final Authorisation entity = new Authorisation();
            entity.setRoles(roles);
            entity.setCreatedBy(createdBy);
            entity.setUpdatedBy(updatedBy);
            entity.setCreatedDate(createdDate);
            entity.setUpdatedDate(updatedDate);
            entity.setAccessPoint(accessPoint);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Authorisation other)
    {
        int cmp = 0;
        if (this.getId() != null && other.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getRoles() != null && other.getRoles() != null)
            {
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.getRoles().size()-other.getRoles().size()));
            }
            if (this.getCreatedBy() != null && other.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getUpdatedBy() != null && other.getUpdatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedBy().compareTo(other.getUpdatedBy()));
            }
            if (this.getCreatedDate() != null && other.getCreatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedDate().compareTo(other.getCreatedDate()));
            }
            if (this.getUpdatedDate() != null && other.getUpdatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedDate().compareTo(other.getUpdatedDate()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Authorisation(");
        sb.append(" roles=").append(getRoles());
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" updatedBy=").append(getUpdatedBy());
        sb.append(" createdDate=").append(getCreatedDate());
        sb.append(" updatedDate=").append(getUpdatedDate());
        sb.append(" id=").append(getId());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}