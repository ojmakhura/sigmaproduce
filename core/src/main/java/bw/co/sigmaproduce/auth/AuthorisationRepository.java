// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.auth;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Set;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;

public interface AuthorisationRepository extends 
        JpaRepository<Authorisation, Long>,
        JpaSpecificationExecutor<Authorisation> {

    // Search by a list of parameters
    Collection<Authorisation> findByRolesNot(String roles);
    Page<Authorisation> findByRolesNot(String roles, Pageable pageable);
    
    Collection<Authorisation> findByRolesIn(Collection<String> roless);
    Page<Authorisation> findByRolesIn(Collection<String> roless, Pageable pageable);
    
    Collection<Authorisation> findByRolesNotIn(Collection<String> roless);
    Page<Authorisation> findByRolesNotIn(Collection<String> roless, Pageable pageable);

    // Generating pageable query method for createdBy
    Page<Authorisation> findByCreatedBy(String createdBy, Pageable pageable);

    Page<Authorisation> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Authorisation> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Authorisation> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Authorisation> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Authorisation> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<Authorisation> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<Authorisation> findByCreatedByNot(String createdBy);
    Page<Authorisation> findByCreatedByNot(String createdBy, Pageable pageable);
    
    Collection<Authorisation> findByCreatedByIn(Collection<String> createdBys);
    Page<Authorisation> findByCreatedByIn(Collection<String> createdBys, Pageable pageable);
    
    Collection<Authorisation> findByCreatedByNotIn(Collection<String> createdBys);
    Page<Authorisation> findByCreatedByNotIn(Collection<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<Authorisation> findByUpdatedByNull(Pageable pageable);

    Page<Authorisation> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Authorisation> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Authorisation> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Authorisation> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Authorisation> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<Authorisation> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<Authorisation> findByUpdatedByNot(String updatedBy);
    Page<Authorisation> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    Collection<Authorisation> findByUpdatedByIn(Collection<String> updatedBys);
    Page<Authorisation> findByUpdatedByIn(Collection<String> updatedBys, Pageable pageable);
    
    Collection<Authorisation> findByUpdatedByNotIn(Collection<String> updatedBys);
    Page<Authorisation> findByUpdatedByNotIn(Collection<String> updatedBys, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<Authorisation> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<Authorisation> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<Authorisation> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<Authorisation> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<Authorisation> findByCreatedDateNot(LocalDateTime createdDate);
    Page<Authorisation> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    Collection<Authorisation> findByCreatedDateIn(Collection<LocalDateTime> createdDates);
    Page<Authorisation> findByCreatedDateIn(Collection<LocalDateTime> createdDates, Pageable pageable);
    
    Collection<Authorisation> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates);
    Page<Authorisation> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<Authorisation> findByUpdatedDateNull(Pageable pageable);

    Page<Authorisation> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<Authorisation> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<Authorisation> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<Authorisation> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<Authorisation> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    Collection<Authorisation> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates);
    Page<Authorisation> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates, Pageable pageable);
    
    Collection<Authorisation> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates);
    Page<Authorisation> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates, Pageable pageable);

    // Generating pageable query method for id
    Page<Authorisation> findByIdNull(Pageable pageable);

    Page<Authorisation> findByIdLessThanEqual(Long id, Pageable pageable);
    
    Page<Authorisation> findByIdGreaterThanEqual(Long id, Pageable pageable);
    
    Page<Authorisation> findByIdLessThan(Long id, Pageable pageable);
    
    Page<Authorisation> findByIdGreaterThan(Long id, Pageable pageable);
    
    Page<Authorisation> findByIdBetween(Long idStart, Long idEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<Authorisation> findByIdNot(Long id);
    Page<Authorisation> findByIdNot(Long id, Pageable pageable);
    
    Collection<Authorisation> findByIdIn(Collection<Long> ids);
    Page<Authorisation> findByIdIn(Collection<Long> ids, Pageable pageable);
    
    Collection<Authorisation> findByIdNotIn(Collection<Long> ids);
    Page<Authorisation> findByIdNotIn(Collection<Long> ids, Pageable pageable);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap, AccessPointType apt JOIN a.roles WHERE ap.accessPointType.id = apt.id AND a.accessPoint.id = ap.id AND apt.code IN :accessPointTypeCodes AND roles in :roles"
    )
    Collection<Authorisation> findAccessTypeCodeAuthorisations(Set<String> roles, Set<String> accessPointTypeCodes);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap, AccessPointType apt JOIN a.roles WHERE ap.accessPointType.id = apt.id AND a.accessPoint.id = ap.id AND apt.code IN :accessPointTypeCodes AND roles in :roles"
    )
    Page<Authorisation> findAccessTypeCodeAuthorisations(Set<String> roles, Set<String> accessPointTypeCodes, Pageable pageable);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap JOIN a.roles WHERE a.accessPoint.id = ap.id AND ap.url = :url AND roles in :roles"
    )
    Collection<Authorisation> findByRolesAndUrl(String url, Set<String> roles);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap JOIN a.roles WHERE a.accessPoint.id = ap.id AND ap.url = :url AND roles in :roles"
    )
    Page<Authorisation> findByRolesAndUrl(String url, Set<String> roles, Pageable pageable);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap WHERE a.accessPoint.id = ap.id AND ap.url = :url"
    )
    Collection<Authorisation> findByUrl(String url);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap WHERE a.accessPoint.id = ap.id AND ap.url = :url"
    )
    Page<Authorisation> findByUrl(String url, Pageable pageable);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap, AccessPointType apt WHERE a.accessPoint.id = ap.id AND apt.id = ap.accessPointType.id AND ap.url = :url AND apt.code = :code"
    )
    Collection<Authorisation> findByAccessUrlAndCode(String url, String code);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap, AccessPointType apt WHERE a.accessPoint.id = ap.id AND apt.id = ap.accessPointType.id AND ap.url = :url AND apt.code = :code"
    )
    Page<Authorisation> findByAccessUrlAndCode(String url, String code, Pageable pageable);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap JOIN a.roles WHERE a.accessPoint.id = ap.id AND ap.url like :url AND roles in :roles"
    )
    Collection<Authorisation> findByRolesAndUrlContaining(String url, Set<String> roles);

    @Query(
        value = "SELECT a FROM Authorisation a, AccessPoint ap JOIN a.roles WHERE a.accessPoint.id = ap.id AND ap.url like :url AND roles in :roles"
    )
    Page<Authorisation> findByRolesAndUrlContaining(String url, Set<String> roles, Pageable pageable);

}