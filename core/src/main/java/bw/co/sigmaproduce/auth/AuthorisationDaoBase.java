// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4or5=true hibernateVersion=5.6.3.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.auth;

import org.springframework.context.annotation.Lazy;

import bw.co.sigmaproduce.SigmaproduceSpecifications;
import bw.co.sigmaproduce.access.AccessPoint;
import bw.co.sigmaproduce.access.AccessPointDao;
import bw.co.sigmaproduce.access.AccessPointRepository;
import bw.co.sigmaproduce.access.type.AccessPointTypeDao;
import bw.co.sigmaproduce.access.type.AccessPointTypeRepository;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>Authorisation</code>.
 * </p>
 *
 * @see Authorisation
 */
public abstract class AuthorisationDaoBase
    implements AuthorisationDao
{

    protected final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(AuthorisationDaoBase.class);

    protected final AuthorisationRepository authorisationRepository;

    protected AccessPointDao accessPointDao;
    protected final AccessPointRepository accessPointRepository;

    protected AccessPointTypeDao accessPointTypeDao;
    protected final AccessPointTypeRepository accessPointTypeRepository;

    public AuthorisationDaoBase(
        AccessPointRepository accessPointRepository,
        AccessPointTypeRepository accessPointTypeRepository,
        AuthorisationRepository authorisationRepository
    ) {
        this.authorisationRepository = authorisationRepository;
        this.accessPointRepository = accessPointRepository;
        this.accessPointTypeRepository = accessPointTypeRepository;
    }

    /**
     * Sets the reference to <code>accessPointDao</code>.
     * @param accessPointDaoIn
     */
    @org.springframework.beans.factory.annotation.Autowired
    public void setAccessPointDao(@org.springframework.context.annotation.Lazy AccessPointDao accessPointDaoIn)
    {
        this.accessPointDao = accessPointDaoIn;
    }
    
    /**
     * Gets the reference to <code>accessPointDao</code>.
     * @return accessPointDao
     */
    protected AccessPointDao getAccessPointDao()
    {
        return this.accessPointDao;
    }

    /**
     * Gets the reference to <code>accessPointRepository</code>.
     * @return accessPointRepository
     */
    protected AccessPointRepository getAccessPointRepository()
    {
        return this.accessPointRepository;
    }

    /**
     * Sets the reference to <code>accessPointTypeDao</code>.
     * @param accessPointTypeDaoIn
     */
    @org.springframework.beans.factory.annotation.Autowired
    public void setAccessPointTypeDao(@Lazy AccessPointTypeDao accessPointTypeDaoIn)
    {
        this.accessPointTypeDao = accessPointTypeDaoIn;
    }
    
    /**
     * Gets the reference to <code>accessPointTypeDao</code>.
     * @return accessPointTypeDao
     */
    protected AccessPointTypeDao getAccessPointTypeDao()
    {
        return this.accessPointTypeDao;
    }

    /**
     * Gets the reference to <code>accessPointTypeRepository</code>.
     * @return accessPointTypeRepository
     */
    protected AccessPointTypeRepository getAccessPointTypeRepository()
    {
        return this.accessPointTypeRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.get - 'id' can not be null");
        }
        java.util.Optional<Authorisation> entity = authorisationRepository.findById(id);
        return transformEntity(transform, entity.get());
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public Authorisation get(java.lang.Long id)
    {
        return (Authorisation)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.load - 'id' can not be null");
        }
        java.util.Optional<Authorisation> entity = authorisationRepository.findById(id);
        return transformEntity(transform, entity.get());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorisation load(java.lang.Long id)
    {
        return (Authorisation)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> loadAll()
    {
        return (java.util.Collection<Authorisation>) this.loadAll(AuthorisationDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(AuthorisationDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
		
        final java.util.Collection<?> results;
        if(pageNumber < 0 || pageSize < 0) {
            results = authorisationRepository.findAll();
        } else {
            results = authorisationRepository.findAll(org.springframework.data.domain.PageRequest.of(pageSize, pageSize)).getContent();
        }
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param authorisation Authorisation
     */
    protected void _prePersist(final Authorisation authorisation)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param authorisation Authorisation
     */
    protected void _postPersist(final Authorisation authorisation)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param authorisation Authorisation
     */
    protected void _preUpdate(final Authorisation authorisation)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param authorisation Authorisation
     */
    protected void _postUpdate(final Authorisation authorisation)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param authorisation Authorisation
     */
    protected void _preRemove(final Authorisation authorisation)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param authorisation Authorisation
     */
    protected void _postRemove(final Authorisation authorisation)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorisation create(Authorisation authorisation)
    {
        return (Authorisation)this.create(AuthorisationDao.TRANSFORM_NONE, authorisation);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, Authorisation authorisation)
    {
        if (authorisation == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.create - 'authorisation' can not be null");
        }

        //prePersist event
        _prePersist(authorisation);

        authorisation = this.authorisationRepository.save(authorisation);

        //postPersist event
        _postPersist(authorisation);

        return this.transformEntity(transform, authorisation);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> create(final java.util.Collection<Authorisation> entities)
    {
        return (java.util.Collection<Authorisation>) create(AuthorisationDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> create(final int transform, final java.util.Collection<Authorisation> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.create - 'entities' can not be null");
        }
        java.util.Collection<Object> transformed = new java.util.ArrayList<Object>();
        for (Authorisation entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorisation create(
        java.util.Collection<java.lang.String> roles,
        java.lang.String createdBy,
        java.lang.String updatedBy,
        java.time.LocalDateTime createdDate,
        java.time.LocalDateTime updatedDate)
    {
        return (Authorisation)this.create(AuthorisationDao.TRANSFORM_NONE, roles, createdBy, updatedBy, createdDate, updatedDate);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        java.util.Collection<java.lang.String> roles,
        java.lang.String createdBy,
        java.lang.String updatedBy,
        java.time.LocalDateTime createdDate,
        java.time.LocalDateTime updatedDate)
    {
        Authorisation entity = new Authorisation();
        entity.setRoles(roles);
        entity.setCreatedBy(createdBy);
        entity.setUpdatedBy(updatedBy);
        entity.setCreatedDate(createdDate);
        entity.setUpdatedDate(updatedDate);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorisation create(
        AccessPoint accessPoint,
        java.lang.String createdBy,
        java.time.LocalDateTime createdDate)
    {
        return (Authorisation)this.create(AuthorisationDao.TRANSFORM_NONE, accessPoint, createdBy, createdDate);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        AccessPoint accessPoint,
        java.lang.String createdBy,
        java.time.LocalDateTime createdDate)
    {
        Authorisation entity = new Authorisation();
        entity.setAccessPoint(accessPoint);
        entity.setCreatedBy(createdBy);
        entity.setCreatedDate(createdDate);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(Authorisation authorisation)
    {
        if (authorisation == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.update - 'authorisation' can not be null");
        }

        //preUpdate event
        _preUpdate(authorisation);

        authorisation = this.authorisationRepository.save(authorisation);

        //postUpdate event
        _postUpdate(authorisation);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final java.util.Collection<Authorisation> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.update - 'entities' can not be null");
        }
        for (Authorisation entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Authorisation authorisation)
    {
        if (authorisation == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.remove - 'authorisation' can not be null");
        }
        //preRemove event
        _preRemove(authorisation);

        this.authorisationRepository.delete(authorisation);

        //postRemove event
        _postRemove(authorisation);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.remove - 'id' can not be null");
        }
        Authorisation entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(java.util.Collection<Authorisation> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Authorisation.remove - 'entities' can not be null");
        }
        for (Authorisation entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.authorisationRepository.delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByCriteria(AuthorisationCriteria searchCriteria)
    {
        return (java.util.Collection<Authorisation>)this.findByCriteria(AuthorisationDao.TRANSFORM_NONE, searchCriteria);
    }

    /**
     * {@inheritDoc} 7
     */
    @Override
    @SuppressWarnings("unchecked")
    public java.util.Collection<?> findByCriteria(final int transform, final AuthorisationCriteria searchCriteria)
    {
        org.springframework.data.jpa.domain.Specification<Authorisation> specifications = getFindByCriteriaSpecifications(searchCriteria);
        org.springframework.data.domain.Sort sort = getFindByCriteriaSort(searchCriteria);
        java.util.Collection results = null;
        org.springframework.data.domain.Pageable pageable = null;

        if(searchCriteria.getFetchSize() > 0 && searchCriteria.getPageNumber() > 0) {
            
            if(sort == null) {
                pageable = org.springframework.data.domain.PageRequest.of(searchCriteria.getPageNumber(), searchCriteria.getFetchSize());
            } else {
                pageable = org.springframework.data.domain.PageRequest.of(searchCriteria.getPageNumber(), searchCriteria.getFetchSize(), sort);
            }
        }

        if(pageable == null) {
            if(sort == null) {
                results = authorisationRepository.findAll(specifications);
            } else {
                results = authorisationRepository.findAll(specifications, sort);
            }
        } else {
            results = authorisationRepository.findAll(specifications, pageable).getContent();
        }

        if(results == null)  {
            return null;
        }
        
        transformEntities(transform, results);
        return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public org.springframework.data.domain.Page<Authorisation> findByCriteria(final org.springframework.data.domain.Pageable pageable, final AuthorisationCriteria searchCriteria) {
        
        org.springframework.data.jpa.domain.Specification<Authorisation> specifications = getFindByCriteriaSpecifications(searchCriteria);

        if(specifications == null) {
            return authorisationRepository.findAll(pageable);
        } else {
            return authorisationRepository.findAll(specifications, pageable);
        }
    }

    private org.springframework.data.domain.Sort getFindByCriteriaSort(final AuthorisationCriteria searchCriteria) {

        org.springframework.data.domain.Sort sort = null;
        return sort;
    }

    public org.springframework.data.jpa.domain.Specification<Authorisation> getFindByCriteriaSpecifications(final AuthorisationCriteria searchCriteria) {
        
        org.springframework.data.jpa.domain.Specification<Authorisation> specifications = null;
        
        if(org.apache.commons.lang3.StringUtils.isNotBlank(searchCriteria.getAccessPointName())) {
            specifications = AuthorisationSpecifications.findByAccessPointNameContainingIgnoreCase(searchCriteria.getAccessPointName());
        }

        if(org.apache.commons.lang3.StringUtils.isNotBlank(searchCriteria.getAccessPointUrl())) {
            if(specifications == null) {
                specifications = AuthorisationSpecifications.findByAccessPointUrlContainingIgnoreCase(searchCriteria.getAccessPointUrl());
            } else {
                specifications = specifications.and(AuthorisationSpecifications.findByAccessPointUrlContainingIgnoreCase(searchCriteria.getAccessPointUrl()));
            }
        }

        if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(searchCriteria.getRoles())) {
            if(specifications == null) {
                // specifications = SigmaproduceSpecifications.<Authorisation, java.lang.String>findByAttributeIn("roles", searchCriteria.getRoles());
            } else {
                // specifications = specifications.and(bw.co.sigmaproduce.SigmaproduceSpecifications.<Authorisation, java.lang.String>findByAttributeIn("roles", searchCriteria.getRoles()));
            }
        }

        return specifications;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findAccessTypeCodeAuthorisations(java.util.Set<java.lang.String> roles, java.util.Set<java.lang.String> accessPointTypeCodes)
    {
        return (java.util.Collection<Authorisation>)this.findAccessTypeCodeAuthorisations(AuthorisationDao.TRANSFORM_NONE, roles, accessPointTypeCodes);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findAccessTypeCodeAuthorisations(final int pageNumber, final int pageSize, final java.util.Set<java.lang.String> roles, final java.util.Set<java.lang.String> accessPointTypeCodes)
    {
        return (java.util.Collection<Authorisation>) this.findAccessTypeCodeAuthorisations(AuthorisationDao.TRANSFORM_NONE, pageNumber, pageSize, roles, accessPointTypeCodes);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> findAccessTypeCodeAuthorisations(final int transform, final java.util.Set<java.lang.String> roles, final java.util.Set<java.lang.String> accessPointTypeCodes)
    {
        return this.findAccessTypeCodeAuthorisations(transform, -1, -1, roles, accessPointTypeCodes);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public java.util.Collection<?> findAccessTypeCodeAuthorisations(final int transform, int pageNumber, int pageSize, final java.util.Set<java.lang.String> roles, final java.util.Set<java.lang.String> accessPointTypeCodes)
    {

        org.springframework.data.domain.Pageable pageable = null;
        if (pageNumber > 0 && pageSize > 0)
        {
            pageable = org.springframework.data.domain.PageRequest.of(pageNumber, pageSize);
        }

        java.util.Collection results = null;
        if(pageable == null) {
          results = authorisationRepository.findAccessTypeCodeAuthorisations(roles, accessPointTypeCodes);
        } else {
          results = authorisationRepository.findAccessTypeCodeAuthorisations(roles, accessPointTypeCodes, pageable).getContent();
        }

        transformEntities(transform, results);

        return results;
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByRolesAndUrl(java.lang.String url, java.util.Set<java.lang.String> roles)
    {
        return (java.util.Collection<Authorisation>)this.findByRolesAndUrl(AuthorisationDao.TRANSFORM_NONE, url, roles);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByRolesAndUrl(final int pageNumber, final int pageSize, final java.lang.String url, final java.util.Set<java.lang.String> roles)
    {
        return (java.util.Collection<Authorisation>) this.findByRolesAndUrl(AuthorisationDao.TRANSFORM_NONE, pageNumber, pageSize, url, roles);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> findByRolesAndUrl(final int transform, final java.lang.String url, final java.util.Set<java.lang.String> roles)
    {
        return this.findByRolesAndUrl(transform, -1, -1, url, roles);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public java.util.Collection<?> findByRolesAndUrl(final int transform, int pageNumber, int pageSize, final java.lang.String url, final java.util.Set<java.lang.String> roles)
    {

        org.springframework.data.domain.Pageable pageable = null;
        if (pageNumber > 0 && pageSize > 0)
        {
            pageable = org.springframework.data.domain.PageRequest.of(pageNumber, pageSize);
        }

        java.util.Collection results = null;
        if(pageable == null) {
          results = authorisationRepository.findByRolesAndUrl(url, roles);
        } else {
          results = authorisationRepository.findByRolesAndUrl(url, roles, pageable).getContent();
        }

        transformEntities(transform, results);

        return results;
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByUrl(java.lang.String url)
    {
        return (java.util.Collection<Authorisation>)this.findByUrl(AuthorisationDao.TRANSFORM_NONE, url);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByUrl(final int pageNumber, final int pageSize, final java.lang.String url)
    {
        return (java.util.Collection<Authorisation>) this.findByUrl(AuthorisationDao.TRANSFORM_NONE, pageNumber, pageSize, url);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> findByUrl(final int transform, final java.lang.String url)
    {
        return this.findByUrl(transform, -1, -1, url);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public java.util.Collection<?> findByUrl(final int transform, int pageNumber, int pageSize, final java.lang.String url)
    {

        org.springframework.data.domain.Pageable pageable = null;
        if (pageNumber > 0 && pageSize > 0)
        {
            pageable = org.springframework.data.domain.PageRequest.of(pageNumber, pageSize);
        }

        java.util.Collection results = null;
        if(pageable == null) {
          results = authorisationRepository.findByUrl(url);
        } else {
          results = authorisationRepository.findByUrl(url, pageable).getContent();
        }

        transformEntities(transform, results);

        return results;
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByAccessUrlAndCode(java.lang.String url, java.lang.String code)
    {
        return (java.util.Collection<Authorisation>)this.findByAccessUrlAndCode(AuthorisationDao.TRANSFORM_NONE, url, code);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByAccessUrlAndCode(final int pageNumber, final int pageSize, final java.lang.String url, final java.lang.String code)
    {
        return (java.util.Collection<Authorisation>) this.findByAccessUrlAndCode(AuthorisationDao.TRANSFORM_NONE, pageNumber, pageSize, url, code);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> findByAccessUrlAndCode(final int transform, final java.lang.String url, final java.lang.String code)
    {
        return this.findByAccessUrlAndCode(transform, -1, -1, url, code);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public java.util.Collection<?> findByAccessUrlAndCode(final int transform, int pageNumber, int pageSize, final java.lang.String url, final java.lang.String code)
    {

        org.springframework.data.domain.Pageable pageable = null;
        if (pageNumber > 0 && pageSize > 0)
        {
            pageable = org.springframework.data.domain.PageRequest.of(pageNumber, pageSize);
        }

        java.util.Collection results = null;
        if(pageable == null) {
          results = authorisationRepository.findByAccessUrlAndCode(url, code);
        } else {
          results = authorisationRepository.findByAccessUrlAndCode(url, code, pageable).getContent();
        }

        transformEntities(transform, results);

        return results;
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByRolesAndUrlContaining(java.lang.String url, java.util.Set<java.lang.String> roles)
    {
        return (java.util.Collection<Authorisation>)this.findByRolesAndUrlContaining(AuthorisationDao.TRANSFORM_NONE, url, roles);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<Authorisation> findByRolesAndUrlContaining(final int pageNumber, final int pageSize, final java.lang.String url, final java.util.Set<java.lang.String> roles)
    {
        return (java.util.Collection<Authorisation>) this.findByRolesAndUrlContaining(AuthorisationDao.TRANSFORM_NONE, pageNumber, pageSize, url, roles);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.Collection<?> findByRolesAndUrlContaining(final int transform, final java.lang.String url, final java.util.Set<java.lang.String> roles)
    {
        return this.findByRolesAndUrlContaining(transform, -1, -1, url, roles);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public java.util.Collection<?> findByRolesAndUrlContaining(final int transform, int pageNumber, int pageSize, final java.lang.String url, final java.util.Set<java.lang.String> roles)
    {

        org.springframework.data.domain.Pageable pageable = null;
        if (pageNumber > 0 && pageSize > 0)
        {
            pageable = org.springframework.data.domain.PageRequest.of(pageNumber, pageSize);
        }

        java.util.Collection results = null;
        if(pageable == null) {
          results = authorisationRepository.findByRolesAndUrlContaining(url, roles);
        } else {
          results = authorisationRepository.findByRolesAndUrlContaining(url, roles, pageable).getContent();
        }

        transformEntities(transform, results);

        return results;
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>AuthorisationDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Authorisation} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link AuthorisationVO} - {@link #TRANSFORM_AUTHORISATIONVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link AuthorisationDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see AuthorisationDao#transformEntity(int, Authorisation)
     */
    @Override
    public Object transformEntity(final int transform, final Authorisation entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_AUTHORISATIONVO :
                    target = toAuthorisationVO(entity);
                    break;
                case AuthorisationDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final java.util.Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_AUTHORISATIONVO :
                org.apache.commons.collections4.CollectionUtils.transform(entities, this.AUTHORISATIONVO_TRANSFORMER);
                break;
            case AuthorisationDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see AuthorisationDao#toEntities(java.util.Collection)
     */
    @Override
    public void toEntities(final java.util.Collection<?> results)
    {
        if (results != null)
        {
            org.apache.commons.collections4.CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link Authorisation}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof Authorisation)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return Authorisation
     */
    protected Authorisation toEntity(Object[] row)
    {
        Authorisation target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof Authorisation)
                {
                    target = (Authorisation)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<AuthorisationVO> toAuthorisationVOCollection(java.util.Collection<Authorisation> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        java.util.Collection result = new java.util.ArrayList(entities);
        org.apache.commons.collections4.CollectionUtils.transform(result, this.AUTHORISATIONVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public AuthorisationVO[] toAuthorisationVOArray(java.util.Collection<?> entities)
    {
        AuthorisationVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toAuthorisationVOCollection(collection);
            result = (AuthorisationVO[]) collection.toArray(new AuthorisationVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link AuthorisationDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toAuthorisationVO(this.toEntity(row))
     * @see AuthorisationDao#toAuthorisationVO(Authorisation)
     */
    protected AuthorisationVO toAuthorisationVO(Object[] row)
    {
        return this.toAuthorisationVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link AuthorisationVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections4.Transformer AUTHORISATIONVO_TRANSFORMER =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Authorisation)
                {
                    final Authorisation entity = (Authorisation)input;
                    result = toAuthorisationVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toAuthorisationVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public void authorisationVOToEntityCollection(java.util.Collection<?> instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof AuthorisationVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections4.CollectionUtils.transform(instances, this.AuthorisationVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections4.Transformer AuthorisationVOToEntityTransformer =
        new org.apache.commons.collections4.Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return authorisationVOToEntity((AuthorisationVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toAuthorisationVO(
        Authorisation source,
        AuthorisationVO target)
    {
        target.setId(source.getId());
        target.setCreatedBy(source.getCreatedBy());
        target.setUpdatedBy(source.getUpdatedBy());
        target.setCreatedDate(source.getCreatedDate());
        target.setUpdatedDate(source.getUpdatedDate());
        // No conversion for target.accessPoint (can't convert source.getAccessPoint():AccessPoint to AccessPointVO)
        if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(target.getRoles())){
            target.getRoles().clear();
        } else {
            target.setRoles(new java.util.ArrayList<>());
        }
        
        if(null!=source.getRoles()) {
            target.getRoles().addAll(source.getRoles());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorisationVO toAuthorisationVO(final Authorisation entity)
    {
        AuthorisationVO target = null;
        if (entity != null)
        {
            target =  new AuthorisationVO();
            this.toAuthorisationVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void authorisationVOToEntity(
        AuthorisationVO source,
        Authorisation target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getRoles() != null)
        {
            if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(target.getRoles())){
                target.getRoles().clear();
            } else {
                target.setRoles(new java.util.ArrayList<>());
            }
            if(null != source.getRoles()) {
                target.getRoles().addAll(source.getRoles());
            }
        }
        if (copyIfNull || source.getCreatedBy() != null)
        {
            target.setCreatedBy(source.getCreatedBy());
        }
        if (copyIfNull || source.getUpdatedBy() != null)
        {
            target.setUpdatedBy(source.getUpdatedBy());
        }
        if (copyIfNull || source.getCreatedDate() != null)
        {
            target.setCreatedDate(source.getCreatedDate());
        }
        if (copyIfNull || source.getUpdatedDate() != null)
        {
            target.setUpdatedDate(source.getUpdatedDate());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return bw.co.sigmaproduce.PrincipalStore.get();
    }


    /**
     * Create or Update the <code>authorisation</code> instance in the persistent store.
     * @param authorisation
     */
    @Override
    public Authorisation createOrUpdate(Authorisation authorisation)
    {
        if(authorisation.getId() == null)
        {
            return (Authorisation)this.create(TRANSFORM_NONE,authorisation);
        }
        this.update(authorisation);
        return authorisation;
    }

    // spring-hibernate-dao-base merge-point
}
