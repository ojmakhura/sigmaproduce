// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4or5=true hibernateVersion=5.6.3.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.access;

import bw.co.sigmaproduce.SigmaproduceSpecifications;
import bw.co.sigmaproduce.access.type.AccessPointType;
import bw.co.sigmaproduce.access.type.AccessPointTypeDao;
import bw.co.sigmaproduce.access.type.AccessPointTypeRepository;
import bw.co.sigmaproduce.PrincipalStore;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>AccessPoint</code>.
 * </p>
 *
 * @see AccessPoint
 */
public abstract class AccessPointDaoBase
    implements AccessPointDao
{

    protected final Logger logger = LoggerFactory.getLogger(AccessPointDaoBase.class);

    protected final AccessPointRepository accessPointRepository;

    protected AccessPointTypeDao accessPointTypeDao;
    protected final AccessPointTypeRepository accessPointTypeRepository;

    public AccessPointDaoBase(
        AccessPointTypeRepository accessPointTypeRepository,
        AccessPointRepository accessPointRepository
    ) {
        this.accessPointRepository = accessPointRepository;
        this.accessPointTypeRepository = accessPointTypeRepository;
    }

    /**
     * Sets the reference to <code>accessPointTypeDao</code>.
     * @param accessPointTypeDaoIn
     */
    @Autowired
    public void setAccessPointTypeDao(@Lazy AccessPointTypeDao accessPointTypeDaoIn)
    {
        this.accessPointTypeDao = accessPointTypeDaoIn;
    }
    
    /**
     * Gets the reference to <code>accessPointTypeDao</code>.
     * @return accessPointTypeDao
     */
    protected AccessPointTypeDao getAccessPointTypeDao()
    {
        return this.accessPointTypeDao;
    }

    /**
     * Gets the reference to <code>accessPointTypeRepository</code>.
     * @return accessPointTypeRepository
     */
    protected AccessPointTypeRepository getAccessPointTypeRepository()
    {
        return this.accessPointTypeRepository;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.get - 'id' can not be null");
        }
        Optional<AccessPoint> entity = accessPointRepository.findById(id);
        return transformEntity(transform, entity.get());
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint get(Long id)
    {
        return (AccessPoint)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.load - 'id' can not be null");
        }
        Optional<AccessPoint> entity = accessPointRepository.findById(id);
        return transformEntity(transform, entity.get());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint load(Long id)
    {
        return (AccessPoint)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPoint> loadAll()
    {
        return (Collection<AccessPoint>) this.loadAll(AccessPointDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(AccessPointDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
		
        final Collection<?> results;
        if(pageNumber < 0 || pageSize < 0) {
            results = accessPointRepository.findAll();
        } else {
            results = accessPointRepository.findAll(PageRequest.of(pageSize, pageSize)).getContent();
        }
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param accessPoint AccessPoint
     */
    protected void _prePersist(final AccessPoint accessPoint)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param accessPoint AccessPoint
     */
    protected void _postPersist(final AccessPoint accessPoint)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param accessPoint AccessPoint
     */
    protected void _preUpdate(final AccessPoint accessPoint)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param accessPoint AccessPoint
     */
    protected void _postUpdate(final AccessPoint accessPoint)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param accessPoint AccessPoint
     */
    protected void _preRemove(final AccessPoint accessPoint)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param accessPoint AccessPoint
     */
    protected void _postRemove(final AccessPoint accessPoint)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint create(AccessPoint accessPoint)
    {
        return (AccessPoint)this.create(AccessPointDao.TRANSFORM_NONE, accessPoint);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, AccessPoint accessPoint)
    {
        if (accessPoint == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.create - 'accessPoint' can not be null");
        }

        //prePersist event
        _prePersist(accessPoint);

        accessPoint = this.accessPointRepository.save(accessPoint);

        //postPersist event
        _postPersist(accessPoint);

        return this.transformEntity(transform, accessPoint);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPoint> create(final Collection<AccessPoint> entities)
    {
        return (Collection<AccessPoint>) create(AccessPointDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<AccessPoint> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.create - 'entities' can not be null");
        }
        Collection<Object> transformed = new ArrayList<Object>();
        for (AccessPoint entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint create(
        String createdBy,
        String updatedBy,
        String name,
        String url,
        String icon,
        LocalDateTime createdDate,
        LocalDateTime updatedDate)
    {
        return (AccessPoint)this.create(AccessPointDao.TRANSFORM_NONE, createdBy, updatedBy, name, url, icon, createdDate, updatedDate);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        String createdBy,
        String updatedBy,
        String name,
        String url,
        String icon,
        LocalDateTime createdDate,
        LocalDateTime updatedDate)
    {
        AccessPoint entity = new AccessPoint();
        entity.setCreatedBy(createdBy);
        entity.setUpdatedBy(updatedBy);
        entity.setName(name);
        entity.setUrl(url);
        entity.setIcon(icon);
        entity.setCreatedDate(createdDate);
        entity.setUpdatedDate(updatedDate);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint create(
        AccessPointType accessPointType,
        String createdBy,
        LocalDateTime createdDate,
        String name,
        String url)
    {
        return (AccessPoint)this.create(AccessPointDao.TRANSFORM_NONE, accessPointType, createdBy, createdDate, name, url);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        AccessPointType accessPointType,
        String createdBy,
        LocalDateTime createdDate,
        String name,
        String url)
    {
        AccessPoint entity = new AccessPoint();
        entity.setAccessPointType(accessPointType);
        entity.setCreatedBy(createdBy);
        entity.setCreatedDate(createdDate);
        entity.setName(name);
        entity.setUrl(url);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(AccessPoint accessPoint)
    {
        if (accessPoint == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.update - 'accessPoint' can not be null");
        }

        //preUpdate event
        _preUpdate(accessPoint);

        accessPoint = this.accessPointRepository.save(accessPoint);

        //postUpdate event
        _postUpdate(accessPoint);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<AccessPoint> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.update - 'entities' can not be null");
        }
        for (AccessPoint entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(AccessPoint accessPoint)
    {
        if (accessPoint == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.remove - 'accessPoint' can not be null");
        }
        //preRemove event
        _preRemove(accessPoint);

        this.accessPointRepository.delete(accessPoint);

        //postRemove event
        _postRemove(accessPoint);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.remove - 'id' can not be null");
        }
        AccessPoint entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<AccessPoint> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "AccessPoint.remove - 'entities' can not be null");
        }
        for (AccessPoint entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.accessPointRepository.delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPoint> findByCriteria(AccessPointCriteria criteria)
    {
        return (Collection<AccessPoint>)this.findByCriteria(AccessPointDao.TRANSFORM_NONE, criteria);
    }

    /**
     * {@inheritDoc} 7
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByCriteria(final int transform, final AccessPointCriteria criteria)
    {
        Specification<AccessPoint> specifications = getFindByCriteriaSpecifications(criteria);
        Sort sort = getFindByCriteriaSort(criteria);
        Collection results = null;
        Pageable pageable = null;

        if(criteria.getFetchSize() > 0 && criteria.getPageNumber() > 0) {
            
            if(sort == null) {
                pageable = PageRequest.of(criteria.getPageNumber(), criteria.getFetchSize());
            } else {
                pageable = PageRequest.of(criteria.getPageNumber(), criteria.getFetchSize(), sort);
            }
        }

        if(pageable == null) {
            if(sort == null) {
                results = accessPointRepository.findAll(specifications);
            } else {
                results = accessPointRepository.findAll(specifications, sort);
            }
        } else {
            results = accessPointRepository.findAll(specifications, pageable).getContent();
        }

        if(results == null)  {
            return null;
        }
        
        transformEntities(transform, results);
        return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Page<AccessPoint> findByCriteria(final Pageable pageable, final AccessPointCriteria criteria) {
        
        Specification<AccessPoint> specifications = getFindByCriteriaSpecifications(criteria);

        if(specifications == null) {
            return accessPointRepository.findAll(pageable);
        } else {
            return accessPointRepository.findAll(specifications, pageable);
        }
    }

    private Sort getFindByCriteriaSort(final AccessPointCriteria criteria) {

        Sort sort = null;
        if(StringUtils.isNotBlank(criteria.getName())) {
            sort = Sort.by("name").ascending();
        }

        return sort;
    }

    public Specification<AccessPoint> getFindByCriteriaSpecifications(final AccessPointCriteria criteria) {
        
        Specification<AccessPoint> specifications = null;
        
        if(StringUtils.isNotBlank(criteria.getType())) {
            specifications = AccessPointSpecifications.findByTypeContainingIgnoreCase(criteria.getType());
        }

        if(StringUtils.isNotBlank(criteria.getName())) {
            if(specifications == null) {
                specifications = SigmaproduceSpecifications.<AccessPoint>findByAttributeContainingIgnoreCase(criteria.getName(), "name");
            } else {
                specifications = specifications.and(SigmaproduceSpecifications.<AccessPoint>findByAttributeContainingIgnoreCase(criteria.getName(), "name"));
            }
        }

        if(StringUtils.isNotBlank(criteria.getUrl())) {
            if(specifications == null) {
                specifications = SigmaproduceSpecifications.<AccessPoint>findByAttributeContainingIgnoreCase(criteria.getUrl(), "url");
            } else {
                specifications = specifications.and(SigmaproduceSpecifications.<AccessPoint>findByAttributeContainingIgnoreCase(criteria.getUrl(), "url"));
            }
        }

        if(criteria.getTypeId() != null) {
            if(specifications == null) {
                specifications = AccessPointSpecifications.findByAccessPointTypeId(criteria.getTypeId());
            } else {
                specifications = specifications.and(AccessPointSpecifications.findByAccessPointTypeId(criteria.getTypeId()));
            }
        }

        return specifications;
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>AccessPointDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link AccessPoint} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link AccessPointVO} - {@link #TRANSFORM_ACCESSPOINTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link AccessPointDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see AccessPointDao#transformEntity(int, AccessPoint)
     */
    @Override
    public Object transformEntity(final int transform, final AccessPoint entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_ACCESSPOINTVO :
                    target = toAccessPointVO(entity);
                    break;
                case AccessPointDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_ACCESSPOINTVO :
                CollectionUtils.transform(entities, this.ACCESSPOINTVO_TRANSFORMER);
                break;
            case AccessPointDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see AccessPointDao#toEntities(Collection)
     */
    @Override
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link AccessPoint}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof AccessPoint)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return AccessPoint
     */
    protected AccessPoint toEntity(Object[] row)
    {
        AccessPoint target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof AccessPoint)
                {
                    target = (AccessPoint)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPointVO> toAccessPointVOCollection(Collection<AccessPoint> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        Collection result = new ArrayList(entities);
        CollectionUtils.transform(result, this.ACCESSPOINTVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public AccessPointVO[] toAccessPointVOArray(Collection<?> entities)
    {
        AccessPointVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final Collection collection = new ArrayList(entities);
            this.toAccessPointVOCollection(collection);
            result = (AccessPointVO[]) collection.toArray(new AccessPointVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link AccessPointDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toAccessPointVO(this.toEntity(row))
     * @see AccessPointDao#toAccessPointVO(AccessPoint)
     */
    protected AccessPointVO toAccessPointVO(Object[] row)
    {
        return this.toAccessPointVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link AccessPointVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ACCESSPOINTVO_TRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof AccessPoint)
                {
                    final AccessPoint entity = (AccessPoint)input;
                    result = toAccessPointVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toAccessPointVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointVOToEntityCollection(Collection<?> instances)
    {
        if (instances != null)
        {
            for (final Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof AccessPointVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.AccessPointVOToEntityTransformer);
        }
    }

    private final Transformer AccessPointVOToEntityTransformer =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return accessPointVOToEntity((AccessPointVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toAccessPointVO(
        AccessPoint source,
        AccessPointVO target)
    {
        target.setId(source.getId());
        target.setCreatedBy(source.getCreatedBy());
        target.setUpdatedBy(source.getUpdatedBy());
        target.setCreatedDate(source.getCreatedDate());
        target.setUpdatedDate(source.getUpdatedDate());
        // No conversion for target.accessPointType (can't convert source.getAccessPointType():AccessPointType to type.AccessPointTypeVO)
        target.setName(source.getName());
        target.setUrl(source.getUrl());
        target.setIcon(source.getIcon());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointVO toAccessPointVO(final AccessPoint entity)
    {
        AccessPointVO target = null;
        if (entity != null)
        {
            target =  new AccessPointVO();
            this.toAccessPointVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointVOToEntity(
        AccessPointVO source,
        AccessPoint target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getCreatedBy() != null)
        {
            target.setCreatedBy(source.getCreatedBy());
        }
        if (copyIfNull || source.getUpdatedBy() != null)
        {
            target.setUpdatedBy(source.getUpdatedBy());
        }
        if (copyIfNull || source.getName() != null)
        {
            target.setName(source.getName());
        }
        if (copyIfNull || source.getUrl() != null)
        {
            target.setUrl(source.getUrl());
        }
        if (copyIfNull || source.getIcon() != null)
        {
            target.setIcon(source.getIcon());
        }
        if (copyIfNull || source.getCreatedDate() != null)
        {
            target.setCreatedDate(source.getCreatedDate());
        }
        if (copyIfNull || source.getUpdatedDate() != null)
        {
            target.setUpdatedDate(source.getUpdatedDate());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint searchUniqueName(final String name)
    {

        Specification<AccessPoint> spec = SigmaproduceSpecifications.<AccessPoint, String>findByAttribute("name", name);
        List<AccessPoint> entities = accessPointRepository.findAll(spec, Sort.by("name"));
        if(CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueName(final int transform, final String name)
    {
        final AccessPoint entity=this.searchUniqueName(name);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPoint searchUniqueIcon(final String icon)
    {

        Specification<AccessPoint> spec = SigmaproduceSpecifications.<AccessPoint, String>findByAttribute("icon", icon);
        List<AccessPoint> entities = accessPointRepository.findAll(spec, Sort.by("icon"));
        if(CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueIcon(final int transform, final String icon)
    {
        final AccessPoint entity=this.searchUniqueIcon(icon);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }


    /**
     * Create or Update the <code>accessPoint</code> instance in the persistent store.
     * @param accessPoint
     */
    @Override
    public AccessPoint createOrUpdate(AccessPoint accessPoint)
    {
        if(accessPoint.getId() == null)
        {
            return (AccessPoint)this.create(TRANSFORM_NONE,accessPoint);
        }
        this.update(accessPoint);
        return accessPoint;
    }

    // spring-hibernate-dao-base merge-point
}