// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4or5=true hibernateVersion=5.6.3.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.access.type;

import bw.co.sigmaproduce.PrincipalStore;
import bw.co.sigmaproduce.SigmaproduceSpecifications;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Transformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>AccessPointType</code>.
 * </p>
 *
 * @see AccessPointType
 */
public abstract class AccessPointTypeDaoBase
    implements AccessPointTypeDao
{

    protected final Logger logger = LoggerFactory.getLogger(AccessPointTypeDaoBase.class);

    protected final AccessPointTypeRepository accessPointTypeRepository;

    public AccessPointTypeDaoBase(
        AccessPointTypeRepository accessPointTypeRepository
    ) {
        this.accessPointTypeRepository = accessPointTypeRepository;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.get - 'id' can not be null");
        }
        Optional<AccessPointType> entity = accessPointTypeRepository.findById(id);
        return transformEntity(transform, entity.get());
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointType get(Long id)
    {
        return (AccessPointType)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.load - 'id' can not be null");
        }
        Optional<AccessPointType> entity = accessPointTypeRepository.findById(id);
        return transformEntity(transform, entity.get());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointType load(Long id)
    {
        return (AccessPointType)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPointType> loadAll()
    {
        return (Collection<AccessPointType>) this.loadAll(AccessPointTypeDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(AccessPointTypeDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
		
        final Collection<?> results;
        if(pageNumber < 0 || pageSize < 0) {
            results = accessPointTypeRepository.findAll();
        } else {
            results = accessPointTypeRepository.findAll(PageRequest.of(pageSize, pageSize)).getContent();
        }
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param accessPointType AccessPointType
     */
    protected void _prePersist(final AccessPointType accessPointType)
    {
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param accessPointType AccessPointType
     */
    protected void _postPersist(final AccessPointType accessPointType)
    {
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param accessPointType AccessPointType
     */
    protected void _preUpdate(final AccessPointType accessPointType)
    {
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param accessPointType AccessPointType
     */
    protected void _postUpdate(final AccessPointType accessPointType)
    {
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param accessPointType AccessPointType
     */
    protected void _preRemove(final AccessPointType accessPointType)
    {
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param accessPointType AccessPointType
     */
    protected void _postRemove(final AccessPointType accessPointType)
    {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointType create(AccessPointType accessPointType)
    {
        return (AccessPointType)this.create(AccessPointTypeDao.TRANSFORM_NONE, accessPointType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, AccessPointType accessPointType)
    {
        if (accessPointType == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.create - 'accessPointType' can not be null");
        }

        //prePersist event
        _prePersist(accessPointType);

        accessPointType = this.accessPointTypeRepository.save(accessPointType);

        //postPersist event
        _postPersist(accessPointType);

        return this.transformEntity(transform, accessPointType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPointType> create(final Collection<AccessPointType> entities)
    {
        return (Collection<AccessPointType>) create(AccessPointTypeDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<AccessPointType> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.create - 'entities' can not be null");
        }
        Collection<Object> transformed = new ArrayList<Object>();
        for (AccessPointType entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointType create(
        String code,
        String name,
        String description)
    {
        return (AccessPointType)this.create(AccessPointTypeDao.TRANSFORM_NONE, code, name, description);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        String code,
        String name,
        String description)
    {
        AccessPointType entity = new AccessPointType();
        entity.setCode(code);
        entity.setName(name);
        entity.setDescription(description);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(AccessPointType accessPointType)
    {
        if (accessPointType == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.update - 'accessPointType' can not be null");
        }

        //preUpdate event
        _preUpdate(accessPointType);

        accessPointType = this.accessPointTypeRepository.save(accessPointType);

        //postUpdate event
        _postUpdate(accessPointType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<AccessPointType> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.update - 'entities' can not be null");
        }
        for (AccessPointType entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(AccessPointType accessPointType)
    {
        if (accessPointType == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.remove - 'accessPointType' can not be null");
        }
        //preRemove event
        _preRemove(accessPointType);

        this.accessPointTypeRepository.delete(accessPointType);

        //postRemove event
        _postRemove(accessPointType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.remove - 'id' can not be null");
        }
        AccessPointType entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<AccessPointType> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "AccessPointType.remove - 'entities' can not be null");
        }
        for (AccessPointType entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.accessPointTypeRepository.delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<AccessPointType> findByCriteria(final String criteria)
    {
        try
        {
            return this.handleFindByCriteria(criteria);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'AccessPointTypeDao.findByCriteria(String criteria)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #findByCriteria(String)}
     * @param criteria
     * @return Collection<AccessPointType>
     * @throws Exception
     */
    protected abstract Collection<AccessPointType> handleFindByCriteria(String criteria)
        throws Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>AccessPointTypeDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link AccessPointType} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link AccessPointTypeVO} - {@link #TRANSFORM_ACCESSPOINTTYPEVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link AccessPointTypeDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see AccessPointTypeDao#transformEntity(int, AccessPointType)
     */
    @Override
    public Object transformEntity(final int transform, final AccessPointType entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_ACCESSPOINTTYPEVO :
                    target = toAccessPointTypeVO(entity);
                    break;
                case AccessPointTypeDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_ACCESSPOINTTYPEVO :
                CollectionUtils.transform(entities, this.ACCESSPOINTTYPEVO_TRANSFORMER);
                break;
            case AccessPointTypeDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see AccessPointTypeDao#toEntities(Collection)
     */
    @Override
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link AccessPointType}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof AccessPointType)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return AccessPointType
     */
    protected AccessPointType toEntity(Object[] row)
    {
        AccessPointType target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof AccessPointType)
                {
                    target = (AccessPointType)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<AccessPointTypeVO> toAccessPointTypeVOCollection(Collection<AccessPointType> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        Collection result = new ArrayList(entities);
        CollectionUtils.transform(result, this.ACCESSPOINTTYPEVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public AccessPointTypeVO[] toAccessPointTypeVOArray(Collection<?> entities)
    {
        AccessPointTypeVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final Collection collection = new ArrayList(entities);
            this.toAccessPointTypeVOCollection(collection);
            result = (AccessPointTypeVO[]) collection.toArray(new AccessPointTypeVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link AccessPointTypeDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toAccessPointTypeVO(this.toEntity(row))
     * @see AccessPointTypeDao#toAccessPointTypeVO(AccessPointType)
     */
    protected AccessPointTypeVO toAccessPointTypeVO(Object[] row)
    {
        return this.toAccessPointTypeVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link AccessPointTypeVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ACCESSPOINTTYPEVO_TRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof AccessPointType)
                {
                    final AccessPointType entity = (AccessPointType)input;
                    result = toAccessPointTypeVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toAccessPointTypeVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointTypeVOToEntityCollection(Collection<?> instances)
    {
        if (instances != null)
        {
            for (final Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof AccessPointTypeVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.AccessPointTypeVOToEntityTransformer);
        }
    }

    private final Transformer AccessPointTypeVOToEntityTransformer =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return accessPointTypeVOToEntity((AccessPointTypeVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toAccessPointTypeVO(
        AccessPointType source,
        AccessPointTypeVO target)
    {
        target.setId(source.getId());
        target.setCode(source.getCode());
        target.setName(source.getName());
        target.setDescription(source.getDescription());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointTypeVO toAccessPointTypeVO(final AccessPointType entity)
    {
        AccessPointTypeVO target = null;
        if (entity != null)
        {
            target =  new AccessPointTypeVO();
            this.toAccessPointTypeVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointTypeVOToEntity(
        AccessPointTypeVO source,
        AccessPointType target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getCode() != null)
        {
            target.setCode(source.getCode());
        }
        if (copyIfNull || source.getName() != null)
        {
            target.setName(source.getName());
        }
        if (copyIfNull || source.getDescription() != null)
        {
            target.setDescription(source.getDescription());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointType searchUniqueCode(final String code)
    {

        Specification<AccessPointType> spec = SigmaproduceSpecifications.<AccessPointType, String>findByAttribute(code, "code");
        List<AccessPointType> entities = accessPointTypeRepository.findAll(spec, Sort.by("code"));
        if(CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCode(final int transform, final String code)
    {
        final AccessPointType entity=this.searchUniqueCode(code);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointType searchUniqueName(final String name)
    {

        Specification<AccessPointType> spec = SigmaproduceSpecifications.<AccessPointType, String>findByAttribute(name, "name");
        List<AccessPointType> entities = accessPointTypeRepository.findAll(spec, Sort.by("name"));
        if(CollectionUtils.isEmpty(entities)) {
            return null;
        }

        return entities.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueName(final int transform, final String name)
    {
        final AccessPointType entity=this.searchUniqueName(name);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }


    /**
     * Create or Update the <code>accessPointType</code> instance in the persistent store.
     * @param accessPointType
     */
    @Override
    public AccessPointType createOrUpdate(AccessPointType accessPointType)
    {
        if(accessPointType.getId() == null)
        {
            return (AccessPointType)this.create(TRANSFORM_NONE,accessPointType);
        }
        this.update(accessPointType);
        return accessPointType;
    }

    // spring-hibernate-dao-base merge-point
}