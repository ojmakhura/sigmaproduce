// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 05/31/2024 22:50:30+0200.
//
package bw.co.sigmaproduce.access;

import java.io.Serializable;
import java.time.LocalDateTime;

import bw.co.sigmaproduce.access.type.AccessPointType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;

/**
 * TODO: Model Documentation for AccessPoint
 */
// {access_point_unique=[NAME, URL, ACCESS_POINT_TYPE_FK]}
@Entity
@Table(
    name = "ACCESS_POINT"    , uniqueConstraints= {
        @UniqueConstraint(name="access_point_unique", columnNames={"NAME", "URL", "ACCESS_POINT_TYPE_FK"})
    }
)
// Uncomment to enable caching for AccessPoint
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQueries
({
    @NamedQuery(name = "AccessPoint.findAll", query = "SELECT a FROM AccessPoint AS a"),
})
// HibernateEntity.vsl annotations merge-point
public class AccessPoint
    implements Serializable, Comparable<AccessPoint>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 8597053924670481416L;

    // Generate 8 attributes
    private String createdBy;

    /**
     * TODO: Model Documentation for AccessPoint.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = false, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for AccessPoint.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private String updatedBy;

    /**
     * TODO: Model Documentation for AccessPoint.updatedBy
     * @return this.updatedBy String
     */
    @Column(name = "UPDATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for AccessPoint.updatedBy
     * @param updatedByIn String
     */
    public void setUpdatedBy(String updatedByIn)
    {
        this.updatedBy = updatedByIn;
    }

    private String name;

    /**
     * TODO: Model Documentation for AccessPoint.name
     * @return this.name String
     */
    @Column(name = "NAME", unique = true, nullable = false, insertable = true, updatable = true)
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for AccessPoint.name
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private String url;

    /**
     * TODO: Model Documentation for AccessPoint.url
     * @return this.url String
     */
    @Column(name = "URL", unique = false, nullable = false, insertable = true, updatable = true)
    public String getUrl()
    {
        return this.url;
    }

    /**
     * TODO: Model Documentation for AccessPoint.url
     * @param urlIn String
     */
    public void setUrl(String urlIn)
    {
        this.url = urlIn;
    }

    private String icon;

    /**
     * TODO: Model Documentation for AccessPoint.icon
     * @return this.icon String
     */
    @Column(name = "ICON", unique = false, nullable = true, insertable = true, updatable = true)
    public String getIcon()
    {
        return this.icon;
    }

    /**
     * TODO: Model Documentation for AccessPoint.icon
     * @param iconIn String
     */
    public void setIcon(String iconIn)
    {
        this.icon = iconIn;
    }

    private LocalDateTime createdDate;

    /**
     * TODO: Model Documentation for AccessPoint.createdDate
     * @return this.createdDate LocalDateTime
     */
    @Column(name = "CREATED_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for AccessPoint.createdDate
     * @param createdDateIn LocalDateTime
     */
    public void setCreatedDate(LocalDateTime createdDateIn)
    {
        this.createdDate = createdDateIn;
    }

    private LocalDateTime updatedDate;

    /**
     * TODO: Model Documentation for AccessPoint.updatedDate
     * @return this.updatedDate LocalDateTime
     */
    @Column(name = "UPDATED_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for AccessPoint.updatedDate
     * @param updatedDateIn LocalDateTime
     */
    public void setUpdatedDate(LocalDateTime updatedDateIn)
    {
        this.updatedDate = updatedDateIn;
    }

    private Long id;

    /**
     * TODO: Model Documentation for AccessPoint.id
     * @return this.id Long
     */
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator="ACCESS_POINT_SEQ")
    @SequenceGenerator(name="ACCESS_POINT_SEQ", sequenceName="ACCESS_POINT_SEQ", allocationSize=1)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for AccessPoint.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    private AccessPointType accessPointType;

    /**
     * TODO: Model Documentation for AccessPointType
     * @return this.accessPointType AccessPointType
     */
    @ManyToOne(optional = false,  fetch = FetchType.LAZY)
    @JoinColumn(name = "ACCESS_POINT_TYPE_FK", unique = false)
    public AccessPointType getAccessPointType()
    {
        return this.accessPointType;
    }

    /**
     * TODO: Model Documentation for AccessPointType
     * @param accessPointTypeIn AccessPointType
     */
    public void setAccessPointType(AccessPointType accessPointTypeIn)
    {
        this.accessPointType = accessPointTypeIn;
    }

    /**
     * Returns <code>true</code> if the argument is an AccessPoint instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof AccessPoint))
        {
            return false;
        }
        final AccessPoint that = (AccessPoint)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link AccessPoint}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link AccessPoint}.
         * @return new AccessPoint()
         */
        public static AccessPoint newInstance()
        {
            return new AccessPoint();
        }

        /**
         * Constructs a new instance of {@link AccessPoint}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdBy String
         * @param name String
         * @param url String
         * @param createdDate LocalDateTime
         * @param accessPointType AccessPointType
         * @return newInstance
         */
        public static AccessPoint newInstance(String createdBy, String name, String url, LocalDateTime createdDate, AccessPointType accessPointType)
        {
            final AccessPoint entity = new AccessPoint();
            entity.setCreatedBy(createdBy);
            entity.setName(name);
            entity.setUrl(url);
            entity.setCreatedDate(createdDate);
            entity.setAccessPointType(accessPointType);
            return entity;
        }

        /**
         * Constructs a new instance of {@link AccessPoint}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param createdBy String
         * @param updatedBy String
         * @param name String
         * @param url String
         * @param icon String
         * @param createdDate LocalDateTime
         * @param updatedDate LocalDateTime
         * @param accessPointType AccessPointType
         * @return newInstance AccessPoint
         */
        public static AccessPoint newInstance(String createdBy, String updatedBy, String name, String url, String icon, LocalDateTime createdDate, LocalDateTime updatedDate, AccessPointType accessPointType)
        {
            final AccessPoint entity = new AccessPoint();
            entity.setCreatedBy(createdBy);
            entity.setUpdatedBy(updatedBy);
            entity.setName(name);
            entity.setUrl(url);
            entity.setIcon(icon);
            entity.setCreatedDate(createdDate);
            entity.setUpdatedDate(updatedDate);
            entity.setAccessPointType(accessPointType);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(AccessPoint other)
    {
        int cmp = 0;
        if (this.getId() != null && other.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCreatedBy() != null && other.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getUpdatedBy() != null && other.getUpdatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedBy().compareTo(other.getUpdatedBy()));
            }
            if (this.getName() != null && other.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(other.getName()));
            }
            if (this.getUrl() != null && other.getUrl() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUrl().compareTo(other.getUrl()));
            }
            if (this.getIcon() != null && other.getIcon() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIcon().compareTo(other.getIcon()));
            }
            if (this.getCreatedDate() != null && other.getCreatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedDate().compareTo(other.getCreatedDate()));
            }
            if (this.getUpdatedDate() != null && other.getUpdatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedDate().compareTo(other.getUpdatedDate()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("AccessPoint(");
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" updatedBy=").append(getUpdatedBy());
        sb.append(" name=").append(getName());
        sb.append(" url=").append(getUrl());
        sb.append(" icon=").append(getIcon());
        sb.append(" createdDate=").append(getCreatedDate());
        sb.append(" updatedDate=").append(getUpdatedDate());
        sb.append(" id=").append(getId());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}