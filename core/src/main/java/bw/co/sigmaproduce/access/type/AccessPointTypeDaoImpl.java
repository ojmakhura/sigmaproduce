// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.sigmaproduce.access.type;

import bw.co.sigmaproduce.SigmaproduceSpecifications;
import java.util.Collection;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see AccessPointType
 */
@Repository("accessPointTypeDao")
@Transactional
public class AccessPointTypeDaoImpl
    extends AccessPointTypeDaoBase
{
    public AccessPointTypeDaoImpl(AccessPointTypeRepository accessPointTypeRepository) {
        super(accessPointTypeRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<AccessPointType> handleFindByCriteria(String criteria)
    {
        Specification<AccessPointType> spec = null;
        if(StringUtils.isNotBlank(criteria)) {
            spec = SigmaproduceSpecifications.<AccessPointType>findByAttributeContainingIgnoreCase(criteria, "name")
                    .or(SigmaproduceSpecifications.<AccessPointType>findByAttributeContainingIgnoreCase(criteria, "code"));
            
        }

        return accessPointTypeRepository.findAll(spec, Sort.by(Direction.ASC, "id"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toAccessPointTypeVO(
        AccessPointType source,
        AccessPointTypeVO target)
    {
        // TODO verify behavior of toAccessPointTypeVO
        super.toAccessPointTypeVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointTypeVO toAccessPointTypeVO(final AccessPointType entity)
    {
        // TODO verify behavior of toAccessPointTypeVO
        return super.toAccessPointTypeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private AccessPointType loadAccessPointTypeFromAccessPointTypeVO(AccessPointTypeVO accessPointTypeVO)
    {
        if (accessPointTypeVO.getId() == null)
        {
            return  AccessPointType.Factory.newInstance();
        }
        else
        {
            return this.load(accessPointTypeVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public AccessPointType accessPointTypeVOToEntity(AccessPointTypeVO accessPointTypeVO)
    {
        // TODO verify behavior of accessPointTypeVOToEntity
        AccessPointType entity = this.loadAccessPointTypeFromAccessPointTypeVO(accessPointTypeVO);
        this.accessPointTypeVOToEntity(accessPointTypeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointTypeVOToEntity(
        AccessPointTypeVO source,
        AccessPointType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of accessPointTypeVOToEntity
        super.accessPointTypeVOToEntity(source, target, copyIfNull);
    }
}