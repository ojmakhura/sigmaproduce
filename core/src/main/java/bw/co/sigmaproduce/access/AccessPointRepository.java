// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.access;

import java.time.LocalDateTime;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface AccessPointRepository extends 
        JpaRepository<AccessPoint, Long>,
        JpaSpecificationExecutor<AccessPoint> {

    // Generating pageable query method for createdBy
    Page<AccessPoint> findByCreatedBy(String createdBy, Pageable pageable);

    Page<AccessPoint> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<AccessPoint> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<AccessPoint> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<AccessPoint> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<AccessPoint> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<AccessPoint> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByCreatedByNot(String createdBy);
    Page<AccessPoint> findByCreatedByNot(String createdBy, Pageable pageable);
    
    Collection<AccessPoint> findByCreatedByIn(Collection<String> createdBys);
    Page<AccessPoint> findByCreatedByIn(Collection<String> createdBys, Pageable pageable);
    
    Collection<AccessPoint> findByCreatedByNotIn(Collection<String> createdBys);
    Page<AccessPoint> findByCreatedByNotIn(Collection<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<AccessPoint> findByUpdatedByNull(Pageable pageable);

    Page<AccessPoint> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByUpdatedByNot(String updatedBy);
    Page<AccessPoint> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    Collection<AccessPoint> findByUpdatedByIn(Collection<String> updatedBys);
    Page<AccessPoint> findByUpdatedByIn(Collection<String> updatedBys, Pageable pageable);
    
    Collection<AccessPoint> findByUpdatedByNotIn(Collection<String> updatedBys);
    Page<AccessPoint> findByUpdatedByNotIn(Collection<String> updatedBys, Pageable pageable);

    // Generating pageable query method for name
    Page<AccessPoint> findByName(String name, Pageable pageable);

    Page<AccessPoint> findByNameStartingWithIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPoint> findByNameEndingWithIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPoint> findByNameContainingIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPoint> findByNameLikeIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPoint> findByNameNotLikeIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPoint> findByNameContaining(String name, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByNameNot(String name);
    Page<AccessPoint> findByNameNot(String name, Pageable pageable);
    
    Collection<AccessPoint> findByNameIn(Collection<String> names);
    Page<AccessPoint> findByNameIn(Collection<String> names, Pageable pageable);
    
    Collection<AccessPoint> findByNameNotIn(Collection<String> names);
    Page<AccessPoint> findByNameNotIn(Collection<String> names, Pageable pageable);

    // Generating pageable query method for url
    Page<AccessPoint> findByUrl(String url, Pageable pageable);

    Page<AccessPoint> findByUrlStartingWithIgnoreCase(String url, Pageable pageable);
    
    Page<AccessPoint> findByUrlEndingWithIgnoreCase(String url, Pageable pageable);
    
    Page<AccessPoint> findByUrlContainingIgnoreCase(String url, Pageable pageable);
    
    Page<AccessPoint> findByUrlLikeIgnoreCase(String url, Pageable pageable);
    
    Page<AccessPoint> findByUrlNotLikeIgnoreCase(String url, Pageable pageable);
    
    Page<AccessPoint> findByUrlContaining(String url, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByUrlNot(String url);
    Page<AccessPoint> findByUrlNot(String url, Pageable pageable);
    
    Collection<AccessPoint> findByUrlIn(Collection<String> urls);
    Page<AccessPoint> findByUrlIn(Collection<String> urls, Pageable pageable);
    
    Collection<AccessPoint> findByUrlNotIn(Collection<String> urls);
    Page<AccessPoint> findByUrlNotIn(Collection<String> urls, Pageable pageable);

    // Generating pageable query method for icon
    Page<AccessPoint> findByIconNull(Pageable pageable);

    Page<AccessPoint> findByIconStartingWithIgnoreCase(String icon, Pageable pageable);
    
    Page<AccessPoint> findByIconEndingWithIgnoreCase(String icon, Pageable pageable);
    
    Page<AccessPoint> findByIconContainingIgnoreCase(String icon, Pageable pageable);
    
    Page<AccessPoint> findByIconLikeIgnoreCase(String icon, Pageable pageable);
    
    Page<AccessPoint> findByIconNotLikeIgnoreCase(String icon, Pageable pageable);
    
    Page<AccessPoint> findByIconContaining(String icon, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByIconNot(String icon);
    Page<AccessPoint> findByIconNot(String icon, Pageable pageable);
    
    Collection<AccessPoint> findByIconIn(Collection<String> icons);
    Page<AccessPoint> findByIconIn(Collection<String> icons, Pageable pageable);
    
    Collection<AccessPoint> findByIconNotIn(Collection<String> icons);
    Page<AccessPoint> findByIconNotIn(Collection<String> icons, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<AccessPoint> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<AccessPoint> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<AccessPoint> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<AccessPoint> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByCreatedDateNot(LocalDateTime createdDate);
    Page<AccessPoint> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    Collection<AccessPoint> findByCreatedDateIn(Collection<LocalDateTime> createdDates);
    Page<AccessPoint> findByCreatedDateIn(Collection<LocalDateTime> createdDates, Pageable pageable);
    
    Collection<AccessPoint> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates);
    Page<AccessPoint> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<AccessPoint> findByUpdatedDateNull(Pageable pageable);

    Page<AccessPoint> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<AccessPoint> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<AccessPoint> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    Collection<AccessPoint> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates);
    Page<AccessPoint> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates, Pageable pageable);
    
    Collection<AccessPoint> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates);
    Page<AccessPoint> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates, Pageable pageable);

    // Generating pageable query method for id
    Page<AccessPoint> findByIdNull(Pageable pageable);

    Page<AccessPoint> findByIdLessThanEqual(Long id, Pageable pageable);
    
    Page<AccessPoint> findByIdGreaterThanEqual(Long id, Pageable pageable);
    
    Page<AccessPoint> findByIdLessThan(Long id, Pageable pageable);
    
    Page<AccessPoint> findByIdGreaterThan(Long id, Pageable pageable);
    
    Page<AccessPoint> findByIdBetween(Long idStart, Long idEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPoint> findByIdNot(Long id);
    Page<AccessPoint> findByIdNot(Long id, Pageable pageable);
    
    Collection<AccessPoint> findByIdIn(Collection<Long> ids);
    Page<AccessPoint> findByIdIn(Collection<Long> ids, Pageable pageable);
    
    Collection<AccessPoint> findByIdNotIn(Collection<Long> ids);
    Page<AccessPoint> findByIdNotIn(Collection<Long> ids, Pageable pageable);

}