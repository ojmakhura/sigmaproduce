// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.co.sigmaproduce.access.type;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface AccessPointTypeRepository extends 
        JpaRepository<AccessPointType, Long>,
        JpaSpecificationExecutor<AccessPointType> {

    // Generating pageable query method for code
    Page<AccessPointType> findByCode(String code, Pageable pageable);

    Page<AccessPointType> findByCodeStartingWithIgnoreCase(String code, Pageable pageable);
    
    Page<AccessPointType> findByCodeEndingWithIgnoreCase(String code, Pageable pageable);
    
    Page<AccessPointType> findByCodeContainingIgnoreCase(String code, Pageable pageable);
    
    Page<AccessPointType> findByCodeLikeIgnoreCase(String code, Pageable pageable);
    
    Page<AccessPointType> findByCodeNotLikeIgnoreCase(String code, Pageable pageable);
    
    Page<AccessPointType> findByCodeContaining(String code, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPointType> findByCodeNot(String code);
    Page<AccessPointType> findByCodeNot(String code, Pageable pageable);
    
    Collection<AccessPointType> findByCodeIn(Collection<String> codes);
    Page<AccessPointType> findByCodeIn(Collection<String> codes, Pageable pageable);
    
    Collection<AccessPointType> findByCodeNotIn(Collection<String> codes);
    Page<AccessPointType> findByCodeNotIn(Collection<String> codes, Pageable pageable);

    // Generating pageable query method for name
    Page<AccessPointType> findByName(String name, Pageable pageable);

    Page<AccessPointType> findByNameStartingWithIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPointType> findByNameEndingWithIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPointType> findByNameContainingIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPointType> findByNameLikeIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPointType> findByNameNotLikeIgnoreCase(String name, Pageable pageable);
    
    Page<AccessPointType> findByNameContaining(String name, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPointType> findByNameNot(String name);
    Page<AccessPointType> findByNameNot(String name, Pageable pageable);
    
    Collection<AccessPointType> findByNameIn(Collection<String> names);
    Page<AccessPointType> findByNameIn(Collection<String> names, Pageable pageable);
    
    Collection<AccessPointType> findByNameNotIn(Collection<String> names);
    Page<AccessPointType> findByNameNotIn(Collection<String> names, Pageable pageable);

    // Generating pageable query method for description
    Page<AccessPointType> findByDescriptionNull(Pageable pageable);

    Page<AccessPointType> findByDescriptionStartingWithIgnoreCase(String description, Pageable pageable);
    
    Page<AccessPointType> findByDescriptionEndingWithIgnoreCase(String description, Pageable pageable);
    
    Page<AccessPointType> findByDescriptionContainingIgnoreCase(String description, Pageable pageable);
    
    Page<AccessPointType> findByDescriptionLikeIgnoreCase(String description, Pageable pageable);
    
    Page<AccessPointType> findByDescriptionNotLikeIgnoreCase(String description, Pageable pageable);
    
    Page<AccessPointType> findByDescriptionContaining(String description, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPointType> findByDescriptionNot(String description);
    Page<AccessPointType> findByDescriptionNot(String description, Pageable pageable);
    
    Collection<AccessPointType> findByDescriptionIn(Collection<String> descriptions);
    Page<AccessPointType> findByDescriptionIn(Collection<String> descriptions, Pageable pageable);
    
    Collection<AccessPointType> findByDescriptionNotIn(Collection<String> descriptions);
    Page<AccessPointType> findByDescriptionNotIn(Collection<String> descriptions, Pageable pageable);

    // Generating pageable query method for id
    Page<AccessPointType> findByIdNull(Pageable pageable);

    Page<AccessPointType> findByIdLessThanEqual(Long id, Pageable pageable);
    
    Page<AccessPointType> findByIdGreaterThanEqual(Long id, Pageable pageable);
    
    Page<AccessPointType> findByIdLessThan(Long id, Pageable pageable);
    
    Page<AccessPointType> findByIdGreaterThan(Long id, Pageable pageable);
    
    Page<AccessPointType> findByIdBetween(Long idStart, Long idEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<AccessPointType> findByIdNot(Long id);
    Page<AccessPointType> findByIdNot(Long id, Pageable pageable);
    
    Collection<AccessPointType> findByIdIn(Collection<Long> ids);
    Page<AccessPointType> findByIdIn(Collection<Long> ids, Pageable pageable);
    
    Collection<AccessPointType> findByIdNotIn(Collection<Long> ids);
    Page<AccessPointType> findByIdNotIn(Collection<Long> ids, Pageable pageable);

}