// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.sigma.crop;

import bw.co.roguesystems.sigma.crop.variety.CropVarietyRepository;
import bw.co.roguesystems.sigma.crop.variety.CropVarietyVO;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see Crop
 */
@Repository("cropDao")
public class CropDaoImpl
    extends CropDaoBase
{
    
    public CropDaoImpl(
        CropVarietyRepository cropVarietyRepository,
        CropRepository cropRepository
    ) {

        super(
            cropVarietyRepository,
            cropRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Crop> handleFindByCriteria(String criteria)
    {

        Specification<Crop> spec = null;

        if(StringUtils.isNotBlank(criteria)) {

            spec = (root, query, cb) -> cb.or(
                cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%")
            );

        }

        return this.cropRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Page<Crop> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
    {

        Specification<Crop> spec = null;

        if(StringUtils.isNotBlank(criteria)) {

            spec = (root, query, cb) -> cb.or(
                cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%")
            );

        }

        return this.cropRepository.findAll(spec, PageRequest.of(pageNumber, pageSize));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVO(
        Crop source,
        CropVO target)
    {
        // TODO verify behavior of toCropVO
        super.toCropVO(source, target);

        if(CollectionUtils.isNotEmpty(source.getCropVarieties())) {

            Collection<CropVarietyVO> varieties = new ArrayList<>();

            for(bw.co.roguesystems.sigma.crop.variety.CropVariety item : source.getCropVarieties()) {
                varieties.add(this.cropVarietyDao.toCropVarietyVO(item));
            }

            target.setVarieties(varieties);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVO toCropVO(final Crop entity)
    {
        // TODO verify behavior of toCropVO
        return super.toCropVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Crop loadCropFromCropVO(CropVO cropVO)
    {
        if (cropVO.getId() == null)
        {
            return  Crop.Factory.newInstance();
        }
        else
        {
            return this.load(cropVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Crop cropVOToEntity(CropVO cropVO)
    {
        // TODO verify behavior of cropVOToEntity
        Crop entity = this.loadCropFromCropVO(cropVO);
        this.cropVOToEntity(cropVO, entity, true);

        if(CollectionUtils.isNotEmpty(cropVO.getVarieties())) {

            Collection<bw.co.roguesystems.sigma.crop.variety.CropVariety> varieties = new ArrayList<>();

            for(CropVarietyVO item : cropVO.getVarieties()) {
                varieties.add(this.cropVarietyDao.cropVarietyVOToEntity(item));
            }

            entity.setCropVarieties(varieties);
        }

        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVOToEntity(
        CropVO source,
        Crop target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVOToEntity
        super.cropVOToEntity(source, target, copyIfNull);
    }
}