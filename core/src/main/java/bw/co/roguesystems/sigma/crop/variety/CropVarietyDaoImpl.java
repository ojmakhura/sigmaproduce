// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.sigma.crop.variety;

import bw.co.roguesystems.sigma.crop.Crop;
import bw.co.roguesystems.sigma.crop.CropRepository;
import bw.co.roguesystems.sigma.crop.CropVO;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Repository;

/**
 * @see CropVariety
 */
@Repository("cropVarietyDao")
public class CropVarietyDaoImpl
    extends CropVarietyDaoBase
{
    
    public CropVarietyDaoImpl(
        CropRepository cropRepository,
        CropVarietyRepository cropVarietyRepository
    ) {

        super(
            cropRepository,
            cropVarietyRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<CropVariety> handleFindByCriteria(String criteria)
    {
        // TODO implement public Collection<CropVariety> handleFindByCriteria(String criteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Page<CropVariety> handleFindByCriteriaPaged(String criteria, Integer pageSize, Integer pageNumber)
    {
        // TODO implement public Page<CropVariety> handleFindByCriteriaPaged(String criteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCropVarietyVO(
        CropVariety source,
        CropVarietyVO target)
    {
        // TODO verify behavior of toCropVarietyVO
        super.toCropVarietyVO(source, target);
        // WARNING! No conversion for target.crop (can't convert source.getCrop():bw.co.roguesystems.sigma.crop.Crop to bw.co.roguesystems.sigma.crop.CropVO

        if(source.getCrop() != null)
        {
            CropVO crop = new CropVO();
            crop.setId(source.getCrop().getId());
            crop.setCode(source.getCrop().getCode());
            crop.setName(source.getCrop().getName());
            target.setCrop(crop);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CropVarietyVO toCropVarietyVO(final CropVariety entity)
    {
        // TODO verify behavior of toCropVarietyVO
        return super.toCropVarietyVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CropVariety loadCropVarietyFromCropVarietyVO(CropVarietyVO cropVarietyVO)
    {

        if (cropVarietyVO.getId() == null)
        {
            return  CropVariety.Factory.newInstance();
        }
        else
        {
            return this.load(cropVarietyVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public CropVariety cropVarietyVOToEntity(CropVarietyVO cropVarietyVO)
    {
        // TODO verify behavior of cropVarietyVOToEntity
        CropVariety entity = this.loadCropVarietyFromCropVarietyVO(cropVarietyVO);
        this.cropVarietyVOToEntity(cropVarietyVO, entity, true);

        if(cropVarietyVO.getCrop() != null && cropVarietyVO.getCrop().getId() != null) {
            Crop crop = this.cropRepository.getReferenceById(cropVarietyVO.getCrop().getId());
            entity.setCrop(crop);

        }

        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void cropVarietyVOToEntity(
        CropVarietyVO source,
        CropVariety target,
        boolean copyIfNull)
    {
        // TODO verify behavior of cropVarietyVOToEntity
        super.cropVarietyVOToEntity(source, target, copyIfNull);
    }
}